{"version":3,"sources":["Components/Header/HeaderBar.jsx","Components/Header/Settings.jsx","Components/Header/Header.jsx","Components/Game/Cards/Card.jsx","Components/Game/Cards/Cards.jsx","Components/Game/Key.jsx","Components/Game/Keyboard.jsx","Components/Game/Timer.jsx","Components/Game/PlayerState.jsx","Components/Game/Content.jsx","Components/Modals/GenericModal.jsx","Components/Modals/CardModal.jsx","Components/Game/Game.jsx","Components/PlayersBrowser/BrowserEntry.jsx","Components/PlayersBrowser/Functions.js","Components/PlayersBrowser/PlayersBrowser.jsx","Components/LoginPage/LoginPage.jsx","Components/Game/Walkthrough.jsx","Components/Modals/InvitationModal.jsx","Components/Modals/DisconnectedModal.jsx","App.jsx","index.js","Resources/Sounds/popup.mp3","Shared/Functions.js","Game/Cards/Cards.js","Resources/Sounds/card_drop.mp3","Resources/Sounds/card_flip.mp3","Resources/Sounds/card_flip2.mp3","Resources/Sounds/card_flip3.mp3","Resources/Sounds/button_click.mp3","Resources/Sounds/turn_end.mp3","Resources/Sounds/bg-lower.mp3","Shared/Events.js","Components/Header/Functions.js","Shared/Enums.js"],"names":["HeaderBar","_ref","_ref$title","title","_ref$score","score","react_default","a","createElement","className","me","concat","myScore","enemyScore","enemy","roundAndConvertVolume","require","Settings","onChange","e","target","id","_this","props","setSettings","soundVol","value","musicVol","volumeSettings","_this2","this","react_icons_kit_default","icon","cog","size","volume_2","type","min","max","note","Component","Header","state","Header_Settings","Header_HeaderBar","location","pathname","Object","objectSpread","withRouter","CardContent","description","cardBehaviour","isMine","isUsed","isDisabled","isBlocked","isDiscardEnabled","classes","descriptionComponent","Fragment","src","alt","CardOverlay","_ref2","onUseAbort","onDiscard","onUse","disabledText","overlay","onClick","fontSize","length","style","Card","_this$props","card","Card_CardContent","Card_CardOverlay","CardsData","Cards","CardsSpawner","cards","areMyCards","player","game","cardMoves","isMove","onCardUse","blockCounter","blockCounters","socketId","resultCards","map","index","cardData","some","move","discarded","data","cardId","doesMeetConditions","key","Cards_Card","isTooltipOpenable","areMine","cardStyle","animation","wrapperTitle","Cards_CardsSpawner","Key","isSelected","letter","keyClickHandler","backgroundColor","textDecoration","borderWidth","borderStyle","borderColor","Keyboard","generateKeys","result","_loop","i","String","fromCharCode","toUpperCase","myKeys","keys","filter","playerSocketId","includes","keyMove","push","Game_Key","onKeyMove","Timer","timeInterval","time","wrapperStyle","circleStyle","propsStyle","setInterval","setState","prevState","clearInterval","onEnd","display","r","cx","cy","Chains","getSide","side","Shield","PlayerState","getIcon","PlayerState_Chains","PlayerState_Shield","getPlayerState","playerSockets","EndTurnButton","text","disabled","Content","colorDisplayWord","word","guessed","Array","from","forEach","g","color","onMoveTimeout","onEndTurn","Game_PlayerState","Game_Timer","displayWord","x","Content_EndTurnButton","Game_Keyboard","GenericModal","onClose","content","soundVolume","ReactDOM","createPortal","bundle_default","volume","popupSound","autoPlay","react_icons_kit","cross","document","body","CardModal","setScore","GAME_MOVE","WIN","Result","Game","gameFromProps","allowMove","soundSrc","guessedWordModal","isTieModal","gameEndWinnerModal","wordDefinition","isMoveModal","isPeekModal","peekCardId","peekDescription","myCards","enemyCards","initializeSocket","socket","on","moveBool","setMove","playSound","turnEndSound","winner","setTitle","returnState","TURN_WIN","TURN_TIE","GAME_WIN","nickname","onMove","flipSound3","_this$state","DEFINITION_CARD","definitions","randomIndex","Math","floor","random","LOOK_UP_CARD","enemySocket","randomIndexOfCard","randomEnemyCard","moves","toConsumableArray","emit","flipSound2","buttonClick","clearKeyMove","clickedIndex","cardMove","setTimeout","flipSound1","newMove","discardSound","event","isDown","_this$props2","mySocketId","myBlocked","keyCode","muteMusic","addEventListener","ctrlPressHandler","_this3","removeEventListener","_this4","my","gameCards","enemySocketId","Modals_GenericModal","Modals_CardModal","history","onEnded","Game_Cards_Cards","Components_Game_Content","BrowserEntry","isButtonDisabled","isTimeoutModal","clickHandler","preventDefault","invitationHandler","_isMounted","extractBrowserPlayers","connectedPlayers","assign","values","isInGame","PlayersBrowser_BrowserEntry","indexOf","PlayersBrowser","playersInBrowser","searchedPlayer","searchPlayer","input","players","item","toLowerCase","SearchedPlayer","placeholder","dist_default","width","height","entry","React","LoginPage","inputRef","createRef","isNameLengthOpen","isNameSpaceOpen","isNameTakenOpen","isAlreadyLoggedInOpen","loginHandler","current","VERIFY_USER","isTaken","isIpFree","loginPlayer","submitOnEnter","which","ref","maxLength","onKeyDown","Description","Walkthrough","isClicked","onReady","WALKTHROUGH_READY","gameId","buttonClass","Walkthrough_Description","InvitationModal","onAccept","DisconnectedPopup","socketUrl","process","trim","Logo","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","config","disconnectedTimeoutMs","defaultVolumeSettings","isInCache","localStorage","getItem","undefined","_ref$id","_ref$socketId","addPopup","INVITATION","io","console","log","ms","isDisconnected","PLAYER_CONNECTED","PLAYER_DISCONNECTED","REFRESH_PLAYERS","s","_ref3","isInvitationModal","invitationNickname","onInvitationAccept","INVITATION_ACCEPTED","fromSocketId","to","GAME_CREATED","_ref4","GAME_STARTED","_ref5","setGame","_ref6","logoutPlayer","LOGOUT","_ref7","_ref7$title","_ref7$score","_ref8","_ref9","cachedVolumeSettings","setItem","JSON","stringify","muted","popupsRef","parse","_this$state2","Modals_InvitationModal","DisconnectedModal","App_Logo","Components_Header_Header","bgMusic","loop","Switch","Route","exact","path","Components_LoginPage_LoginPage","render","Components_PlayersBrowser_PlayersBrowser","Components_Game_Walkthrough","Components_Game_Game","BrowserRouter","src_App_0","getElementById","module","exports","__webpack_require__","p","nextPlayerIndex","_ref2$game","use","currentGame","findIndex","RANDOM_CORRECT_LETTER_CARD","guessedArr","arr","char","randomCorrectLetter","playerSocket","ADDITIONAL_TURN_CARD","REMOVE_ONE_UNFITTING_CARD","wordKeys","user","candidates","REMOVE_TWO_UNFITTING_CARD","_ref10","BLOCK_CARD","_ref11","_ref12","IMMUNE_TO_BLOCK_CARD","_ref13","mySocket","_ref14","_ref15","_ref16","SWAP_RANDOM_CARDS","_ref17","getEnemySocketId","myRandomIndex","enemyRandomIndex","randomMyCard","_ref18","c","RANDOMIZE_YOURSELF_CARD","_ref19","excluded","arguments","included","getRandomCard","_ref20","RANDOMIZE_ENEMY_CARD","_ref21","enemyCardAmount","_ref22","randomKey","generateCards","amount","isAdditionalTurnGenerated","getCard","resupplyCards","newCards","round","parseInt","GAME_TIE","NOTHING"],"mappings":"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","file":"static/js/main.5ff7b8a0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst HeaderBar = ({ title = null, score = null }) => {\r\n    return (\r\n        <div className='column auto has-background-dark header'>\r\n            {score && (\r\n                <div className='title has-text-white-ter'>\r\n                    <div className='scoreHeader'>\r\n                        <div className='flex-item me'>\r\n                            <span>{score.me}</span>\r\n                        </div>\r\n                        <div className='flex-item score'>\r\n                            <span>{`${score.myScore}:${\r\n                                score.enemyScore\r\n                            }`}</span>\r\n                        </div>\r\n                        <div className='flex-item enemy'>\r\n                            <span>{score.enemy}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {title && <div className='title has-text-white-ter'>{title}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderBar\r\n","import React, { Component } from 'react'\r\nimport Icon from 'react-icons-kit'\r\nimport { volume_2 } from 'react-icons-kit/ikons/volume_2'\r\nimport { note } from 'react-icons-kit/entypo/note'\r\nimport { cog } from 'react-icons-kit/fa/cog'\r\n\r\nconst { roundAndConvertVolume } = require('./Functions')\r\n\r\nclass Settings extends Component {\r\n    onChange = e => {\r\n        if (e.target.id === 'sound-slider-thumb') {\r\n            this.props.setSettings({\r\n                soundVol: roundAndConvertVolume(e.target.value),\r\n                musicVol: this.props.volumeSettings.musicVol\r\n            })\r\n        } else if (e.target.id === 'music-slider-thumb') {\r\n            this.props.setSettings({\r\n                soundVol: this.props.volumeSettings.soundVol,\r\n                musicVol: roundAndConvertVolume(e.target.value)\r\n            })\r\n        }\r\n    }\r\n\r\n    //todo wobbles when gear rotates\r\n    //playersbrowser nth child even && odd\r\n\r\n    render() {\r\n        let soundVol = this.props.volumeSettings.soundVol * 100\r\n        let musicVol = this.props.volumeSettings.musicVol * 100\r\n        return (\r\n            <div className='options-btn'>\r\n                <div className='gear-icon-wrapper'>\r\n                    <Icon icon={cog} size={32} className='gear-icon' />\r\n                </div>\r\n                <div className='dropdown-options border-neon border-neon-translucent'>\r\n                    <div className='settings-wrapper'>\r\n                        <div className='options-items'>\r\n                            <div className='options-item'>\r\n                                <Icon\r\n                                    className='options-icon'\r\n                                    icon={volume_2}\r\n                                    size={32}\r\n                                />\r\n                                <span className='options-item-description'>{`Sound volume: ${soundVol}%`}</span>\r\n                                <div className='slider-wrapper input-neon border-neon border-neon-violet'>\r\n                                    <input\r\n                                        type='range'\r\n                                        min='0'\r\n                                        max='100'\r\n                                        id='sound-slider-thumb'\r\n                                        className='options-slider slider'\r\n                                        value={soundVol}\r\n                                        onChange={e => this.onChange(e)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className='options-item'>\r\n                                <Icon\r\n                                    className='options-icon'\r\n                                    icon={note}\r\n                                    size={32}\r\n                                />\r\n                                <span className='options-item-description'>{`Music volume: ${musicVol}%`}</span>\r\n                                <div className='slider-wrapper input-neon border-neon border-neon-violet'>\r\n                                    <input\r\n                                        type='range'\r\n                                        min='0'\r\n                                        max='100'\r\n                                        id='music-slider-thumb'\r\n                                        className='options-slider slider'\r\n                                        value={musicVol}\r\n                                        onChange={e => this.onChange(e)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Settings\r\n","import React, { Component } from 'react'\r\nimport HeaderBar from './HeaderBar'\r\nimport Settings from './Settings'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './Header.css'\r\n\r\nclass Header extends Component {\r\n    state = { volumeSettings: this.props.volumeSettings }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.location.pathname === '/game') {\r\n            return {\r\n                volumeSettings: { ...props.volumeSettings, musicVol: 0 }\r\n            }\r\n        }\r\n        return { volumeSettings: props.volumeSettings }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='row header width-full semi-bold bg-dark color-lightblue padding-sm height-sm text-lg content-hcenter content-vcenter'>\r\n                <Settings\r\n                    volumeSettings={this.state.volumeSettings}\r\n                    setSettings={this.props.setSettings}\r\n                />\r\n                <HeaderBar title={this.props.title} score={this.props.score} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Header)\r\n","import React, { Component } from 'react'\r\nimport './Cards.css'\r\n\r\nconst CardContent = ({ id, description, cardBehaviour }) => {\r\n    let {\r\n        isMine,\r\n        isUsed,\r\n        isDisabled,\r\n        isBlocked,\r\n        isDiscardEnabled\r\n    } = cardBehaviour\r\n    let classes = 'card-image '\r\n    if (isUsed || isDisabled || isBlocked || isDiscardEnabled)\r\n        classes += 'card-image-used '\r\n\r\n    if (isMine) {\r\n        let descriptionComponent = isUsed ? (\r\n            <div className='card-info'>{description}</div>\r\n        ) : null\r\n        return (\r\n            <React.Fragment>\r\n                <img\r\n                    className={classes}\r\n                    src={`images/cards/${id}.svg`}\r\n                    alt='Playing card.'\r\n                />\r\n                {descriptionComponent}\r\n            </React.Fragment>\r\n        )\r\n    } else {\r\n        return (\r\n            <img\r\n                className={`${classes} default-pointer`}\r\n                src={`images/cards/placeholder.svg`}\r\n                alt='Playing card.'\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst CardOverlay = ({\r\n    cardBehaviour,\r\n    onUseAbort,\r\n    onDiscard,\r\n    onUse,\r\n    disabledText\r\n}) => {\r\n    let { isUsed, isDisabled, isBlocked, isDiscardEnabled } = cardBehaviour\r\n    let overlay = null\r\n    if (isDiscardEnabled) {\r\n        overlay = (\r\n            <button\r\n                className='card-discard-button'\r\n                onClick={() => {\r\n                    onDiscard()\r\n                }}\r\n            >\r\n                <div>Click to discard</div>\r\n            </button>\r\n        )\r\n    } else if (isUsed) {\r\n        overlay = (\r\n            <button\r\n                className='card-use-abort-button'\r\n                onClick={() => {\r\n                    onUseAbort()\r\n                }}\r\n            >\r\n                <div>Click to abort</div>\r\n            </button>\r\n        )\r\n    } else if (isDisabled) {\r\n        let fontSize = '1.4vw'\r\n        if (disabledText.length > 76) fontSize = '1.2vw'\r\n        overlay = (\r\n            <div className='card-disabled-info' style={{ fontSize }}>\r\n                {disabledText}\r\n            </div>\r\n        )\r\n    } else if (isBlocked) {\r\n        overlay = (\r\n            <div className='card-disabled-info'>Your cards are blocked.</div>\r\n        )\r\n    } else {\r\n        overlay = <button className='card-use-button' onClick={onUse} />\r\n    }\r\n    return <div className='card-overlay'>{overlay}</div>\r\n}\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        let {\r\n            cardBehaviour,\r\n            card,\r\n            onUseAbort,\r\n            onDiscard,\r\n            onUse,\r\n            isMine\r\n        } = this.props\r\n        let classes = 'card '\r\n        if (isMine) classes += 'hover-pointer'\r\n        return (\r\n            <div className={classes}>\r\n                <CardContent\r\n                    id={card.id}\r\n                    description={card.description}\r\n                    cardBehaviour={cardBehaviour}\r\n                />\r\n                <CardOverlay\r\n                    cardBehaviour={cardBehaviour}\r\n                    onUse={onUse}\r\n                    onUseAbort={onUseAbort}\r\n                    onDiscard={onDiscard}\r\n                    disabledText={card.disabledText}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\r\nimport Card from './Card'\r\nimport './Cards.css'\r\nconst { Cards: CardsData } = require('../../../Game/Cards/Cards')\r\n\r\nconst CardsSpawner = props => {\r\n    let {\r\n        cards,\r\n        areMyCards,\r\n        isDiscardEnabled,\r\n        player,\r\n        game,\r\n        cardMoves,\r\n        isMove,\r\n        onDiscard,\r\n        onUseAbort,\r\n        onCardUse\r\n    } = props\r\n    let blockCounter = 0\r\n    if (game !== null) blockCounter = game.blockCounters[player.socketId]\r\n    let resultCards = null\r\n    if (cards !== null) {\r\n        resultCards = cards.map((card, index) => {\r\n            let cardData = CardsData[card.id]\r\n\r\n            let cardBehaviour = {\r\n                isMine: false\r\n            }\r\n            if (areMyCards) {\r\n                //todo cardMoves\r\n                let isUsed = cardMoves.some(move => {\r\n                    return move.discarded === false && move.index === index\r\n                })\r\n                let data = { cardId: card.id, index }\r\n                let isBlocked = false\r\n                if (blockCounter > 0 && blockCounter <= 2) {\r\n                    isBlocked = true\r\n                }\r\n\r\n                cardBehaviour = {\r\n                    isMine: true,\r\n                    isUsed,\r\n                    isDiscardEnabled,\r\n                    isBlocked,\r\n                    isDisabled: !cardData.doesMeetConditions({\r\n                        game,\r\n                        player,\r\n                        index\r\n                    })\r\n                }\r\n\r\n                return (\r\n                    <li key={index}>\r\n                        <Card\r\n                            index={index}\r\n                            card={card}\r\n                            cardBehaviour={cardBehaviour}\r\n                            onUse={() => {\r\n                                isMove && onCardUse(data)\r\n                            }}\r\n                            onUseAbort={() => {\r\n                                onUseAbort(index)\r\n                            }}\r\n                            onDiscard={() => {\r\n                                isMove && onDiscard(index, card.id)\r\n                            }}\r\n                        />\r\n                    </li>\r\n                )\r\n            } else {\r\n                return (\r\n                    <li key={index}>\r\n                        <Card card={card} cardBehaviour={cardBehaviour} />\r\n                    </li>\r\n                )\r\n            }\r\n        })\r\n    }\r\n    return <ul>{resultCards}</ul>\r\n}\r\n\r\nclass Cards extends Component {\r\n    state = { isTooltipOpenable: this.props.areMine }\r\n\r\n    onUse = data => {\r\n        if (this.props.areMyCards) this.props.onCardUse(data)\r\n    }\r\n\r\n    render() {\r\n        let { areMyCards, isMove } = this.props\r\n\r\n        let cardStyle = null\r\n        if ((areMyCards && isMove) || (!areMyCards && !isMove))\r\n            cardStyle = {\r\n                animation:\r\n                    'moveFlashing 400ms linear infinite alternate-reverse forwards'\r\n            }\r\n\r\n        let wrapperTitle = areMyCards ? 'Your cards:' : 'Enemy cards:'\r\n\r\n        return (\r\n            <div className='cards' style={cardStyle}>\r\n                <span className='cards-title'>{wrapperTitle}</span>\r\n                <div className='cards-wrapper'>\r\n                    <CardsSpawner {...this.props} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards\r\n","import React, { Component } from 'react'\r\n\r\nclass Key extends Component {\r\n    render() {\r\n        let { isUsed, isSelected, letter, keyClickHandler } = this.props\r\n        let style = { backgroundColor: '#519C3F' }\r\n        if (isUsed) style = { backgroundColor: '#555', textDecoration: 'none' }\r\n        if (isSelected)\r\n            style = {\r\n                ...style,\r\n                borderWidth: '0.3vh',\r\n                borderStyle: 'solid',\r\n                borderColor: 'orange'\r\n            }\r\n        return (\r\n            <button\r\n                style={style}\r\n                onClick={() => {\r\n                    keyClickHandler()\r\n                }}\r\n                className='key'\r\n            >\r\n                {letter}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Key\r\n","import React, { Component } from 'react'\r\nimport Key from './Key'\r\n\r\nclass Keyboard extends Component {\r\n    generateKeys = () => {\r\n        let result = []\r\n        for (let i = 65; i <= 90; i++) {\r\n            let letter = String.fromCharCode(i).toUpperCase()\r\n            let myKeys = this.props.keys.filter(\r\n                key => key.playerSocketId === this.props.player.socketId\r\n            )\r\n            myKeys = myKeys.map(key => {\r\n                return key.key\r\n            })\r\n\r\n            let isUsed = myKeys.includes(letter)\r\n            let isSelected = false\r\n            if (this.props.keyMove !== null) {\r\n                if (this.props.keyMove.key === letter) {\r\n                    isSelected = true\r\n                }\r\n            }\r\n\r\n            let keyClickHandler = () => {\r\n                let move = {\r\n                    type: 'key',\r\n                    key: letter,\r\n                    playerSocketId: this.props.player.socketId\r\n                }\r\n                if (isSelected === false) {\r\n                    this.props.onKeyMove(move)\r\n                } else {\r\n                    this.props.onKeyMove(null)\r\n                }\r\n            }\r\n\r\n            result.push(\r\n                <Key\r\n                    key={i}\r\n                    keyClickHandler={keyClickHandler}\r\n                    player={this.props.player}\r\n                    letter={letter}\r\n                    isUsed={isUsed}\r\n                    isSelected={isSelected}\r\n                />\r\n            )\r\n        }\r\n        return result\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='keyboard border-neon border-light-translucent'>\r\n                {this.generateKeys().map(key => {\r\n                    return key\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Keyboard\r\n","import React, { Component } from 'react'\r\n\r\nclass Timer extends Component {\r\n    timeInterval = null\r\n    state = {\r\n        time: this.props.time,\r\n        wrapperStyle: {},\r\n        circleStyle: {\r\n            animation: `countdown ${this.props.time}s linear 1 forwards`\r\n        },\r\n        propsStyle: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timeInterval = setInterval(() => {\r\n            this.setState(\r\n                prevState => ({ time: prevState.time - 1 }),\r\n                () => {\r\n                    if (this.state.time === 0) {\r\n                        clearInterval(this.timeInterval)\r\n                        this.props.onEnd && this.props.onEnd() //execute only if there is a callback provided\r\n                        this.setState({\r\n                            style: { display: 'none', ...this.state.style }\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timeInterval)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.state.wrapperStyle} className='timer'>\r\n                <div id='timer-number'>{this.state.time}</div>\r\n                <svg className='timer-svg'>\r\n                    <circle\r\n                        style={this.state.circleStyle}\r\n                        r='18'\r\n                        cx='20'\r\n                        cy='20'\r\n                    />\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer\r\n","import React, { Component } from 'react'\r\n\r\nconst Chains = props => {\r\n    let getSide = props.side\r\n    return (\r\n        <div className={'state-chains ' + getSide}>\r\n            <span>{`Cards blocked for ${props.state} turns.`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Shield = props => {\r\n    let getSide = props.side\r\n    let state = props.state * -1\r\n    return (\r\n        <div className={'state-shield ' + getSide}>\r\n            <span>{`Immune to block cards for ${state} turns.`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass PlayerState extends Component {\r\n    getIcon = (state, side) => {\r\n        if (state > 0) return <Chains state={state} side={side} />\r\n        else if (state < 0) return <Shield state={state} side={side} />\r\n        else return null\r\n    }\r\n\r\n    getPlayerState = me => {\r\n        let { game, player } = this.props\r\n        if (player === null || game === null) return null\r\n        if (me) {\r\n            return this.getIcon(game.blockCounters[player.socketId], 'left-1vh')\r\n        } else {\r\n            let socketId = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            return this.getIcon(game.blockCounters[socketId], 'right-1vh')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='player-state'>\r\n                {this.getPlayerState(true)}\r\n                {this.getPlayerState(false)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayerState\r\n","import React, { Component } from 'react'\r\nimport Keyboard from './Keyboard'\r\nimport Timer from './Timer'\r\nimport PlayerState from './PlayerState'\r\nimport './Content.css'\r\n\r\nconst EndTurnButton = props => {\r\n    let { isMove, onClick } = props\r\n    let text = 'Waiting...'\r\n    let classes =\r\n        'end-turn-btn button-pointer border-neon border-light-translucent '\r\n    if (isMove) {\r\n        classes += 'end-turn-btn-hover'\r\n        text = 'End turn'\r\n    } else {\r\n        classes += 'end-turn-btn-waiting '\r\n    }\r\n\r\n    return (\r\n        <button onClick={onClick} disabled={!isMove} className={classes}>\r\n            {text}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Content extends Component {\r\n    colorDisplayWord = word => {\r\n        word = word.toUpperCase()\r\n        let result = []\r\n        let { guessed } = this.props.game\r\n        let { socketId } = this.props.player\r\n        Array.from(word).forEach((letter, i) => {\r\n            let style = null\r\n            if (letter !== '_' && letter !== ' ') {\r\n                let key = guessed.filter(g => {\r\n                    return g.key === letter\r\n                })[0]\r\n                if (key.playerSocketId === socketId) {\r\n                    style = { color: '#0900ff' }\r\n                } else {\r\n                    style = { color: '#b92e34' }\r\n                }\r\n            }\r\n            result.push(\r\n                <span key={i} style={style}>\r\n                    {letter}\r\n                </span>\r\n            )\r\n        })\r\n        return result\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            onMoveTimeout,\r\n            isMove,\r\n            game,\r\n            player,\r\n            onKeyMove,\r\n            keyMove,\r\n            onEndTurn\r\n        } = this.props\r\n\r\n        let wordClass = 'word border-neon border-neon-violet '\r\n        return (\r\n            <div className='content'>\r\n                <PlayerState player={player} game={game} />\r\n                <div className='timer-wrapper'>\r\n                    {isMove && <Timer time={30} onEnd={onMoveTimeout} />}\r\n                </div>\r\n                <div className='game'>\r\n                    <div className={wordClass}>\r\n                        {game &&\r\n                            this.colorDisplayWord(game.displayWord).map(x => {\r\n                                return x\r\n                            })}\r\n                    </div>\r\n                    <EndTurnButton isMove={isMove} onClick={onEndTurn} />\r\n                    <div className='keyboard-wrapper'>\r\n                        {game && (\r\n                            <Keyboard\r\n                                player={player}\r\n                                keys={game.keys}\r\n                                keyMove={keyMove}\r\n                                onKeyMove={onKeyMove}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Content\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst GenericModal = props => {\r\n    let { onClose, title, content, soundVolume } = props\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n                <div className='generic-popup-title'>\r\n                    <span>{title}</span>\r\n                    <button onClick={onClose} className='btn-popup-close'>\r\n                        <Icon\r\n                            icon={cross}\r\n                            size='1.6vh'\r\n                            className='close-icon'\r\n                        />\r\n                    </button>\r\n                </div>\r\n                <div className='generic-popup-content'>{content}</div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default GenericModal\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst CardModal = props => {\r\n    let { cardId, description, onClose, soundVolume } = props\r\n\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n                <div className='generic-popup-title'>\r\n                    <span />\r\n                    <button onClick={onClose} className='btn-popup-close'>\r\n                        <Icon\r\n                            icon={cross}\r\n                            size='1.6vh'\r\n                            className='close-icon'\r\n                        />\r\n                    </button>\r\n                </div>\r\n                <div className='lookup-card-wrapper'>\r\n                    <img\r\n                        className='lookup-card-display'\r\n                        src={`images/cards/${cardId}.svg`}\r\n                        alt='Card'\r\n                    />\r\n                    <span>{description}</span>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default CardModal\r\n","import React, { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport discardSound from '../../Resources/Sounds/card_drop.mp3'\r\nimport flipSound1 from '../../Resources/Sounds/card_flip.mp3'\r\nimport flipSound2 from '../../Resources/Sounds/card_flip2.mp3'\r\nimport flipSound3 from '../../Resources/Sounds/card_flip3.mp3'\r\nimport buttonClick from '../../Resources/Sounds/button_click.mp3'\r\nimport turnEndSound from '../../Resources/Sounds/turn_end.mp3'\r\n\r\nimport './Game.css'\r\nimport Cards from './Cards/Cards'\r\nimport Content from './Content'\r\nimport GenericModal from '../Modals/GenericModal'\r\nimport CardModal from '../Modals/CardModal'\r\n\r\nconst { Cards: CardsData } = require('../../Game/Cards/Cards')\r\nconst { setScore, isMove } = require('../../Shared/Functions')\r\nconst { GAME_MOVE, WIN } = require('../../Shared/Events')\r\nconst { Result } = require('../../Shared/Enums')\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        game: this.props.game,\r\n        gameFromProps: true,\r\n        allowMove: true,\r\n        soundSrc: '',\r\n        isDiscardEnabled: false,\r\n        guessedWordModal: null,\r\n        isTieModal: false,\r\n        gameEndWinnerModal: null,\r\n        wordDefinition: null,\r\n        isMoveModal: false,\r\n        isPeekModal: false,\r\n        peekCardId: null,\r\n        peekDescription: null,\r\n\r\n        keyMove: null,\r\n        cardMoves: [],\r\n        myCards: null,\r\n        enemyCards: null\r\n    }\r\n\r\n    initializeSocket = () => {\r\n        const { socket } = this.props\r\n        socket.on(GAME_MOVE, ({ game }) => {\r\n            this.setState({ game: game }, () => {\r\n                let moveBool = isMove({\r\n                    game: this.state.game,\r\n                    player: this.props.player\r\n                })\r\n                this.props.setMove(moveBool)\r\n                if (moveBool) this.playSound(turnEndSound)\r\n            })\r\n        })\r\n        socket.on(WIN, ({ winner, score, type, game }) => {\r\n            const { setMove, setTitle, player } = this.props\r\n            let returnState = null\r\n            if (type === Result.TURN_WIN) {\r\n                returnState = { gameFromProps: false, game }\r\n                setMove(isMove({ game, player }))\r\n            } else if (type === Result.TURN_TIE) {\r\n                returnState = { gameFromProps: false, game }\r\n                setMove(isMove({ game, player }))\r\n                this.setState({ isTieModal: true })\r\n            } else if (type === Result.GAME_WIN) {\r\n                returnState = { allowMove: false }\r\n                this.setState({ gameEndWinnerModal: winner.nickname })\r\n            }\r\n\r\n            if (\r\n                type === Result.TURN_WIN ||\r\n                type === Result.TURN_TIE ||\r\n                type === Result.GAME_WIN\r\n            ) {\r\n                this.setState({ guessedWordModal: this.state.game.word.word })\r\n            }\r\n\r\n            setScore({\r\n                player,\r\n                game,\r\n                setTitle,\r\n                score\r\n            })\r\n\r\n            this.setState({ ...returnState })\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.gameFromProps) {\r\n            if (props.game !== state.game) {\r\n                setScore({\r\n                    player: props.player,\r\n                    game: props.game,\r\n                    setTitle: props.setTitle\r\n                })\r\n                return {\r\n                    gameFromProps: false,\r\n                    game: props.game\r\n                }\r\n            }\r\n            return null\r\n        }\r\n        return null\r\n    }\r\n\r\n    ctrlPressHandler(event, isDown) {\r\n        let { player, isMove } = this.props\r\n        let { game } = this.state\r\n        if (player !== null && game !== null) {\r\n            let mySocketId = player.socketId\r\n            let myBlocked = game.blockCounters[mySocketId]\r\n            if (isMove && myBlocked <= 0) {\r\n                if (event.keyCode === 17) {\r\n                    this.setState({ isDiscardEnabled: isDown })\r\n                }\r\n            } else {\r\n                if (event.keyCode === 17) {\r\n                    this.setState({ isDiscardEnabled: false })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.socket && this.initializeSocket()\r\n        this.props.muteMusic(true)\r\n        document.addEventListener(\r\n            'keydown',\r\n            e => {\r\n                this.ctrlPressHandler(e, true)\r\n            },\r\n            false\r\n        )\r\n        document.addEventListener(\r\n            'keyup',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\r\n            'keydown',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n        document.removeEventListener(\r\n            'keyup',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n    }\r\n\r\n    onMove = () => {\r\n        if (this.state.keyMove !== null || this.state.cardMoves.length > 0) {\r\n            if (this.props.isMove && this.state.allowMove) {\r\n                this.playSound(flipSound3)\r\n\r\n                let { keyMove, cardMoves } = this.state\r\n                cardMoves.forEach(e => {\r\n                    if (e.discarded === false) {\r\n                        if (e.card === CardsData.DEFINITION_CARD.id) {\r\n                            let { definitions } = this.props.game.word\r\n                            let randomIndex = Math.floor(\r\n                                Math.random() * definitions.length\r\n                            )\r\n                            this.setState({\r\n                                wordDefinition: definitions[randomIndex]\r\n                            })\r\n                        } else if (e.card === CardsData.LOOK_UP_CARD.id) {\r\n                            let enemySocket = this.props.game.playerSockets.filter(\r\n                                x => {\r\n                                    return (\r\n                                        x.socketId !==\r\n                                        this.props.player.socketId\r\n                                    )\r\n                                }\r\n                            )[0].socketId\r\n                            let enemyCards = this.props.game.cards[enemySocket]\r\n                            let randomIndexOfCard = Math.floor(\r\n                                Math.random() * enemyCards.length\r\n                            )\r\n                            let randomEnemyCard =\r\n                                enemyCards[randomIndexOfCard].id\r\n                            let { description } = CardsData[randomEnemyCard]\r\n                            this.setState({\r\n                                isPeekModal: true,\r\n                                peekCardId: enemyCards[randomIndexOfCard].id,\r\n                                peekDescription: description\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n\r\n                const { socket } = this.props\r\n                let moves = []\r\n                if (keyMove !== null) moves.push(keyMove)\r\n                if (cardMoves !== []) moves = [...moves, ...cardMoves]\r\n\r\n                this.setState({\r\n                    keyMove: null,\r\n                    cardMoves: []\r\n                })\r\n                socket.emit(GAME_MOVE, { game: this.state.game, moves })\r\n            }\r\n        } else {\r\n            this.setState({\r\n                isMoveModal: true\r\n            })\r\n        }\r\n    }\r\n\r\n    onMoveTimeout = () => {\r\n        this.setState(\r\n            {\r\n                keyMove: {\r\n                    type: 'key',\r\n                    key: '',\r\n                    playerSocketId: this.props.player.socketId\r\n                },\r\n                cardMoves: []\r\n            },\r\n            () => {\r\n                this.onMove()\r\n            }\r\n        )\r\n    }\r\n\r\n    onUseAbort = index => {\r\n        let { cardMoves } = this.state\r\n        cardMoves = cardMoves.filter(card => {\r\n            return card.index !== index\r\n        })\r\n        this.playSound(flipSound2)\r\n        this.setState({ cardMoves })\r\n    }\r\n\r\n    playSound = src => {\r\n        this.setState({ soundSrc: src })\r\n    }\r\n\r\n    onKeyMove = move => {\r\n        if (this.props.isMove) {\r\n            this.playSound(buttonClick)\r\n            this.setState({ keyMove: move })\r\n        }\r\n    }\r\n\r\n    clearKeyMove = () => {\r\n        this.setState({\r\n            keyMove: null,\r\n            clickedIndex: null\r\n        })\r\n    }\r\n\r\n    onCardUse = data => {\r\n        if (this.props.isMove) {\r\n            let move = {\r\n                index: data.index,\r\n                type: 'card',\r\n                card: data.cardId,\r\n                playerSocketId: this.props.player.socketId,\r\n                discarded: false\r\n            }\r\n\r\n            let isDuplicate = this.state.cardMoves.some(\r\n                cardMove => cardMove.index === data.index\r\n            )\r\n            if (isDuplicate === false) {\r\n                setTimeout(() => {\r\n                    this.playSound(flipSound1)\r\n                }, 100)\r\n                this.setState({ cardMoves: [...this.state.cardMoves, move] })\r\n            }\r\n        }\r\n    }\r\n\r\n    onDiscard = (index, cardId) => {\r\n        let playerSocketId = this.props.player.socketId\r\n\r\n        let newMove = {\r\n            index,\r\n            type: 'card',\r\n            card: cardId,\r\n            playerSocketId,\r\n            discarded: true\r\n        }\r\n        let { cardMoves } = this.state\r\n        cardMoves = cardMoves.filter(move => {\r\n            return move.index + cardMoves.length !== index\r\n        })\r\n        cardMoves.push(newMove)\r\n        this.setState({ cardMoves })\r\n\r\n        let game = this.state.game\r\n        game.cards[playerSocketId] = game.cards[playerSocketId].filter(\r\n            (e, i) => {\r\n                return i !== index\r\n            }\r\n        )\r\n        setTimeout(() => {\r\n            this.playSound(discardSound)\r\n        }, 100)\r\n        this.setState({ game })\r\n    }\r\n\r\n    render() {\r\n        let cards = { my: null, enemy: null }\r\n        if (this.state.game !== null) {\r\n            let gameCards = this.state.game.cards\r\n            let mySocketId = this.props.player.socketId\r\n            cards.my = gameCards[mySocketId]\r\n            let enemySocketId = this.state.game.playerSockets.filter(x => {\r\n                return x.socketId !== this.props.player.socketId\r\n            })[0].socketId\r\n            cards.enemy = gameCards[enemySocketId]\r\n        }\r\n        return (\r\n            <div className='gameWrapper'>\r\n                {this.state.wordDefinition && (\r\n                    <GenericModal\r\n                        title='Word definition:'\r\n                        content={this.state.wordDefinition}\r\n                        onClose={() => this.setState({ wordDefinition: null })}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                    />\r\n                )}\r\n                {this.state.isMoveModal && (\r\n                    <GenericModal\r\n                        title='Cannot continue!'\r\n                        content='You have to make a a move.'\r\n                        onClose={() => this.setState({ isMoveModal: false })}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                    />\r\n                )}\r\n                {this.state.isPeekModal && (\r\n                    <CardModal\r\n                        cardId={this.state.peekCardId}\r\n                        description={this.state.peekDescription}\r\n                        onClose={() => this.setState({ isPeekModal: false })}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                    />\r\n                )}\r\n                {this.state.guessedWordModal && (\r\n                    <GenericModal\r\n                        title='Guessed word:'\r\n                        content={this.state.guessedWordModal}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                        onClose={() => {\r\n                            this.setState({ guessedWordModal: null })\r\n                        }}\r\n                    />\r\n                )}\r\n                {this.state.isTieModal && (\r\n                    <GenericModal\r\n                        title='TIE.'\r\n                        content='Turn is tied. None of the players won.'\r\n                        volumeSettings={this.props.volumeSettings}\r\n                        onClose={() => {\r\n                            this.setState({ isTieModal: null })\r\n                        }}\r\n                    />\r\n                )}\r\n                {this.state.gameEndWinnerModal && (\r\n                    <GenericModal\r\n                        title='GAME ENDED.'\r\n                        content={`Player ${\r\n                            this.state.gameEndWinnerModal\r\n                        } has won the game.`}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                        onClose={() => {\r\n                            this.setState({ gameEndWinnerModal: null })\r\n                            this.props.history.push('/browser')\r\n                            this.setState({ game: null })\r\n                        }}\r\n                    />\r\n                )}\r\n                <ReactAudioPlayer\r\n                    volume={this.props.volumeSettings.soundVol}\r\n                    src={this.state.soundSrc}\r\n                    autoPlay\r\n                    onEnded={() => {\r\n                        this.setState({ soundSrc: '' })\r\n                    }}\r\n                />\r\n                <Cards\r\n                    cards={cards.my}\r\n                    areMyCards={true}\r\n                    onCardUse={this.onCardUse}\r\n                    onDiscard={this.onDiscard}\r\n                    onUseAbort={this.onUseAbort}\r\n                    isDiscardEnabled={this.state.isDiscardEnabled}\r\n                    isMove={this.props.isMove}\r\n                    game={this.state.game}\r\n                    player={this.props.player}\r\n                    cardMoves={this.state.cardMoves}\r\n                />\r\n                <Content\r\n                    player={this.props.player}\r\n                    onMoveTimeout={this.onMoveTimeout}\r\n                    isMove={this.props.isMove}\r\n                    game={this.state.game}\r\n                    keyMove={this.state.keyMove}\r\n                    onKeyMove={this.onKeyMove}\r\n                    onEndTurn={this.onMove}\r\n                />\r\n                <Cards\r\n                    cards={cards.enemy}\r\n                    areMyCards={false}\r\n                    isMove={this.props.isMove}\r\n                    game={this.state.game}\r\n                    player={this.props.player}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nGame.propTypes = {\r\n    game: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    player: PropTypes.object,\r\n    history: PropTypes.object.isRequired,\r\n    isMove: PropTypes.bool.isRequired,\r\n    muteMusic: PropTypes.func.isRequired,\r\n    setMove: PropTypes.func.isRequired,\r\n    setTitle: PropTypes.func.isRequired,\r\n    volumeSettings: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withRouter(Game)\r\n","import React, { Component } from 'react'\r\nimport './PlayersBrowser.css'\r\nimport GenericModal from '../../Components/Modals/GenericModal'\r\n\r\nclass BrowserEntry extends Component {\r\n    state = {\r\n        isButtonDisabled: false,\r\n        isTimeoutModal: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true\r\n        this.setState({ isButtonDisabled: false })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.isButtonDisabled === true) {\r\n            setTimeout(() => {\r\n                if (this._isMounted === true) {\r\n                    this.setState({ isButtonDisabled: false })\r\n                }\r\n            }, 5000)\r\n        }\r\n    }\r\n\r\n    clickHandler = event => {\r\n        event.preventDefault()\r\n        if (this.state.isButtonDisabled === true) {\r\n            this.setState({ isTimeoutModal: true })\r\n        } else {\r\n            this.setState({\r\n                isButtonDisabled: true\r\n            })\r\n\r\n            this.props.invitationHandler({\r\n                id: this.props.id,\r\n                socketId: this.props.socketId\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { isTimeoutModal } = this.state\r\n        let { nickname, volumeSettings } = this.props\r\n        return (\r\n            <React.Fragment>\r\n                {isTimeoutModal && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='You are inviting too fast. Wait 5 seconds.'\r\n                        soundVolume={volumeSettings.soundVol}\r\n                        onClose={() => {\r\n                            this.setState({ isTimeoutModal: false })\r\n                        }}\r\n                    />\r\n                )}\r\n                <div className='browser-entry width-full'>\r\n                    <span className='player-info'>\r\n                        <span className='nickname'>{nickname}</span>\r\n                    </span>\r\n                    <button\r\n                        onClick={e => {\r\n                            this.clickHandler(e)\r\n                        }}\r\n                        className='play border-neon border-neon-lime'\r\n                    >\r\n                        Play\r\n                    </button>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BrowserEntry\r\n","import BrowserEntry from './BrowserEntry'\r\nimport React from 'react'\r\n\r\nexport const extractBrowserPlayers = ({\r\n    player,\r\n    connectedPlayers,\r\n    invitationHandler,\r\n    volumeSettings\r\n}) => {\r\n    connectedPlayers = Object.assign({}, connectedPlayers)\r\n\r\n    //* don't display the current player\r\n    if (player) {\r\n        delete connectedPlayers[player.nickname]\r\n    }\r\n\r\n    let result = []\r\n    Object.values(connectedPlayers).forEach(player => {\r\n        let { isInGame } = player\r\n        if (isInGame === false) {\r\n            result.push(\r\n                <BrowserEntry\r\n                    id={player.id}\r\n                    socketId={player.socketId}\r\n                    invitationHandler={invitationHandler}\r\n                    nickname={player.nickname}\r\n                    volumeSettings={volumeSettings}\r\n                    key={player.id}\r\n                    index={Object.values(connectedPlayers).indexOf(player)}\r\n                />\r\n            )\r\n        }\r\n    })\r\n    return result\r\n}\r\n","import React from 'react'\r\nimport './PlayersBrowser.css'\r\nimport Scrollbar from 'react-scrollbars-custom'\r\nimport { extractBrowserPlayers } from './Functions'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PlayersBrowser extends React.Component {\r\n    state = {\r\n        connectedPlayers: this.props.connectedPlayers,\r\n        playersInBrowser: extractBrowserPlayers({\r\n            player: this.props.player,\r\n            connectedPlayers: this.props.connectedPlayers,\r\n            invitationHandler: this.props.invitationHandler,\r\n            volumeSettings: this.props.volumeSettings\r\n        }),\r\n        searchedPlayer: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Players browser' })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.connectedPlayers !== props.connectedPlayers) {\r\n            return {\r\n                playersInBrowser: extractBrowserPlayers({\r\n                    player: props.player,\r\n                    connectedPlayers: props.connectedPlayers,\r\n                    invitationHandler: props.invitationHandler,\r\n                    volumeSettings: props.volumeSettings\r\n                }),\r\n                connectedPlayers: props.connectedPlayers\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    searchPlayer = e => {\r\n        let input = e.target.value\r\n        if (input === '') {\r\n            this.setState({ searchedPlayer: null })\r\n        } else {\r\n            let players = Object.keys(this.props.connectedPlayers)\r\n            players = players.filter(\r\n                item => item !== this.props.player.nickname\r\n            )\r\n            for (let i = 0; i < players.length; i++) {\r\n                if (players[i].toLowerCase().includes(input.toLowerCase())) {\r\n                    this.setState({\r\n                        searchedPlayer: this.props.connectedPlayers[players[i]]\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    SearchedPlayer = () => {\r\n        return extractBrowserPlayers({\r\n            player: this.props.player,\r\n            connectedPlayers: [this.state.searchedPlayer],\r\n            invitationHandler: this.props.invitationHandler,\r\n            volumeSettings: this.props.volumeSettings\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { player } = this.props\r\n        let { searchedPlayer, playersInBrowser } = this.state\r\n        return (\r\n            <div className='players-browser container content-vcenter border-neon border-neon-orange'>\r\n                <div className='players-browser-title bg-lightgrey width-full text-xlg text-center'>\r\n                    <p>\r\n                        {player && (\r\n                            <span>\r\n                                You are logged in as <b>{player.nickname}</b>.\r\n                            </span>\r\n                        )}\r\n                    </p>\r\n                </div>\r\n                <div className='search-player'>\r\n                    <input\r\n                        placeholder='Search player'\r\n                        onChange={this.searchPlayer}\r\n                        className='border-neon border-neon-blue'\r\n                    />\r\n                </div>\r\n                <Scrollbar style={{ width: '100%', height: '100%' }}>\r\n                    {!searchedPlayer ? (\r\n                        playersInBrowser.map(entry => {\r\n                            return entry\r\n                        })\r\n                    ) : (\r\n                        <this.SearchedPlayer />\r\n                    )}\r\n                </Scrollbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPlayersBrowser.propTypes = {\r\n    connectedPlayers: PropTypes.object.isRequired,\r\n    invitationHandler: PropTypes.func.isRequired,\r\n    player: PropTypes.object,\r\n    playersInBrowser: PropTypes.array,\r\n    setTitle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default PlayersBrowser\r\n","import React, { Component } from 'react'\r\nimport './LoginPage.css'\r\nimport GenericModal from '../Modals/GenericModal'\r\nimport { VERIFY_USER } from '../../Shared/Events'\r\n\r\nclass LoginPage extends Component {\r\n    inputRef = React.createRef()\r\n    state = {\r\n        isNameLengthOpen: false,\r\n        isNameSpaceOpen: false,\r\n        isNameTakenOpen: false,\r\n        isAlreadyLoggedInOpen: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Login page' })\r\n    }\r\n\r\n    loginHandler = () => {\r\n        let { value } = this.inputRef.current\r\n        const { socket } = this.props\r\n        if (value.length <= 1) {\r\n            this.setState({ isNameLengthOpen: true })\r\n            return\r\n        } else if (value.includes(' ')) {\r\n            this.setState({ isNameSpaceOpen: true })\r\n            return\r\n        }\r\n        socket.emit(VERIFY_USER, value, ({ player, isTaken, isIpFree }) => {\r\n            if (!isIpFree) {\r\n                this.setState({ isAlreadyLoggedInOpen: true })\r\n            } else if (isTaken) {\r\n                this.setState({ isNameTakenOpen: true })\r\n            } else {\r\n                this.props.loginPlayer(player)\r\n            }\r\n        })\r\n    }\r\n\r\n    submitOnEnter = key => {\r\n        if (key.which === 13) {\r\n            this.loginHandler()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { volumeSettings } = this.props\r\n        return (\r\n            <div className='login-page-content'>\r\n                {this.state.isNameLengthOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='Your nickname has to be longer.'\r\n                        onClose={() => {\r\n                            this.setState({ isNameLengthOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {this.state.isNameSpaceOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='Your nickname cannot have spaces.'\r\n                        onClose={() => {\r\n                            this.setState({ isNameSpaceOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {this.state.isNameTakenOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='This nickname is taken.'\r\n                        onClose={() => {\r\n                            this.setState({ isNameTakenOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {this.state.isAlreadyLoggedInOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='You are already logged in.'\r\n                        onClose={() => {\r\n                            this.setState({ isAlreadyLoggedInOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n\r\n                <div className='infoNickname border-neon border-neon-violet'>\r\n                    <p>Please enter your nickname</p>\r\n                </div>\r\n                <div className='nickname-input'>\r\n                    <input\r\n                        ref={this.inputRef}\r\n                        type='text'\r\n                        maxLength='15'\r\n                        className='inputNickname border-neon border-neon-red'\r\n                        onKeyDown={this.submitOnEnter}\r\n                        placeholder='Your nickname...'\r\n                    />\r\n                    <button\r\n                        className='button-pointer border-neon border-neon-orange'\r\n                        onClick={this.loginHandler}\r\n                    >\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginPage\r\n","import React, { Component } from 'react'\r\nimport { WALKTHROUGH_READY } from '../../Shared/Events'\r\nimport './Walkthrough.css'\r\n\r\nconst Description = () => {\r\n    return (\r\n        <div className='walkthrough-desc'>\r\n            <ul>\r\n                <li>\r\n                    <span>\r\n                        During a turn you can use cards and guess one letter.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>To use a card just click it.</span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Game ends after you or your opponent win two rounds.\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Walkthrough extends Component {\r\n    state = { isClicked: false }\r\n\r\n    onReady = () => {\r\n        const { socket } = this.props\r\n        if (!this.state.isClicked) {\r\n            socket.emit(WALKTHROUGH_READY, { gameId: this.props.gameId })\r\n        }\r\n\r\n        this.setState({ isClicked: true })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Walkthrough' })\r\n    }\r\n\r\n    render() {\r\n        let buttonClass = this.state.isClicked\r\n            ? 'ok-btn-pressed ok-btn border-neon border-neon-orange'\r\n            : 'ok-btn border-neon border-neon-orange'\r\n        let content = this.state.isClicked ? 'Waiting for opponent...' : 'READY'\r\n        return (\r\n            <div className='gameWrapper'>\r\n                <div className='walkthrough'>\r\n                    <div className='walkthrough-content'>\r\n                        <img\r\n                            className='walkthrough-image'\r\n                            src='images/walkthrough/Walkthrough.svg'\r\n                            alt='Walkthrough screenshot'\r\n                        />\r\n                        <Description />\r\n                        <div className='ok-btn-wrapper'>\r\n                            <button\r\n                                className={buttonClass}\r\n                                onClick={this.onReady}\r\n                            >\r\n                                {content}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Walkthrough\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Timer from '../Game/Timer'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst InvitationModal = props => {\r\n    let { nickname, onAccept, onClose, soundVolume } = props\r\n\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito bg-khaki'>\r\n                <div className='generic-popup-title'>\r\n                    <span>New game invitation!</span>\r\n                </div>\r\n                <div className='invitation-popup-content'>\r\n                    <div className='msg'>{`You have been invited by ${nickname}.`}</div>\r\n                    <Timer time={10} onEnd={onClose} />\r\n                    <div className='popup-buttons'>\r\n                        <button\r\n                            className='border-neon border-neon-lime'\r\n                            onClick={onAccept}\r\n                        >\r\n                            <span>Accept</span>\r\n                        </button>\r\n                        <button\r\n                            className='border-neon border-neon-orange'\r\n                            onClick={onClose}\r\n                        >\r\n                            <span>Decline</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default InvitationModal\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst DisconnectedPopup = props => {\r\n    let { soundVolume } = props\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n                <div className='disconnected-popup-content'>\r\n                    <div className='msg'>\r\n                        You have been disconnected from the server.\r\n                    </div>\r\n                    <div className='spinner-wrapper'>\r\n                        <span className='fa fa-spinner fa-spin fa-3x' />\r\n                    </div>\r\n                    <div className='msg'>Trying to reconnect...</div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default DisconnectedPopup\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\nimport Header from './Components/Header/Header'\r\nimport Game from './Components/Game/Game'\r\nimport PlayersBrowser from './Components/PlayersBrowser/PlayersBrowser'\r\nimport LoginPage from './Components/LoginPage/LoginPage'\r\n\r\nimport io from 'socket.io-client'\r\nimport {\r\n    PLAYER_CONNECTED,\r\n    LOGOUT,\r\n    PLAYER_DISCONNECTED,\r\n    INVITATION,\r\n    GAME_STARTED,\r\n    REFRESH_PLAYERS,\r\n    INVITATION_ACCEPTED,\r\n    GAME_CREATED\r\n} from './Shared/Events'\r\nimport { isMove } from './Shared/Functions'\r\n\r\nimport { Route, withRouter, Switch } from 'react-router-dom'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport bgMusic from './Resources/Sounds/bg-lower.mp3'\r\nimport Walkthrough from './Components/Game/Walkthrough'\r\n\r\nimport InvitationModal from './Components/Modals/InvitationModal'\r\nimport DisconnectedModal from './Components/Modals/DisconnectedModal'\r\n\r\nconst socketUrl =\r\n    process.env.REACT_APP_STAGE.trim() === 'dev'\r\n        ? 'localhost:3231'\r\n        : 'ws://cardman-multiplayer.herokuapp.com:80'\r\nconst { setScore } = require('./Shared/Functions')\r\n\r\nclass Logo extends React.Component {\r\n    state = { display: true }\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({ display: false })\r\n        }, 2500)\r\n    }\r\n    render() {\r\n        if (this.state.display) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className='intro-logo'>\r\n                        <div className='text-nunito intro-1'>Cardman&nbsp;</div>\r\n                        <div className='text-nunito intro-2'>Multiplayer</div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return null\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.popupsRef = React.createRef()\r\n        this.state = {\r\n            title: 'Cardman Multiplayer',\r\n            score: null,\r\n            player: null,\r\n            socket: null,\r\n            connectedPlayers: {},\r\n            game: null,\r\n            isMove: false,\r\n            volumeSettings: {\r\n                musicVol: 0.5,\r\n                soundVol: 0.5,\r\n                muted: false\r\n            },\r\n            isDisconnected: false,\r\n            gameId: null,\r\n            isInvitationModal: false,\r\n            invitationNickname: null,\r\n            onInvitationAccept: null\r\n        }\r\n    }\r\n\r\n    config = {\r\n        disconnectedTimeoutMs: 5000,\r\n        defaultVolumeSettings: {\r\n            musicVol: 0.5,\r\n            soundVol: 0.5\r\n        }\r\n    }\r\n\r\n    isInCache = key => {\r\n        return (\r\n            localStorage.getItem(key) !== null &&\r\n            localStorage.getItem(key) !== undefined\r\n        )\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.location.pathname !== '/') {\r\n            if (this.state.player === null) {\r\n                this.props.history.push('/')\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.isInCache('cachedVolumeSettings')) {\r\n            let cachedVolumeSettings = JSON.parse(\r\n                localStorage.getItem('cachedVolumeSettings')\r\n            )\r\n            this.setState({\r\n                volumeSettings: {\r\n                    musicVol: cachedVolumeSettings.musicVol,\r\n                    soundVol: cachedVolumeSettings.soundVol\r\n                }\r\n            })\r\n        } else {\r\n            let cachedVolumeSettings = {\r\n                musicVol: this.config.defaultVolumeSettings.musicVol,\r\n                soundVol: this.config.defaultVolumeSettings.soundVol\r\n            }\r\n            localStorage.setItem(\r\n                'cachedVolumeSettings',\r\n                JSON.stringify(cachedVolumeSettings)\r\n            )\r\n        }\r\n\r\n        this.initializeSocket()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.logoutPlayer()\r\n    }\r\n\r\n    invitationHandler = ({ id = null, socketId = null }) => {\r\n        //Prevent players from inviting themselves\r\n        if (id === this.state.player.id) {\r\n            this.addPopup({\r\n                title: 'Error!',\r\n                content: 'You cannot invite yourself.'\r\n            })\r\n        } else {\r\n            const { socket } = this.state\r\n            socket.emit(INVITATION, { id, socketId })\r\n        }\r\n    }\r\n\r\n    initializeSocket = () => {\r\n        const socket = io(socketUrl)\r\n        this.setState({ socket })\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected to server.')\r\n        })\r\n\r\n        socket.on('pong', ms => {\r\n            if (ms > this.config.disconnectedTimeoutMs) {\r\n                this.setState({ isDisconnected: true })\r\n            } else {\r\n                this.setState({ isDisconnected: false })\r\n            }\r\n        })\r\n\r\n        let refreshingPlayersSockets = [\r\n            PLAYER_CONNECTED,\r\n            PLAYER_DISCONNECTED,\r\n            REFRESH_PLAYERS\r\n        ]\r\n\r\n        refreshingPlayersSockets.forEach(s => {\r\n            socket.on(s, ({ connectedPlayers }) => {\r\n                this.setState({ connectedPlayers })\r\n            })\r\n        })\r\n\r\n        socket.on(INVITATION, ({ nickname, socketId }) => {\r\n            const { socket } = this.state\r\n            this.setState({\r\n                isInvitationModal: true,\r\n                invitationNickname: nickname,\r\n                onInvitationAccept: () => {\r\n                    this.setState({ isInvitationModal: false }, () => {\r\n                        socket.emit(INVITATION_ACCEPTED, {\r\n                            fromSocketId: socketId,\r\n                            to: this.state.player\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n        })\r\n\r\n        socket.on(GAME_CREATED, ({ gameId }) => {\r\n            this.setState({ gameId }, () => {\r\n                this.props.history.push('/walkthrough')\r\n            })\r\n        })\r\n\r\n        socket.on(GAME_STARTED, ({ game }) => {\r\n            this.setGame({ game })\r\n            this.setMove(isMove({ game, player: this.state.player }))\r\n            setScore({\r\n                player: this.state.player,\r\n                game,\r\n                setTitle: this.setTitle\r\n            })\r\n        })\r\n    }\r\n\r\n    loginPlayer = player => {\r\n        const { socket } = this.state\r\n        //Sending login socket with freshly generated, previosly verified player\r\n        socket.emit(PLAYER_CONNECTED, player)\r\n        this.setState({ player })\r\n\r\n        //Wait for server response, then get the player list\r\n        socket.on(PLAYER_CONNECTED, ({ connectedPlayers }) => {\r\n            this.setState({ connectedPlayers })\r\n            this.props.history.push('/browser')\r\n        })\r\n    }\r\n\r\n    logoutPlayer = () => {\r\n        //Sending logout socket and setting user to player, thus hiding all the functionalities\r\n        const { socket } = this.state\r\n        socket.emit(LOGOUT)\r\n        this.setState({ player: null })\r\n    }\r\n\r\n    setTitle = ({ title = null, score = null }) => {\r\n        this.setState({ title: title })\r\n        this.setState({ score: score })\r\n    }\r\n\r\n    setGame = ({ game }) => {\r\n        this.setState({ game }, this.props.history.push('/game'))\r\n    }\r\n\r\n    setMove = isMove => {\r\n        this.setState({ isMove })\r\n    }\r\n\r\n    setSettings = ({ soundVol, musicVol }) => {\r\n        if (this.props.location.pathname === '/game') {\r\n            musicVol = 0\r\n        }\r\n        this.setState({\r\n            volumeSettings: { soundVol: soundVol, musicVol: musicVol }\r\n        })\r\n        let cachedVolumeSettings = { musicVol: musicVol, soundVol: soundVol }\r\n        localStorage.setItem(\r\n            'cachedVolumeSettings',\r\n            JSON.stringify(cachedVolumeSettings)\r\n        )\r\n    }\r\n\r\n    muteMusic = state => {\r\n        this.setState({\r\n            volumeSettings: { ...this.state.volumeSettings, muted: state }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            socket,\r\n            player,\r\n            game,\r\n            gameId,\r\n            isMove,\r\n            connectedPlayers\r\n        } = this.state\r\n        const {\r\n            volumeSettings,\r\n            isInvitationModal,\r\n            invitationNickname,\r\n            onInvitationAccept,\r\n            title,\r\n            score,\r\n            isDisconnected\r\n        } = this.state\r\n        return (\r\n            <div className='container of-rows width-full height-full text-nunito '>\r\n                {isInvitationModal && (\r\n                    <InvitationModal\r\n                        nickname={invitationNickname}\r\n                        onAccept={onInvitationAccept}\r\n                        onClose={() =>\r\n                            this.setState({ isInvitationModal: false })\r\n                        }\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {isDisconnected && (\r\n                    <DisconnectedModal soundVolume={volumeSettings.soundVol} />\r\n                )}\r\n                <Logo />\r\n                <Header\r\n                    volumeSettings={volumeSettings}\r\n                    title={title}\r\n                    score={score}\r\n                    setSettings={this.setSettings}\r\n                />\r\n                <ReactAudioPlayer\r\n                    src={bgMusic}\r\n                    autoPlay\r\n                    volume={volumeSettings.musicVol}\r\n                    loop={true}\r\n                    muted={volumeSettings.muted}\r\n                />\r\n                <div className='row height-full width-full bg-lightgrey'>\r\n                    <Switch>\r\n                        <Route exact path='/'>\r\n                            <LoginPage\r\n                                socket={socket}\r\n                                loginPlayer={this.loginPlayer}\r\n                                setTitle={this.setTitle}\r\n                                volumeSettings={this.state.volumeSettings}\r\n                            />\r\n                        </Route>\r\n                        <Route\r\n                            path='/browser'\r\n                            render={() => (\r\n                                <PlayersBrowser\r\n                                    player={player}\r\n                                    setTitle={this.setTitle}\r\n                                    invitationHandler={this.invitationHandler}\r\n                                    connectedPlayers={connectedPlayers}\r\n                                    volumeSettings={volumeSettings}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            path='/walkthrough'\r\n                            render={() => (\r\n                                <Walkthrough\r\n                                    player={player}\r\n                                    setTitle={this.setTitle}\r\n                                    gameId={gameId}\r\n                                    muteMusic={this.muteMusic}\r\n                                    socket={socket}\r\n                                    soundVolume={volumeSettings.soundVol}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            path='/game'\r\n                            render={() => (\r\n                                <Game\r\n                                    player={player}\r\n                                    game={game}\r\n                                    muteMusic={this.muteMusic}\r\n                                    socket={socket}\r\n                                    setTitle={this.setTitle}\r\n                                    setMove={this.setMove}\r\n                                    isMove={isMove}\r\n                                    volumeSettings={volumeSettings}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(App)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n","module.exports = __webpack_public_path__ + \"static/media/popup.6f214bea.mp3\";","const isMove = ({ game, player }) => {\r\n    let nextPlayerIndex = game.nextPlayerIndex\r\n    return game.playerSockets[nextPlayerIndex].id === player.id\r\n}\r\n\r\nconst setScore = ({ player, game = null, setTitle }) => {\r\n    let me = game.playerSockets.filter(p => {\r\n        return p.socketId === player.socketId\r\n    })[0]\r\n\r\n    let enemy = game.playerSockets.filter(p => {\r\n        return p.socketId !== player.socketId\r\n    })[0]\r\n\r\n    let score = game.score\r\n\r\n    setTitle({\r\n        score: {\r\n            me: me.nickname,\r\n            myScore: score[me.socketId],\r\n            enemy: enemy.nickname,\r\n            enemyScore: score[enemy.socketId]\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = { isMove, setScore }\r\n","const Cards = {\r\n    DEFINITION_CARD: {\r\n        id: 'DEFINITION_CARD',\r\n        title: 'Definition card',\r\n        description: 'Shows you a definition of the word.',\r\n        disabledText: 'You can only use one card of this kind during a turn',\r\n        use: ({ currentGame, socket, move }) => {\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player, index }) => {\r\n            let { socketId } = player\r\n            let firstCardIndex = game.cards[socketId].findIndex(card => {\r\n                return card.id === Cards.DEFINITION_CARD.id\r\n            })\r\n            if (index === firstCardIndex) return true\r\n            return false\r\n        }\r\n    },\r\n    RANDOM_CORRECT_LETTER_CARD: {\r\n        id: 'RANDOM_CORRECT_LETTER_CARD',\r\n        title: 'Random correct letter',\r\n        description: 'Chooses a random correct letter.',\r\n        disabledText: '',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let randomCorrectLetter = () => {\r\n                let { word } = currentGame.word\r\n                let { guessed } = currentGame\r\n                let guessedArr = guessed.map(g => g.key.toUpperCase())\r\n                word = word.toUpperCase()\r\n                let arr = Array.from(word).filter(char => {\r\n                    return !guessedArr.includes(char)\r\n                })\r\n                let randomIndex = Math.floor(Math.random() * arr.length)\r\n                return arr[randomIndex].toUpperCase()\r\n            }\r\n\r\n            let key = randomCorrectLetter()\r\n            currentGame.guessed.push({\r\n                key,\r\n                playerSocketId: move.playerSocketId\r\n            })\r\n            let playerSocket =\r\n                currentGame.playerSockets[currentGame.nextPlayerIndex].socketId\r\n            let enemySocket =\r\n                currentGame.playerSockets[1 - currentGame.nextPlayerIndex]\r\n                    .socketId\r\n            currentGame.keys.push({\r\n                key,\r\n                playerSocketId: playerSocket\r\n            })\r\n            currentGame.keys.push({\r\n                key,\r\n                playerSocketId: enemySocket\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game }) => {\r\n            return true\r\n        }\r\n    },\r\n    ADDITIONAL_TURN_CARD: {\r\n        id: 'ADDITIONAL_TURN_CARD',\r\n        title: 'Additional letter',\r\n        description: 'You can choose two letters in a turn.',\r\n        disabledText: 'You can only use one card of this kind during a turn',\r\n        use: ({ currentGame, socket, move }) => {\r\n            currentGame.nextPlayerIndex = 1 - currentGame.nextPlayerIndex\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player, index }) => {\r\n            let { socketId } = player\r\n            let firstCardIndex = game.cards[socketId].findIndex(card => {\r\n                return card.id === Cards.ADDITIONAL_TURN_CARD.id\r\n            })\r\n            if (index === firstCardIndex) return true\r\n            return false\r\n        }\r\n    },\r\n    REMOVE_ONE_UNFITTING_CARD: {\r\n        id: 'REMOVE_ONE_UNFITTING_CARD',\r\n        title: 'Remove one unfitting letter.',\r\n        description: 'Removes one unfitting letter from the current word.',\r\n        disabledText: '',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let { word } = currentGame.word\r\n            let wordKeys = Array.from(word.toUpperCase())\r\n            let myKeys = []\r\n            currentGame.keys.forEach(key => {\r\n                if (key.playerSocketId === socket.user.socketId) {\r\n                    myKeys.push(key.key)\r\n                }\r\n            })\r\n            let candidates = []\r\n            for (let i = 65; i <= 90; i++) {\r\n                let letter = String.fromCharCode(i).toUpperCase()\r\n                if (!wordKeys.includes(letter) && !myKeys.includes(letter)) {\r\n                    candidates.push(letter)\r\n                }\r\n            }\r\n            currentGame.keys.push({\r\n                key: candidates[Math.floor(Math.random() * candidates.length)],\r\n                playerSocketId: socket.user.socketId\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game }) => {\r\n            return true\r\n        }\r\n    },\r\n    REMOVE_TWO_UNFITTING_CARD: {\r\n        id: 'REMOVE_TWO_UNFITTING_CARD',\r\n        title: 'Remove two unfitting letters.',\r\n        description: 'Removes two unfitting letters from the current word.',\r\n        disabledText: '',\r\n        use: ({ currentGame, socket, move }) => {\r\n            currentGame = Cards.REMOVE_ONE_UNFITTING_CARD.use({\r\n                currentGame,\r\n                socket,\r\n                move\r\n            })\r\n            currentGame = Cards.REMOVE_ONE_UNFITTING_CARD.use({\r\n                currentGame,\r\n                socket,\r\n                move\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game }) => {\r\n            return true\r\n        }\r\n    },\r\n    BLOCK_CARD: {\r\n        id: 'BLOCK_CARD',\r\n        title: 'Block enemy cards for 2 turns.',\r\n        description: 'Blocks enemy cards for 2 turns.',\r\n        disabledText: 'You cannot block an already blocked player',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n            if (currentGame.blockCounters[enemySocket] === 0)\r\n                currentGame.blockCounters[enemySocket] = 2\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player }) => {\r\n            let enemySocket = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            if (game.blockCounters[enemySocket] === 0) return true\r\n            return false\r\n        }\r\n    },\r\n    IMMUNE_TO_BLOCK_CARD: {\r\n        id: 'IMMUNE_TO_BLOCK_CARD',\r\n        title: 'Immune to block.',\r\n        description: 'Immune to blocking cards for 2 turns',\r\n        disabledText: 'You can only use one card of this kind during a turn',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let mySocket = move.playerSocketId\r\n            let blockCounters = currentGame.blockCounters[mySocket]\r\n            currentGame.blockCounters[mySocket] = blockCounters - 2\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game }) => {\r\n            return true\r\n        }\r\n    },\r\n    LOOK_UP_CARD: {\r\n        id: 'LOOK_UP_CARD',\r\n        title: 'Look up enemy card',\r\n        description: 'You can look up one of the enemies cards',\r\n        disabledText: 'You cannot use it when enemy does not have cards',\r\n        use: ({ currentGame, socket, move }) => {\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player }) => {\r\n            let enemySocket = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            if (game.cards[enemySocket].length === 0) return false\r\n            return true\r\n        }\r\n    },\r\n    SWAP_RANDOM_CARDS: {\r\n        id: 'SWAP_RANDOM_CARDS',\r\n        title: 'Swap with opponent.',\r\n        description: 'Swap your card for a random opponents card.',\r\n        disabledText:\r\n            'You must have a card besides this one in the deck. Your opponent has to have at least 1 card.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocketId = getEnemySocketId(\r\n                currentGame,\r\n                move.playerSocketId\r\n            )\r\n            let myCards = currentGame.cards[move.playerSocketId]\r\n            let enemyCards = currentGame.cards[enemySocketId]\r\n\r\n            let myRandomIndex = Math.floor(Math.random() * myCards.length)\r\n            let enemyRandomIndex = Math.floor(Math.random() * enemyCards.length)\r\n\r\n            let randomMyCard = myCards[myRandomIndex]\r\n            let randomEnemyCard = enemyCards[enemyRandomIndex]\r\n\r\n            currentGame.cards[move.playerSocketId][\r\n                myRandomIndex\r\n            ] = randomEnemyCard\r\n            currentGame.cards[enemySocketId][enemyRandomIndex] = randomMyCard\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player }) => {\r\n            let cards = game.cards\r\n            let mySocketId = player.socketId\r\n            let myCards = cards[mySocketId]\r\n            let enemySocketId = game.playerSockets.filter(x => {\r\n                return x.socketId !== player.socketId\r\n            })[0].socketId\r\n            let enemyCards = cards[enemySocketId]\r\n            if (enemyCards.length === 0) return false\r\n\r\n            let doOtherCardsExist = myCards.some(c => {\r\n                return c.id !== Cards.SWAP_RANDOM_CARDS.id\r\n            })\r\n\r\n            if (doOtherCardsExist === false) return false\r\n            return true\r\n        }\r\n    },\r\n    RANDOMIZE_YOURSELF_CARD: {\r\n        id: 'RANDOMIZE_YOURSELF_CARD',\r\n        title: 'Randomize a card',\r\n        description: 'A random card of yours gets changed.',\r\n        disabledText: '',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let getRandomCard = (exception = null) => {\r\n                let excluded = ['RANDOMIZE_YOURSELF_CARD', exception]\r\n                let included = Object.values(Cards).filter(\r\n                    card => !excluded.includes(card.id)\r\n                )\r\n                let randomIndex = Math.floor(Math.random() * included.length)\r\n                return included[randomIndex]\r\n            }\r\n            currentGame.cards[move.playerSocketId].push(getRandomCard())\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game }) => {\r\n            return true\r\n        }\r\n    },\r\n    RANDOMIZE_ENEMY_CARD: {\r\n        id: 'RANDOMIZE_ENEMY_CARD',\r\n        title: 'Randomize an enemies card',\r\n        description: 'A random card of your opponent gets changed.',\r\n        disabledText: 'You cannot use it when enemy does not have cards',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n\r\n            let getRandomCard = (exception = null) => {\r\n                let excluded = ['RANDOMIZE_YOURSELF_CARD', exception]\r\n                let included = Object.values(Cards).filter(\r\n                    card => !excluded.includes(card.id)\r\n                )\r\n                let randomIndex = Math.floor(Math.random() * included.length)\r\n                return included[randomIndex]\r\n            }\r\n            let enemyCardAmount = currentGame.cards[enemySocket].length\r\n            let randomIndex = Math.floor(Math.random() * enemyCardAmount)\r\n            if (enemyCardAmount > 0) {\r\n                currentGame.cards[enemySocket][randomIndex] = getRandomCard()\r\n            }\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player }) => {\r\n            let enemySocketId = game.playerSockets.filter(x => {\r\n                return x.socketId !== player.socketId\r\n            })[0].socketId\r\n\r\n            if (game.cards[enemySocketId].length === 0) {\r\n                return false\r\n            }\r\n            return true\r\n        }\r\n    }\r\n}\r\n\r\nconst getEnemySocketId = (game, playerSocketId) => {\r\n    return game.playerSockets.filter(e => {\r\n        return e.socketId !== playerSocketId\r\n    })[0].socketId\r\n}\r\n\r\nconst getCard = card => {\r\n    return Cards[card]\r\n}\r\n\r\nconst getRandomCard = () => {\r\n    let randomIndex = Math.floor(Math.random() * Object.keys(Cards).length)\r\n    let randomKey = Object.keys(Cards)[randomIndex]\r\n    return Cards[randomKey]\r\n}\r\n\r\nconst generateCards = amount => {\r\n    let result = []\r\n    let isAdditionalTurnGenerated = false\r\n    for (let i = 0; i < amount; i++) {\r\n        let card = getRandomCard()\r\n        if (card.id === Cards.ADDITIONAL_TURN_CARD.id) {\r\n            if (isAdditionalTurnGenerated) {\r\n                i = i - 1\r\n            } else {\r\n                isAdditionalTurnGenerated = true\r\n                result.push(card)\r\n            }\r\n        } else {\r\n            result.push(card)\r\n        }\r\n    }\r\n    return result\r\n}\r\n\r\nconst resupplyCards = game => {\r\n    let { cards } = game\r\n    for (let i = 0; i < Object.keys(cards).length; i++) {\r\n        let player = Object.keys(cards)[i]\r\n        let newCards = cards[player]\r\n        if (newCards.length < 3) {\r\n            newCards.push(getRandomCard())\r\n        }\r\n        cards[player] = newCards\r\n    }\r\n    return cards\r\n}\r\n\r\nmodule.exports = {\r\n    getRandomCard,\r\n    generateCards,\r\n    Cards,\r\n    getCard,\r\n    resupplyCards\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/card_drop.f8713f77.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip.63e37b8e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip2.e1b8fb14.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip3.dff27e09.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button_click.923d6dfa.mp3\";","module.exports = __webpack_public_path__ + \"static/media/turn_end.e1720e84.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bg-lower.b0652969.mp3\";","module.exports = {\r\n    PLAYER_CONNECTED: 'PLAYER_CONNECTED',\r\n    PLAYER_DISCONNECTED: 'PLAYER_DISCONNECTED',\r\n    VERIFY_USER: 'VERIFY_USER',\r\n    LOGOUT: 'LOGOUT',\r\n    INVITATION: 'INVITATION',\r\n    INVITATION_ACCEPTED: 'INVITATION_ACCEPTED',\r\n    GAME_STARTED: 'GAME_STARTED',\r\n    GAME_MOVE: 'GAME_MOVE',\r\n    WIN: 'WIN',\r\n    REFRESH_PLAYERS: 'REFRESH_PLAYERS',\r\n    GAME_CREATED: 'GAME_CREATED',\r\n    WALKTHROUGH_READY: 'WALKTHROUGH_READY'\r\n}\r\n","const roundAndConvertVolume = volume => {\r\n    return Math.round((10 * parseInt(volume)) / 100) / 10\r\n}\r\n\r\nmodule.exports = { roundAndConvertVolume }\r\n","const Result = {\r\n    GAME_TIE: 'GAME_TIE',\r\n    TURN_WIN: 'TURN_WIN',\r\n    TURN_TIE: 'TURN_TIE',\r\n    GAME_WIN: 'GAME_WIN',\r\n    NOTHING: 'NOTHING'\r\n}\r\n\r\nmodule.exports = {\r\n    Result\r\n}\r\n"],"sourceRoot":""}