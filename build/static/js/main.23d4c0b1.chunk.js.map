{"version":3,"sources":["Components/Header/HeaderBar.jsx","Components/Header/Settings.jsx","Components/Header/Header.jsx","Components/Game/Card.jsx","Components/Game/Cards.jsx","Components/Game/Key.jsx","Components/Game/Keyboard.jsx","Components/Game/Timer.jsx","Components/Game/PlayerState.jsx","Components/Modals/GenericModal.jsx","Components/Modals/CardModal.jsx","Components/Game/Content.jsx","Components/Game/Game.jsx","Components/PlayersBrowser/BrowserEntry.jsx","Components/PlayersBrowser/Functions.js","Components/PlayersBrowser/PlayersBrowser.jsx","Components/LoginPage/LoginPage.jsx","Components/Game/Walkthrough.jsx","Components/Modals/InvitationModal.jsx","Components/Modals/DisconnectedModal.jsx","App.jsx","index.js","Resources/Sounds/popup.mp3","Shared/Functions.js","Game/Cards/Cards.js","Resources/Sounds/card_flip.mp3","Resources/Sounds/card_flip2.mp3","Resources/Sounds/card_drop.mp3","Resources/Sounds/card_flip3.mp3","Resources/Sounds/button_click.mp3","Resources/Sounds/bg-lower.mp3","Shared/Events.js","Components/Header/Functions.js","Shared/Enums.js"],"names":["HeaderBar","_ref","_ref$title","title","_ref$score","score","react_default","a","createElement","className","me","concat","myScore","enemyScore","enemy","roundAndConvertVolume","require","Settings","onChange","e","target","id","_this","props","setSettings","soundVol","value","musicVol","volumeSettings","_this2","this","react_icons_kit_default","icon","cog","size","volume_2","type","min","max","note","Component","Header","state","Header_Settings","Header_HeaderBar","location","pathname","Object","objectSpread","withRouter","CardImage","isMine","isUsed","isDisabled","isBlocked","isDiscardEnabled","classes","draggable","onMouseDown","src","alt","style","userDrag","CardDescription","_ref2","description","displayTooltip","dangerouslySetInnerHTML","__html","CardOverlay","_ref3","onClick","onDiscard","Card","cardClasses","Card_CardImage","card","Card_CardOverlay","onUseAbort","index","Card_CardDescription","CardsData","Cards","areMine","getBg","move","animationName","animationDuration","animationIterationCount","animationTimingFunction","animationDirection","animationFillMode","GenerateCard","blockCounter","usedCardIndexes","data","JSON","stringify","cardId","lib","enabled","onDragStart","setState","playSound","flipSound1","setCardTargetHighlight","onDragEnd","flipSound2","Game_Card","CardsSpawner","_this$props","cards","player","game","blockCounters","socketId","map","i","cardData","key","doesMeetConditions","Key","clickHandler","isClicked","moveHandler","letter","playerSocketId","getStyle","backgroundColor","textDecoration","borderWidth","borderStyle","borderColor","Keyboard","clickedIndex","generateKeys","result","_loop","String","fromCharCode","toUpperCase","myKeys","keys","filter","includes","push","Game_Key","setSelectedKey","clearKeyMove","Timer","timeInterval","time","wrapperStyle","circleStyle","animation","propsStyle","setInterval","prevState","clearInterval","onEnd","display","r","cx","cy","Chains","getSide","side","Shield","PlayerState","getIcon","PlayerState_Chains","PlayerState_Shield","getPlayerState","playerSockets","GenericModal","onClose","content","soundVolume","ReactDOM","createPortal","Fragment","bundle_default","volume","popupSound","autoPlay","react_icons_kit","cross","document","body","CardModal","EndTurnButton","text","disabled","Content","keyMove","cardMoves","isWordDefinitionModal","wordDefinition","isMoveModal","isPeekModal","peekCardId","peekDescription","buttonClick","colorDisplayWord","word","guessed","Array","from","forEach","g","color","onDrop","parse","updateUsedCardIndexes","some","cardMove","setTimeout","cardDropSound","toConsumableArray","onMove","onEndTurn","length","moves","_this$state","discarded","0","1","2","flipSound3","DEFINITION_CARD","definitions","randomIndex","Math","floor","random","LOOK_UP_CARD","enemySocket","x","enemyCards","randomIndexOfCard","randomEnemyCard","displayWord","wordClass","isCardTargetHighlight","_this$state2","onMoveTimeout","Modals_GenericModal","Modals_CardModal","Game_PlayerState","Game_Timer","types","Content_EndTurnButton","Game_Keyboard","newCardMoves","parseInt","setScore","isMove","GAME_MOVE","WIN","Result","Game","gameFromProps","allowMove","myCards","cardTargetHighlight","soundSrc","discardMoves","guessedWordModal","isTieModal","gameEndWinnerModal","initializeSocket","socket","on","setMove","winner","setTitle","returnState","TURN_WIN","TURN_TIE","GAME_WIN","nickname","_ref3$moves","allMoves","emit","bool","newIndexes","newGame","mySocketId","val","newDiscardMoves","event","isDown","myBlocked","keyCode","muteMusic","addEventListener","ctrlPressHandler","_this3","removeEventListener","_this4","my","gameCards","enemySocketId","history","onEnded","Components_Game_Cards","Components_Game_Content","addPopup","BrowserEntry","isButtonDisabled","isTimeoutModal","preventDefault","invitationHandler","_isMounted","extractBrowserPlayers","connectedPlayers","assign","values","isInGame","PlayersBrowser_BrowserEntry","indexOf","PlayersBrowser","playersInBrowser","searchedPlayer","searchPlayer","input","players","item","toLowerCase","SearchedPlayer","placeholder","dist_default","width","height","entry","React","LoginPage","inputRef","createRef","isNameLengthOpen","isNameSpaceOpen","isNameTakenOpen","isAlreadyLoggedInOpen","loginHandler","current","VERIFY_USER","isTaken","isIpFree","loginPlayer","submitOnEnter","which","ref","maxLength","onKeyDown","Description","Walkthrough","buttonVisibility","onReady","WALKTHROUGH_READY","gameId","buttonClass","Walkthrough_Description","InvitationModal","onAccept","DisconnectedPopup","socketUrl","Logo","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","config","disconnectedTimeoutMs","defaultVolumeSettings","isInCache","localStorage","getItem","undefined","_ref$id","_ref$socketId","INVITATION","io","console","log","ms","isDisconnected","PLAYER_CONNECTED","PLAYER_DISCONNECTED","REFRESH_PLAYERS","s","isInvitationModal","invitationNickname","onInvitationAccept","INVITATION_ACCEPTED","fromSocketId","to","GAME_CREATED","_ref4","GAME_STARTED","_ref5","setGame","_ref6","logoutPlayer","LOGOUT","_ref7","_ref7$title","_ref7$score","_ref8","_ref9","cachedVolumeSettings","setItem","muted","popupsRef","Modals_InvitationModal","DisconnectedModal","App_Logo","Components_Header_Header","bgMusic","loop","Switch","Route","exact","path","Components_LoginPage_LoginPage","render","Components_PlayersBrowser_PlayersBrowser","Components_Game_Walkthrough","Components_Game_Game","BrowserRouter","src_App_0","getElementById","module","exports","__webpack_require__","p","nextPlayerIndex","_ref2$game","use","currentGame","RANDOM_CORRECT_LETTER_CARD","guessedArr","arr","char","randomCorrectLetter","playerSocket","ADDITIONAL_TURN_CARD","REMOVE_ONE_UNFITTING_CARD","wordKeys","user","candidates","REMOVE_TWO_UNFITTING_CARD","BLOCK_CARD","IMMUNE_TO_BLOCK_CARD","mySocket","SWAP_RANDOM_CARDS","randomIndexOfMine","randomIndexOfOpponent","isSwap","doOtherCardsExist","RANDOMIZE_YOURSELF_CARD","_ref10","excluded","arguments","included","getRandomCard","RANDOMIZE_ENEMY_CARD","_ref11","enemyCardAmount","randomKey","generateCards","amount","isAdditionalTurnGenerated","getCard","resupplyCards","newCards","round","GAME_TIE","NOTHING"],"mappings":"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","file":"static/js/main.23d4c0b1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst HeaderBar = ({ title = null, score = null }) => {\r\n    return (\r\n        <div className='column auto has-background-dark header'>\r\n            {score && (\r\n                <div className='title has-text-white-ter'>\r\n                    <div className='scoreHeader'>\r\n                        <div className='flex-item me'>\r\n                            <span>{score.me}</span>\r\n                        </div>\r\n                        <div className='flex-item score'>\r\n                            <span>{`${score.myScore}:${\r\n                                score.enemyScore\r\n                            }`}</span>\r\n                        </div>\r\n                        <div className='flex-item enemy'>\r\n                            <span>{score.enemy}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {title && <h1 className='title has-text-white-ter'>{title}</h1>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderBar\r\n","import React, { Component } from 'react'\r\nimport Icon from 'react-icons-kit'\r\nimport { volume_2 } from 'react-icons-kit/ikons/volume_2'\r\nimport { note } from 'react-icons-kit/entypo/note'\r\nimport { cog } from 'react-icons-kit/fa/cog'\r\n\r\nconst { roundAndConvertVolume } = require('./Functions')\r\n\r\nclass Settings extends Component {\r\n    onChange = e => {\r\n        if (e.target.id === 'sound-slider-thumb') {\r\n            this.props.setSettings({\r\n                soundVol: roundAndConvertVolume(e.target.value),\r\n                musicVol: this.props.volumeSettings.musicVol\r\n            })\r\n        } else if (e.target.id === 'music-slider-thumb') {\r\n            this.props.setSettings({\r\n                soundVol: this.props.volumeSettings.soundVol,\r\n                musicVol: roundAndConvertVolume(e.target.value)\r\n            })\r\n        }\r\n    }\r\n\r\n    //todo wobbles when gear rotates\r\n    //playersbrowser nth child even && odd\r\n\r\n    render() {\r\n        let soundVol = this.props.volumeSettings.soundVol * 100\r\n        let musicVol = this.props.volumeSettings.musicVol * 100\r\n        return (\r\n            <div className='options-btn'>\r\n                <div className='gear-icon-wrapper'>\r\n                    <Icon icon={cog} size={32} className='gear-icon' />\r\n                </div>\r\n                <div className='dropdown-options border-neon border-neon-translucent'>\r\n                    <div className='settings-wrapper'>\r\n                        <div className='options-items'>\r\n                            <div className='options-item'>\r\n                                <Icon\r\n                                    className='options-icon'\r\n                                    icon={volume_2}\r\n                                    size={32}\r\n                                />\r\n                                <span className='options-item-description'>{`Sound volume: ${soundVol}%`}</span>\r\n                                <div className='slider-wrapper input-neon border-neon border-neon-violet'>\r\n                                    <input\r\n                                        type='range'\r\n                                        min='0'\r\n                                        max='100'\r\n                                        id='sound-slider-thumb'\r\n                                        className='options-slider slider'\r\n                                        value={soundVol}\r\n                                        onChange={e => this.onChange(e)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className='options-item'>\r\n                                <Icon\r\n                                    className='options-icon'\r\n                                    icon={note}\r\n                                    size={32}\r\n                                />\r\n                                <span className='options-item-description'>{`Music volume: ${musicVol}%`}</span>\r\n                                <div className='slider-wrapper input-neon border-neon border-neon-violet'>\r\n                                    <input\r\n                                        type='range'\r\n                                        min='0'\r\n                                        max='100'\r\n                                        id='music-slider-thumb'\r\n                                        className='options-slider slider'\r\n                                        value={musicVol}\r\n                                        onChange={e => this.onChange(e)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Settings\r\n","import React, { Component } from 'react'\r\nimport HeaderBar from './HeaderBar'\r\nimport Settings from './Settings'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './Header.css'\r\n\r\nclass Header extends Component {\r\n    state = { volumeSettings: this.props.volumeSettings }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.location.pathname === '/game') {\r\n            return {\r\n                volumeSettings: { ...props.volumeSettings, musicVol: 0 }\r\n            }\r\n        }\r\n        return { volumeSettings: props.volumeSettings }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='row header width-full semi-bold bg-dark color-lightblue padding-sm height-sm text-lg content-hcenter content-vcenter'>\r\n                <Settings\r\n                    volumeSettings={this.state.volumeSettings}\r\n                    setSettings={this.props.setSettings}\r\n                />\r\n                <HeaderBar title={this.props.title} score={this.props.score} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Header)\r\n","import React, { Component } from 'react'\r\nimport './Cards.css'\r\n\r\nconst CardImage = ({\r\n    id,\r\n    isMine,\r\n    isUsed,\r\n    isDisabled,\r\n    isBlocked,\r\n    isDiscardEnabled\r\n}) => {\r\n    let classes = 'card-image '\r\n    if (isUsed || isDisabled || isBlocked || isDiscardEnabled)\r\n        classes += 'card-image-used '\r\n\r\n    if (isMine) {\r\n        return (\r\n            <img\r\n                draggable={!isDisabled}\r\n                onMouseDown={() => {\r\n                    return isDisabled ? false : true\r\n                }}\r\n                className={classes}\r\n                src={`images/cards/${id}.svg`}\r\n                alt='Playing card.'\r\n            />\r\n        )\r\n    } else {\r\n        return (\r\n            <img\r\n                draggable='false'\r\n                onMouseDown={() => {\r\n                    return false\r\n                }}\r\n                style={{ userDrag: 'none' }}\r\n                className={`${classes} default-pointer`}\r\n                src={`images/cards/placeholder.svg`}\r\n                alt='Playing card.'\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst CardDescription = ({ description, displayTooltip }) => {\r\n    if (displayTooltip) {\r\n        return (\r\n            <div\r\n                className='card-info'\r\n                dangerouslySetInnerHTML={{ __html: description }}\r\n            />\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nconst CardOverlay = ({\r\n    isUsed,\r\n    isDisabled,\r\n    isBlocked,\r\n    onClick,\r\n    isDiscardEnabled,\r\n    onDiscard\r\n}) => {\r\n    if (isDiscardEnabled) {\r\n        return (\r\n            <button className='card-discard-button' onClick={onDiscard}>\r\n                <div>\r\n                    <span>Click to discard</span>\r\n                </div>\r\n            </button>\r\n        )\r\n    } else if (isUsed) {\r\n        return (\r\n            <button className='card-use-abort-button' onClick={onClick}>\r\n                <div>\r\n                    <span>Click to abort</span>\r\n                </div>\r\n            </button>\r\n        )\r\n    } else if (isDisabled) {\r\n        return (\r\n            <div className='card-disabled'>\r\n                <span>\r\n                    This card doesn't meet the conditions. Check the\r\n                    description.\r\n                </span>\r\n            </div>\r\n        )\r\n    } else if (isBlocked) {\r\n        return (\r\n            <div className='card-disabled'>\r\n                <span>This card is disabled.</span>\r\n            </div>\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nclass Card extends Component {\r\n    cardClasses = () => {\r\n        let classes = 'card '\r\n        if (this.props.isMine) classes += 'hover-pointer'\r\n        return classes\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.cardClasses()}>\r\n                <CardImage\r\n                    id={this.props.card.id}\r\n                    isDisabled={this.props.isDisabled}\r\n                    isMine={this.props.isMine}\r\n                    isUsed={this.props.isUsed}\r\n                    isBlocked={this.props.isBlocked}\r\n                    isDiscardEnabled={this.props.isDiscardEnabled}\r\n                />\r\n                <CardOverlay\r\n                    isDiscardEnabled={this.props.isDiscardEnabled}\r\n                    isDisabled={this.props.isDisabled}\r\n                    isUsed={this.props.isUsed}\r\n                    isBlocked={this.props.isBlocked}\r\n                    onClick={() => {\r\n                        this.props.onUseAbort()\r\n                    }}\r\n                    onDiscard={() => {\r\n                        this.props.onDiscard(this.props.index)\r\n                    }}\r\n                />\r\n                <CardDescription\r\n                    description={this.props.card.description}\r\n                    displayTooltip={this.props.displayTooltip}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\r\nimport Card from './Card'\r\nimport './Cards.css'\r\n\r\nimport { Draggable } from 'react-drag-and-drop'\r\n\r\nimport flipSound1 from '../../Resources/Sounds/card_flip.mp3'\r\nimport flipSound2 from '../../Resources/Sounds/card_flip2.mp3'\r\nconst { Cards: CardsData } = require('../../Game/Cards/Cards')\r\n\r\nclass Cards extends Component {\r\n    state = { displayTooltip: this.props.areMine }\r\n\r\n    getBg = () => {\r\n        if (this.props.move) {\r\n            return {\r\n                animationName: 'moveFlashing',\r\n                animationDuration: '400ms',\r\n                animationIterationCount: 'infinite',\r\n                animationTimingFunction: 'linear',\r\n                animationDirection: 'alternate-reverse',\r\n                animationFillMode: 'forwards'\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    GenerateCard = ({ card, isMine, index, isDisabled, blockCounter }) => {\r\n        if (isMine) {\r\n            let isUsed = this.props.usedCardIndexes[index]\r\n            let data = JSON.stringify({ cardId: card.id, index })\r\n            let isBlocked = false\r\n            if (blockCounter > 0 && blockCounter <= 2) {\r\n                isBlocked = true\r\n            }\r\n\r\n            return (\r\n                <Draggable\r\n                    enabled={isMine && !isUsed && !isDisabled && !isBlocked}\r\n                    onDragStart={() => {\r\n                        this.setState({ displayTooltip: false })\r\n                        this.props.playSound(flipSound1)\r\n                        this.props.setCardTargetHighlight(true)\r\n                    }}\r\n                    onDragEnd={() => {\r\n                        this.setState({ displayTooltip: true })\r\n                        this.props.playSound(flipSound2)\r\n                        this.props.setCardTargetHighlight(false)\r\n                    }}\r\n                    type='card'\r\n                    data={data}\r\n                >\r\n                    <li>\r\n                        <Card\r\n                            isDisabled={isDisabled}\r\n                            isBlocked={isBlocked}\r\n                            index={index}\r\n                            card={card}\r\n                            displayTooltip={this.state.displayTooltip}\r\n                            isDiscardEnabled={this.props.isDiscardEnabled}\r\n                            isMine={isMine}\r\n                            isUsed={isUsed}\r\n                            onUseAbort={() => {\r\n                                this.props.onUseAbort(index)\r\n                            }}\r\n                            onDiscard={index => {\r\n                                if (this.props.move) {\r\n                                    this.props.onDiscard(index, card.id)\r\n                                }\r\n                            }}\r\n                        />\r\n                    </li>\r\n                </Draggable>\r\n            )\r\n        } else {\r\n            return (\r\n                <li>\r\n                    <Card\r\n                        card={card}\r\n                        displayTooltip={this.state.displayTooltip}\r\n                        isMine={isMine}\r\n                    />\r\n                </li>\r\n            )\r\n        }\r\n    }\r\n\r\n    CardsSpawner = () => {\r\n        let { cards, areMine, player, game } = this.props\r\n        let blockCounter = 0\r\n        if (game !== null) blockCounter = game.blockCounters[player.socketId]\r\n        if (cards !== null) {\r\n            return cards.map((card, i) => {\r\n                let cardData = CardsData[card.id]\r\n                return (\r\n                    <this.GenerateCard\r\n                        card={card}\r\n                        index={i}\r\n                        key={i}\r\n                        isMine={areMine}\r\n                        isDisabled={!cardData.doesMeetConditions(game, player)}\r\n                        blockCounter={blockCounter}\r\n                    />\r\n                )\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='cards' style={this.getBg()}>\r\n                <span className='cards-title'>\r\n                    {this.props.title && this.props.title}\r\n                </span>\r\n                <div className='cards-wrapper'>\r\n                    <ul>\r\n                        <this.CardsSpawner />\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards\r\n","import React, { Component } from 'react'\r\n\r\nclass Key extends Component {\r\n    clickHandler = () => {\r\n        this.props.onClick()\r\n        if (this.props.isClicked === false) {\r\n            this.props.moveHandler({\r\n                move: {\r\n                    type: 'key',\r\n                    key: this.props.letter,\r\n                    playerSocketId: this.props.player.socketId\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    getStyle = () => {\r\n        let style = null\r\n        style = { backgroundColor: '#519C3F' }\r\n        if (this.props.isUsed) {\r\n            style = { backgroundColor: '#555', textDecoration: 'none' }\r\n        }\r\n        if (this.props.isClicked) {\r\n            style = {\r\n                ...style,\r\n                borderWidth: '0.3vh',\r\n                borderStyle: 'solid',\r\n                borderColor: 'orange'\r\n            }\r\n        }\r\n\r\n        return style\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                style={this.getStyle()}\r\n                onClick={this.clickHandler}\r\n                className='key'\r\n            >\r\n                {this.props.letter}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Key\r\n","import React, { Component } from 'react'\r\nimport Key from './Key'\r\n\r\nclass Keyboard extends Component {\r\n    state = { clickedIndex: null }\r\n\r\n    generateKeys = () => {\r\n        let result = []\r\n        for (let i = 65; i <= 90; i++) {\r\n            let letter = String.fromCharCode(i).toUpperCase()\r\n            let myKeys = this.props.keys.filter(\r\n                key => key.playerSocketId === this.props.player.socketId\r\n            )\r\n            myKeys = myKeys.map(key => {\r\n                return key.key\r\n            })\r\n            let isUsed = myKeys.includes(letter)\r\n\r\n            let isClicked = this.props.clickedIndex === i\r\n\r\n            let onClick = index => {\r\n                if (this.props.clickedIndex === index) {\r\n                    this.props.setSelectedKey(null)\r\n                    this.props.clearKeyMove()\r\n                } else {\r\n                    this.props.setSelectedKey(index)\r\n                }\r\n            }\r\n            result.push(\r\n                <Key\r\n                    moveHandler={this.props.moveHandler}\r\n                    onClick={() => onClick(i)}\r\n                    key={i}\r\n                    player={this.props.player}\r\n                    letter={letter}\r\n                    isUsed={isUsed}\r\n                    isClicked={isClicked}\r\n                />\r\n            )\r\n        }\r\n        return result\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='keyboard border-neon border-light-translucent'>\r\n                {this.generateKeys().map(key => {\r\n                    return key\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Keyboard\r\n","import React, { Component } from 'react'\r\n\r\nclass Timer extends Component {\r\n    timeInterval = null\r\n    state = {\r\n        time: this.props.time,\r\n        wrapperStyle: {},\r\n        circleStyle: {\r\n            animation: `countdown ${this.props.time}s linear 1 forwards`\r\n        },\r\n        propsStyle: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timeInterval = setInterval(() => {\r\n            this.setState(\r\n                prevState => ({ time: prevState.time - 1 }),\r\n                () => {\r\n                    if (this.state.time === 0) {\r\n                        clearInterval(this.timeInterval)\r\n                        this.props.onEnd && this.props.onEnd() //execute only if there is a callback provided\r\n                        this.setState({\r\n                            style: { display: 'none', ...this.state.style }\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timeInterval)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.state.wrapperStyle} className='timer'>\r\n                <div id='timer-number'>{this.state.time}</div>\r\n                <svg className='timer-svg'>\r\n                    <circle\r\n                        style={this.state.circleStyle}\r\n                        r='18'\r\n                        cx='20'\r\n                        cy='20'\r\n                    />\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer\r\n","import React, { Component } from 'react'\r\n\r\nconst Chains = props => {\r\n    let getSide = props.side\r\n    return (\r\n        <div className={'state-chains ' + getSide}>\r\n            <span>{`Cards blocked for ${props.state} turns.`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Shield = props => {\r\n    let getSide = props.side\r\n    let state = props.state * -1\r\n    return (\r\n        <div className={'state-shield ' + getSide}>\r\n            <span>{`Immune to block cards for ${state} turns.`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass PlayerState extends Component {\r\n    getIcon = (state, side) => {\r\n        if (state > 0) return <Chains state={state} side={side} />\r\n        else if (state < 0) return <Shield state={state} side={side} />\r\n        else return null\r\n    }\r\n\r\n    getPlayerState = me => {\r\n        let { game, player } = this.props\r\n        if (player === null || game === null) return null\r\n        if (me) {\r\n            return this.getIcon(game.blockCounters[player.socketId], 'left-1vh')\r\n        } else {\r\n            let socketId = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            return this.getIcon(game.blockCounters[socketId], 'right-1vh')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='player-state'>\r\n                {this.getPlayerState(true)}\r\n                {this.getPlayerState(false)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayerState\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst GenericModal = props => {\r\n    let { onClose, title, content, soundVolume } = props\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n                <div className='generic-popup-title'>\r\n                    <span>{title}</span>\r\n                    <button onClick={onClose} className='btn-popup-close'>\r\n                        <Icon\r\n                            icon={cross}\r\n                            size='1.6vh'\r\n                            className='close-icon'\r\n                        />\r\n                    </button>\r\n                </div>\r\n                <div className='generic-popup-content'>{content}</div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default GenericModal\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst CardModal = props => {\r\n    let { cardId, description, onClose, soundVolume } = props\r\n\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n                <div className='generic-popup-title'>\r\n                    <span />\r\n                    <button onClick={onClose} className='btn-popup-close'>\r\n                        <Icon\r\n                            icon={cross}\r\n                            size='1.6vh'\r\n                            className='close-icon'\r\n                        />\r\n                    </button>\r\n                </div>\r\n                <div className='lookup-card-wrapper'>\r\n                    <img\r\n                        className='lookup-card-display'\r\n                        src={`images/cards/${cardId}.svg`}\r\n                        alt='Card'\r\n                    />\r\n                    <span>{description}</span>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default CardModal\r\n","import React, { Component } from 'react'\r\nimport { Droppable } from 'react-drag-and-drop'\r\nimport Keyboard from './Keyboard'\r\nimport Timer from './Timer'\r\nimport PlayerState from './PlayerState'\r\nimport './Content.css'\r\nimport cardDropSound from '../../Resources/Sounds/card_drop.mp3'\r\nimport flipSound3 from '../../Resources/Sounds/card_flip3.mp3'\r\nimport buttonClick from '../../Resources/Sounds/button_click.mp3'\r\nimport GenericModal from '../Modals/GenericModal'\r\nimport CardModal from '../Modals/CardModal'\r\nconst { Cards: CardsData } = require('../../Game/Cards/Cards')\r\n\r\nconst EndTurnButton = props => {\r\n    let { move, onClick } = props\r\n    let text = 'Waiting...'\r\n    let classes =\r\n        'end-turn-btn button-pointer border-neon border-light-translucent '\r\n    if (move) {\r\n        classes += 'end-turn-btn-hover'\r\n        text = 'End turn'\r\n    } else {\r\n        classes += 'end-turn-btn-waiting '\r\n    }\r\n\r\n    return (\r\n        <button onClick={onClick} disabled={!move} className={classes}>\r\n            {text}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Content extends Component {\r\n    state = {\r\n        keyMove: null,\r\n        cardMoves: [],\r\n        clickedIndex: null,\r\n        isDiscardEnabled: false,\r\n        isWordDefinitionModal: false,\r\n        wordDefinition: null,\r\n        isMoveModal: false,\r\n        isPeekModal: false,\r\n        peekCardId: null,\r\n        peekDescription: null\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        let newCardMoves = state.cardMoves\r\n        Object.keys(props.usedCardIndexes).forEach(index => {\r\n            index = parseInt(index)\r\n            let val = props.usedCardIndexes[index]\r\n            if (val === false) {\r\n                newCardMoves = newCardMoves.filter(move => {\r\n                    return move.index !== index\r\n                })\r\n            }\r\n        })\r\n        return {\r\n            cardMoves: newCardMoves\r\n        }\r\n    }\r\n\r\n    setSelectedKey = state => {\r\n        this.props.playSound(buttonClick)\r\n        this.setState({ clickedIndex: state })\r\n    }\r\n\r\n    colorDisplayWord = word => {\r\n        word = word.toUpperCase()\r\n        let result = []\r\n        let { guessed } = this.props.game\r\n        let { socketId } = this.props.player\r\n        Array.from(word).forEach((letter, i) => {\r\n            let style = null\r\n            if (letter !== '_' && letter !== ' ') {\r\n                let key = guessed.filter(g => {\r\n                    return g.key === letter\r\n                })[0]\r\n                if (key.playerSocketId === socketId) {\r\n                    style = { color: '#0900ff' }\r\n                } else {\r\n                    style = { color: '#b92e34' }\r\n                }\r\n            }\r\n            result.push(\r\n                <span key={i} style={style}>\r\n                    {letter}\r\n                </span>\r\n            )\r\n        })\r\n        return result\r\n    }\r\n\r\n    onDrop = data => {\r\n        if (this.props.move) {\r\n            let card = JSON.parse(data.card)\r\n            let move = {\r\n                index: card.index,\r\n                type: 'card',\r\n                card: card.cardId,\r\n                playerSocketId: this.props.player.socketId\r\n            }\r\n\r\n            let { usedCardIndexes } = this.props\r\n            usedCardIndexes[card.index] = true\r\n            this.props.updateUsedCardIndexes(usedCardIndexes)\r\n\r\n            let isDuplicate = this.state.cardMoves.some(\r\n                cardMove => cardMove.index === card.index\r\n            )\r\n            if (isDuplicate === false) {\r\n                setTimeout(() => {\r\n                    this.props.playSound(cardDropSound)\r\n                }, 100)\r\n                this.setState({ cardMoves: [...this.state.cardMoves, move] })\r\n            }\r\n        }\r\n    }\r\n\r\n    onMove = ({ move }) => {\r\n        if (this.props.move) {\r\n            this.setState({ keyMove: move })\r\n        }\r\n    }\r\n\r\n    clearKeyMove = () => {\r\n        this.setState({\r\n            keyMove: null,\r\n            clickedIndex: null\r\n        })\r\n    }\r\n\r\n    onEndTurn = () => {\r\n        if (this.state.keyMove !== null || this.state.cardMoves.length > 0) {\r\n            if (this.props.move) {\r\n                let moves = []\r\n                let { keyMove, cardMoves } = this.state\r\n                if (keyMove !== null) moves.push(keyMove)\r\n                if (cardMoves !== []) moves = [...moves, ...cardMoves]\r\n                moves = moves.map(move => {\r\n                    return { ...move, discarded: false }\r\n                })\r\n                this.props.moveHandler({ moves })\r\n                this.setSelectedKey(null)\r\n                this.props.updateUsedCardIndexes({\r\n                    0: false,\r\n                    1: false,\r\n                    2: false\r\n                })\r\n                this.setState({\r\n                    keyMove: null,\r\n                    cardMoves: [],\r\n                    clickedIndex: null\r\n                })\r\n                this.props.playSound(flipSound3)\r\n                cardMoves.forEach(e => {\r\n                    if (e.card === CardsData.DEFINITION_CARD.id) {\r\n                        let definitions = this.props.game.word.definitions\r\n                        let randomIndex = Math.floor(\r\n                            Math.random() * definitions.length\r\n                        )\r\n                        this.setState({\r\n                            isWordDefinitionModal: true,\r\n                            wordDefinition: definitions[randomIndex]\r\n                        })\r\n                    } else if (e.card === CardsData.LOOK_UP_CARD.id) {\r\n                        let enemySocket = this.props.game.playerSockets.filter(\r\n                            x => {\r\n                                return x.socketId !== this.props.player.socketId\r\n                            }\r\n                        )[0].socketId\r\n                        let enemyCards = this.props.game.cards[enemySocket]\r\n                        let randomIndexOfCard = Math.floor(\r\n                            Math.random() * enemyCards.length\r\n                        )\r\n                        let randomEnemyCard = enemyCards[randomIndexOfCard].id\r\n                        let { description } = CardsData[randomEnemyCard]\r\n                        this.setState({\r\n                            isPeekModal: true,\r\n                            peekCardId: enemyCards[randomIndexOfCard].id,\r\n                            peekDescription: description\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            this.setState({\r\n                isMoveModal: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let displayWord = []\r\n        if (this.props.game !== null) {\r\n            displayWord = this.colorDisplayWord(this.props.game.displayWord)\r\n        }\r\n\r\n        let wordClass = 'word border-neon border-neon-violet '\r\n        if (this.props.isCardTargetHighlight && this.props.move)\r\n            wordClass += 'word-glow'\r\n\r\n        let {\r\n            isWordDefinitionModal,\r\n            wordDefinition,\r\n            isMoveModal,\r\n            isPeekModal,\r\n            peekCardId,\r\n            peekDescription,\r\n            clickedIndex\r\n        } = this.state\r\n\r\n        let { onMoveTimeout, move, game, player, volumeSettings } = this.props\r\n        return (\r\n            <div className='content'>\r\n                {isWordDefinitionModal && (\r\n                    <GenericModal\r\n                        title='Word definition:'\r\n                        content={wordDefinition}\r\n                        onClose={() =>\r\n                            this.setState({ isWordDefinitionModal: false })\r\n                        }\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {isMoveModal && (\r\n                    <GenericModal\r\n                        title='Cannot continue!'\r\n                        content='You have to make a a move.'\r\n                        onClose={() => this.setState({ isMoveModal: false })}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {isPeekModal && (\r\n                    <CardModal\r\n                        cardId={peekCardId}\r\n                        description={peekDescription}\r\n                        onClose={() => this.setState({ isPeekModal: false })}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                <PlayerState player={player} game={game} />\r\n                <div className='timer-wrapper'>\r\n                    {move && <Timer time={30} onEnd={onMoveTimeout} />}\r\n                </div>\r\n                <div className='game'>\r\n                    <Droppable types={['card']} onDrop={this.onDrop}>\r\n                        <div className={wordClass}>\r\n                            {displayWord.map(x => {\r\n                                return x\r\n                            })}\r\n                        </div>\r\n                    </Droppable>\r\n                    <EndTurnButton move={move} onClick={this.onEndTurn} />\r\n                    <div className='keyboard-wrapper'>\r\n                        {game && (\r\n                            <Keyboard\r\n                                player={player}\r\n                                moveHandler={this.onMove}\r\n                                keys={game.keys}\r\n                                setSelectedKey={this.setSelectedKey}\r\n                                clickedIndex={clickedIndex}\r\n                                clearKeyMove={this.clearKeyMove}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Content\r\n","import React, { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport ReactAudioPlayer from 'react-audio-player'\r\n\r\nimport './Game.css'\r\nimport Cards from './Cards'\r\nimport Content from './Content'\r\nimport GenericModal from '../Modals/GenericModal'\r\n\r\nconst { setScore, isMove } = require('../../Shared/Functions')\r\nconst { GAME_MOVE, WIN } = require('../../Shared/Events')\r\nconst { Result } = require('../../Shared/Enums')\r\nclass Game extends Component {\r\n    state = {\r\n        game: this.props.game,\r\n        gameFromProps: true,\r\n        allowMove: true,\r\n        myCards: null,\r\n        enemyCards: null,\r\n        cardTargetHighlight: false,\r\n        usedCardIndexes: { 0: false, 1: false, 2: false },\r\n        soundSrc: '',\r\n        isDiscardEnabled: false,\r\n        discardMoves: [],\r\n        guessedWordModal: null,\r\n        isTieModal: false,\r\n        gameEndWinnerModal: null\r\n    }\r\n\r\n    initializeSocket = () => {\r\n        const { socket } = this.props\r\n        socket.on(GAME_MOVE, ({ game }) => {\r\n            this.setState({ game: game }, () => {\r\n                this.props.setMove(\r\n                    isMove({ game: this.state.game, player: this.props.player })\r\n                )\r\n            })\r\n        })\r\n        socket.on(WIN, ({ winner, score, type, game }) => {\r\n            const { setMove, setTitle, player } = this.props\r\n            let returnState = null\r\n            if (type === Result.TURN_WIN) {\r\n                returnState = { gameFromProps: false, game }\r\n                setMove(isMove({ game, player }))\r\n            } else if (type === Result.TURN_TIE) {\r\n                returnState = { gameFromProps: false, game }\r\n                setMove(isMove({ game, player }))\r\n                this.setState({ isTieModal: true })\r\n            } else if (type === Result.GAME_WIN) {\r\n                returnState = { allowMove: false }\r\n                this.setState({ gameEndWinnerModal: winner.nickname })\r\n            }\r\n\r\n            if (\r\n                type === Result.TURN_WIN ||\r\n                type === Result.TURN_TIE ||\r\n                type === Result.GAME_WIN\r\n            ) {\r\n                this.setState({ guessedWordModal: this.state.game.word.word })\r\n            }\r\n\r\n            setScore({\r\n                player,\r\n                game,\r\n                setTitle,\r\n                score\r\n            })\r\n\r\n            this.setState({ ...returnState })\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.gameFromProps) {\r\n            if (props.game !== state.game) {\r\n                setScore({\r\n                    player: props.player,\r\n                    game: props.game,\r\n                    setTitle: props.setTitle\r\n                })\r\n                return {\r\n                    gameFromProps: false,\r\n                    game: props.game\r\n                }\r\n            }\r\n            return null\r\n        }\r\n        return null\r\n    }\r\n\r\n    ctrlPressHandler(event, isDown) {\r\n        let { player } = this.props\r\n        let { game } = this.state\r\n        if (player !== null && game !== null) {\r\n            let mySocketId = player.socketId\r\n            let myBlocked = game.blockCounters[mySocketId]\r\n            if (event.keyCode === 17 && myBlocked <= 0) {\r\n                this.setState({ isDiscardEnabled: isDown })\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.socket && this.initializeSocket()\r\n        this.props.muteMusic(true)\r\n        document.addEventListener(\r\n            'keydown',\r\n            e => {\r\n                this.ctrlPressHandler(e, true)\r\n            },\r\n            false\r\n        )\r\n        document.addEventListener(\r\n            'keyup',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\r\n            'keydown',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n        document.removeEventListener(\r\n            'keyup',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n    }\r\n\r\n    moveHandler = ({ moves = null }) => {\r\n        if (this.state.allowMove === true) {\r\n            const { socket } = this.props\r\n            let allMoves = [...moves, ...this.state.discardMoves]\r\n            socket.emit(GAME_MOVE, { game: this.state.game, moves: allMoves })\r\n        }\r\n    }\r\n\r\n    onMoveTimeout = () => {\r\n        this.moveHandler({\r\n            moves: [\r\n                {\r\n                    type: 'key',\r\n                    key: '',\r\n                    playerSocketId: this.props.player.socketId\r\n                }\r\n            ]\r\n        })\r\n    }\r\n\r\n    setCardTargetHighlight = bool => {\r\n        this.setState({ cardTargetHighlight: bool })\r\n    }\r\n\r\n    updateUsedCardIndexes = newIndexes => {\r\n        this.setState({ usedCardIndexes: newIndexes })\r\n    }\r\n\r\n    onUseAbort = index => {\r\n        let newIndexes = this.state.usedCardIndexes\r\n        newIndexes[index] = false\r\n        this.updateUsedCardIndexes(newIndexes)\r\n    }\r\n\r\n    playSound = src => {\r\n        this.setState({ soundSrc: src })\r\n    }\r\n\r\n    onDiscard = (index, cardId) => {\r\n        let move = {\r\n            type: 'card',\r\n            card: cardId,\r\n            playerSocketId: this.props.player.socketId,\r\n            discarded: true\r\n        }\r\n        let newGame = this.state.game\r\n        let mySocketId = this.props.player.socketId\r\n        newGame.cards[mySocketId] = newGame.cards[mySocketId].filter(\r\n            (val, i) => {\r\n                return i !== index\r\n            }\r\n        )\r\n        let newDiscardMoves = this.state.discardMoves\r\n        newDiscardMoves.push(move)\r\n        this.setState({\r\n            discardMoves: newDiscardMoves,\r\n            game: newGame\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let cards = { my: null, enemy: null }\r\n        if (this.state.game !== null) {\r\n            let gameCards = this.state.game.cards\r\n            let mySocketId = this.props.player.socketId\r\n            cards.my = gameCards[mySocketId]\r\n            let enemySocketId = this.state.game.playerSockets.filter(x => {\r\n                return x.socketId !== this.props.player.socketId\r\n            })[0].socketId\r\n            cards.enemy = gameCards[enemySocketId]\r\n        }\r\n        return (\r\n            <div className='gameWrapper'>\r\n                {this.state.guessedWordModal && (\r\n                    <GenericModal\r\n                        title='Guessed word:'\r\n                        content={this.state.guessedWordModal}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                        onClose={() => {\r\n                            this.setState({ guessedWordModal: null })\r\n                        }}\r\n                    />\r\n                )}\r\n                {this.state.isTieModal && (\r\n                    <GenericModal\r\n                        title='TIE.'\r\n                        content='Turn is tied. None of the players won.'\r\n                        volumeSettings={this.props.volumeSettings}\r\n                        onClose={() => {\r\n                            this.setState({ isTieModal: null })\r\n                        }}\r\n                    />\r\n                )}\r\n                {this.state.gameEndWinnerModal && (\r\n                    <GenericModal\r\n                        title='GAME ENDED.'\r\n                        content={`Player ${\r\n                            this.state.gameEndWinnerModal\r\n                        } has won the game.`}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                        onClose={() => {\r\n                            this.setState({ gameEndWinnerModal: null })\r\n                            this.props.history.push('/browser')\r\n                            this.setState({ game: null })\r\n                        }}\r\n                    />\r\n                )}\r\n                <ReactAudioPlayer\r\n                    volume={this.props.volumeSettings.soundVol}\r\n                    src={this.state.soundSrc}\r\n                    autoPlay\r\n                    onEnded={() => {\r\n                        this.setState({ soundSrc: '' })\r\n                    }}\r\n                />\r\n                <Cards\r\n                    cards={cards.my}\r\n                    onUseAbort={this.onUseAbort}\r\n                    usedCardIndexes={this.state.usedCardIndexes}\r\n                    areMine={true}\r\n                    move={this.props.isMove}\r\n                    title='Your cards:'\r\n                    setCardTargetHighlight={this.setCardTargetHighlight}\r\n                    playSound={this.playSound}\r\n                    game={this.state.game}\r\n                    player={this.props.player}\r\n                    isDiscardEnabled={this.state.isDiscardEnabled}\r\n                    onDiscard={this.onDiscard}\r\n                />\r\n                <Content\r\n                    player={this.props.player}\r\n                    updateUsedCardIndexes={this.updateUsedCardIndexes}\r\n                    usedCardIndexes={this.state.usedCardIndexes}\r\n                    moveHandler={this.moveHandler}\r\n                    onMoveTimeout={this.onMoveTimeout}\r\n                    move={this.props.isMove}\r\n                    game={this.state.game}\r\n                    addPopup={this.props.addPopup}\r\n                    isCardTargetHighlight={this.state.cardTargetHighlight}\r\n                    playSound={this.playSound}\r\n                    volumeSettings={this.props.volumeSettings}\r\n                />\r\n                <Cards\r\n                    cards={cards.enemy}\r\n                    usedCardIndexes={{ 0: false, 1: false, 2: false }}\r\n                    areMine={false}\r\n                    move={!this.props.isMove}\r\n                    title='Enemy cards:'\r\n                    setCardTargetHighlight={this.setCardTargetHighlight}\r\n                    playSound={this.playSound}\r\n                    game={this.state.game}\r\n                    player={this.props.player}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nGame.propTypes = {\r\n    game: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    player: PropTypes.object,\r\n    history: PropTypes.object.isRequired,\r\n    isMove: PropTypes.bool.isRequired,\r\n    muteMusic: PropTypes.func.isRequired,\r\n    setMove: PropTypes.func.isRequired,\r\n    setTitle: PropTypes.func.isRequired,\r\n    volumeSettings: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withRouter(Game)\r\n","import React, { Component } from 'react'\r\nimport './PlayersBrowser.css'\r\nimport GenericModal from '../../Components/Modals/GenericModal'\r\n\r\nclass BrowserEntry extends Component {\r\n    state = {\r\n        isButtonDisabled: false,\r\n        isTimeoutModal: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true\r\n        this.setState({ isButtonDisabled: false })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.isButtonDisabled === true) {\r\n            setTimeout(() => {\r\n                if (this._isMounted === true) {\r\n                    this.setState({ isButtonDisabled: false })\r\n                }\r\n            }, 5000)\r\n        }\r\n    }\r\n\r\n    clickHandler = event => {\r\n        event.preventDefault()\r\n        if (this.state.isButtonDisabled === true) {\r\n            this.setState({ isTimeoutModal: true })\r\n        } else {\r\n            this.setState({\r\n                isButtonDisabled: true\r\n            })\r\n\r\n            this.props.invitationHandler({\r\n                id: this.props.id,\r\n                socketId: this.props.socketId\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { isTimeoutModal } = this.state\r\n        let { nickname, volumeSettings } = this.props\r\n        return (\r\n            <React.Fragment>\r\n                {isTimeoutModal && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='You are inviting too fast. Wait 5 seconds.'\r\n                        soundVolume={volumeSettings.soundVol}\r\n                        onClose={() => {\r\n                            this.setState({ isTimeoutModal: false })\r\n                        }}\r\n                    />\r\n                )}\r\n                <div className='browser-entry width-full'>\r\n                    <span className='player-info'>\r\n                        <span className='nickname'>{nickname}</span>\r\n                    </span>\r\n                    <button\r\n                        onClick={e => {\r\n                            this.clickHandler(e)\r\n                        }}\r\n                        className='play border-neon border-neon-lime'\r\n                    >\r\n                        Play\r\n                    </button>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BrowserEntry\r\n","import BrowserEntry from './BrowserEntry'\r\nimport React from 'react'\r\n\r\nexport const extractBrowserPlayers = ({\r\n    player,\r\n    connectedPlayers,\r\n    invitationHandler,\r\n    volumeSettings\r\n}) => {\r\n    connectedPlayers = Object.assign({}, connectedPlayers)\r\n\r\n    //* don't display the current player\r\n    if (player) {\r\n        delete connectedPlayers[player.nickname]\r\n    }\r\n\r\n    let result = []\r\n    Object.values(connectedPlayers).forEach(player => {\r\n        let { isInGame } = player\r\n        if (isInGame === false) {\r\n            result.push(\r\n                <BrowserEntry\r\n                    id={player.id}\r\n                    socketId={player.socketId}\r\n                    invitationHandler={invitationHandler}\r\n                    nickname={player.nickname}\r\n                    volumeSettings={volumeSettings}\r\n                    key={player.id}\r\n                    index={Object.values(connectedPlayers).indexOf(player)}\r\n                />\r\n            )\r\n        }\r\n    })\r\n    return result\r\n}\r\n","import React from 'react'\r\nimport './PlayersBrowser.css'\r\nimport Scrollbar from 'react-scrollbars-custom'\r\nimport { extractBrowserPlayers } from './Functions'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PlayersBrowser extends React.Component {\r\n    state = {\r\n        connectedPlayers: this.props.connectedPlayers,\r\n        playersInBrowser: extractBrowserPlayers({\r\n            player: this.props.player,\r\n            connectedPlayers: this.props.connectedPlayers,\r\n            invitationHandler: this.props.invitationHandler,\r\n            volumeSettings: this.props.volumeSettings\r\n        }),\r\n        searchedPlayer: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Players browser' })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.connectedPlayers !== props.connectedPlayers) {\r\n            return {\r\n                playersInBrowser: extractBrowserPlayers({\r\n                    player: props.player,\r\n                    connectedPlayers: props.connectedPlayers,\r\n                    invitationHandler: props.invitationHandler,\r\n                    volumeSettings: props.volumeSettings\r\n                }),\r\n                connectedPlayers: props.connectedPlayers\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    searchPlayer = e => {\r\n        let input = e.target.value\r\n        if (input === '') {\r\n            this.setState({ searchedPlayer: null })\r\n        } else {\r\n            let players = Object.keys(this.props.connectedPlayers)\r\n            players = players.filter(\r\n                item => item !== this.props.player.nickname\r\n            )\r\n            for (let i = 0; i < players.length; i++) {\r\n                if (players[i].toLowerCase().includes(input.toLowerCase())) {\r\n                    this.setState({\r\n                        searchedPlayer: this.props.connectedPlayers[players[i]]\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    SearchedPlayer = () => {\r\n        return extractBrowserPlayers({\r\n            player: this.props.player,\r\n            connectedPlayers: [this.state.searchedPlayer],\r\n            invitationHandler: this.props.invitationHandler,\r\n            volumeSettings: this.props.volumeSettings\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { player } = this.props\r\n        let { searchedPlayer, playersInBrowser } = this.state\r\n        return (\r\n            <div className='players-browser container content-vcenter border-neon border-neon-orange'>\r\n                <div className='players-browser-title bg-lightgrey width-full text-xlg text-center'>\r\n                    <p>\r\n                        {player && (\r\n                            <span>\r\n                                You are logged in as <b>{player.nickname}</b>.\r\n                            </span>\r\n                        )}\r\n                    </p>\r\n                </div>\r\n                <div className='search-player'>\r\n                    <input\r\n                        placeholder='Search player'\r\n                        onChange={this.searchPlayer}\r\n                        className='border-neon border-neon-blue'\r\n                    />\r\n                </div>\r\n                <Scrollbar style={{ width: '100%', height: '100%' }}>\r\n                    {!searchedPlayer ? (\r\n                        playersInBrowser.map(entry => {\r\n                            return entry\r\n                        })\r\n                    ) : (\r\n                        <this.SearchedPlayer />\r\n                    )}\r\n                </Scrollbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPlayersBrowser.propTypes = {\r\n    connectedPlayers: PropTypes.object.isRequired,\r\n    invitationHandler: PropTypes.func.isRequired,\r\n    player: PropTypes.object,\r\n    playersInBrowser: PropTypes.array,\r\n    setTitle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default PlayersBrowser\r\n","import React, { Component } from 'react'\r\nimport './LoginPage.css'\r\nimport GenericModal from '../Modals/GenericModal'\r\nimport { VERIFY_USER } from '../../Shared/Events'\r\n\r\nclass LoginPage extends Component {\r\n    inputRef = React.createRef()\r\n    state = {\r\n        isNameLengthOpen: false,\r\n        isNameSpaceOpen: false,\r\n        isNameTakenOpen: false,\r\n        isAlreadyLoggedInOpen: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Login page' })\r\n    }\r\n\r\n    loginHandler = () => {\r\n        let { value } = this.inputRef.current\r\n        const { socket } = this.props\r\n        if (value.length <= 1) {\r\n            this.setState({ isNameLengthOpen: true })\r\n            return\r\n        } else if (value.includes(' ')) {\r\n            this.setState({ isNameSpaceOpen: true })\r\n            return\r\n        }\r\n        socket.emit(VERIFY_USER, value, ({ player, isTaken, isIpFree }) => {\r\n            if (!isIpFree) {\r\n                this.setState({ isAlreadyLoggedInOpen: true })\r\n            } else if (isTaken) {\r\n                this.setState({ isNameTakenOpen: true })\r\n            } else {\r\n                this.props.loginPlayer(player)\r\n            }\r\n        })\r\n    }\r\n\r\n    submitOnEnter = key => {\r\n        if (key.which === 13) {\r\n            this.loginHandler()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { volumeSettings } = this.props\r\n        return (\r\n            <div className='login-page-content'>\r\n                {this.state.isNameLengthOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='Your nickname has to be longer.'\r\n                        onClose={() => {\r\n                            this.setState({ isNameLengthOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {this.state.isNameSpaceOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='Your nickname cannot have spaces.'\r\n                        onClose={() => {\r\n                            this.setState({ isNameSpaceOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {this.state.isNameTakenOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='This nickname is taken.'\r\n                        onClose={() => {\r\n                            this.setState({ isNameTakenOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {this.state.isAlreadyLoggedInOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='You are already logged in.'\r\n                        onClose={() => {\r\n                            this.setState({ isAlreadyLoggedInOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n\r\n                <div className='infoNickname border-neon border-neon-violet'>\r\n                    <p>Please enter your nickname</p>\r\n                </div>\r\n                <div className='nickname-input'>\r\n                    <input\r\n                        ref={this.inputRef}\r\n                        type='text'\r\n                        maxLength='15'\r\n                        className='inputNickname border-neon border-neon-red'\r\n                        onKeyDown={this.submitOnEnter}\r\n                        placeholder='Your nickname...'\r\n                    />\r\n                    <button\r\n                        className='button-pointer border-neon border-neon-orange'\r\n                        onClick={this.loginHandler}\r\n                    >\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginPage\r\n","import React, { Component } from 'react'\r\nimport { WALKTHROUGH_READY } from '../../Shared/Events'\r\nimport './Walkthrough.css'\r\n// import image from '../../../public/images/walkthrough/walkthrough.png'\r\n\r\nconst Description = () => {\r\n    return (\r\n        <div className='walkthrough-desc'>\r\n            <ol>\r\n                <li>\r\n                    <span>Your cards which you can use during a turn.</span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Keyboard where you can guess a letter by clicking it and\r\n                        end turn.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Place for a random word. Your guessed letters are\r\n                        colored by blue and opponent's are red.\r\n                    </span>\r\n                </li>\r\n            </ol>\r\n            <ul>\r\n                <li>\r\n                    <span>\r\n                        During a turn you can use cards and guess one letter.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        To use a card drag it on the random word (number 3) and\r\n                        drop.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Game ends after you or your opponent win two rounds.\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Walkthrough extends Component {\r\n    state = { buttonVisibility: true }\r\n\r\n    onReady = () => {\r\n        const { socket } = this.props\r\n        socket.emit(WALKTHROUGH_READY, { gameId: this.props.gameId })\r\n        this.setState({ buttonVisibility: false })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Walkthrough' })\r\n    }\r\n\r\n    render() {\r\n        let buttonClass = this.state.buttonVisibility\r\n            ? 'ok-btn border-neon border-neon-orange'\r\n            : 'ok-btn-pressed ok-btn border-neon border-neon-orange'\r\n        let content = this.state.buttonVisibility\r\n            ? 'READY'\r\n            : 'Waiting for opponent...'\r\n        return (\r\n            <div className='gameWrapper'>\r\n                <div className='walkthrough'>\r\n                    <div className='walkthrough-content'>\r\n                        <img\r\n                            className='walkthrough-image'\r\n                            src='images/walkthrough/walkthrough.png'\r\n                            alt='Walkthrough screenshot'\r\n                        />\r\n                        <Description />\r\n                    </div>\r\n\r\n                    <div className='ok-btn-wrapper'>\r\n                        <button className={buttonClass} onClick={this.onReady}>\r\n                            {content}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Walkthrough\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Timer from '../Game/Timer'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst InvitationModal = props => {\r\n    let { nickname, onAccept, onClose, soundVolume } = props\r\n\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito bg-khaki'>\r\n                <div className='generic-popup-title'>\r\n                    <span>New game invitation!</span>\r\n                </div>\r\n                <div className='invitation-popup-content'>\r\n                    <div className='msg'>{`You have been invited by ${nickname}.`}</div>\r\n                    <Timer time={10} onEnd={onClose} />\r\n                    <div className='popup-buttons'>\r\n                        <button\r\n                            className='border-neon border-neon-lime'\r\n                            onClick={onAccept}\r\n                        >\r\n                            <span>Accept</span>\r\n                        </button>\r\n                        <button\r\n                            className='border-neon border-neon-orange'\r\n                            onClick={onClose}\r\n                        >\r\n                            <span>Decline</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default InvitationModal\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst DisconnectedPopup = props => {\r\n    let { soundVolume } = props\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n                <div className='disconnected-popup-content'>\r\n                    <div className='msg'>\r\n                        You have been disconnected from the server.\r\n                    </div>\r\n                    <div className='spinner-wrapper'>\r\n                        <span className='fa fa-spinner fa-spin fa-3x' />\r\n                    </div>\r\n                    <div className='msg'>Trying to reconnect...</div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default DisconnectedPopup\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\nimport Header from './Components/Header/Header'\r\nimport Game from './Components/Game/Game'\r\nimport PlayersBrowser from './Components/PlayersBrowser/PlayersBrowser'\r\nimport LoginPage from './Components/LoginPage/LoginPage'\r\n\r\nimport io from 'socket.io-client'\r\nimport {\r\n    PLAYER_CONNECTED,\r\n    LOGOUT,\r\n    PLAYER_DISCONNECTED,\r\n    INVITATION,\r\n    GAME_STARTED,\r\n    REFRESH_PLAYERS,\r\n    INVITATION_ACCEPTED,\r\n    GAME_CREATED\r\n} from './Shared/Events'\r\nimport { isMove } from './Shared/Functions'\r\n\r\nimport { Route, withRouter, Switch } from 'react-router-dom'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport bgMusic from './Resources/Sounds/bg-lower.mp3'\r\nimport Walkthrough from './Components/Game/Walkthrough'\r\n\r\nimport InvitationModal from './Components/Modals/InvitationModal'\r\nimport DisconnectedModal from './Components/Modals/DisconnectedModal'\r\n\r\nlet developmentMode = false\r\nconst socketUrl = developmentMode\r\n    ? 'localhost:3231'\r\n    : 'ws://cardman-multiplayer.herokuapp.com:80'\r\nconst { setScore } = require('./Shared/Functions')\r\n\r\nclass Logo extends React.Component {\r\n    state = { display: true }\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({ display: false })\r\n        }, 2500)\r\n    }\r\n    render() {\r\n        if (this.state.display) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className='intro-logo'>\r\n                        <div className='text-nunito intro-1'>Cardman&nbsp;</div>\r\n                        <div className='text-nunito intro-2'>Multiplayer</div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return null\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.popupsRef = React.createRef()\r\n        this.state = {\r\n            title: 'Cardman Multiplayer',\r\n            score: null,\r\n            player: null,\r\n            socket: null,\r\n            connectedPlayers: {},\r\n            game: null,\r\n            isMove: false,\r\n            volumeSettings: {\r\n                musicVol: 0.5,\r\n                soundVol: 0.5,\r\n                muted: false\r\n            },\r\n            isDisconnected: false,\r\n            gameId: null,\r\n            isInvitationModal: false,\r\n            invitationNickname: null,\r\n            onInvitationAccept: null\r\n        }\r\n    }\r\n\r\n    config = {\r\n        disconnectedTimeoutMs: 5000,\r\n        defaultVolumeSettings: {\r\n            musicVol: 0.5,\r\n            soundVol: 0.5\r\n        }\r\n    }\r\n\r\n    isInCache = key => {\r\n        return (\r\n            localStorage.getItem(key) !== null &&\r\n            localStorage.getItem(key) !== undefined\r\n        )\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.location.pathname !== '/') {\r\n            if (this.state.player === null) {\r\n                this.props.history.push('/')\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.isInCache('cachedVolumeSettings')) {\r\n            let cachedVolumeSettings = JSON.parse(\r\n                localStorage.getItem('cachedVolumeSettings')\r\n            )\r\n            this.setState({\r\n                volumeSettings: {\r\n                    musicVol: cachedVolumeSettings.musicVol,\r\n                    soundVol: cachedVolumeSettings.soundVol\r\n                }\r\n            })\r\n        } else {\r\n            let cachedVolumeSettings = {\r\n                musicVol: this.config.defaultVolumeSettings.musicVol,\r\n                soundVol: this.config.defaultVolumeSettings.soundVol\r\n            }\r\n            localStorage.setItem(\r\n                'cachedVolumeSettings',\r\n                JSON.stringify(cachedVolumeSettings)\r\n            )\r\n        }\r\n\r\n        this.initializeSocket()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.logoutPlayer()\r\n    }\r\n\r\n    invitationHandler = ({ id = null, socketId = null }) => {\r\n        //Prevent players from inviting themselves\r\n        if (id === this.state.player.id) {\r\n            this.addPopup({\r\n                title: 'Error!',\r\n                content: 'You cannot invite yourself.'\r\n            })\r\n        } else {\r\n            const { socket } = this.state\r\n            socket.emit(INVITATION, { id, socketId })\r\n        }\r\n    }\r\n\r\n    initializeSocket = () => {\r\n        const socket = io(socketUrl)\r\n        this.setState({ socket })\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected to server.')\r\n        })\r\n\r\n        socket.on('pong', ms => {\r\n            if (ms > this.config.disconnectedTimeoutMs) {\r\n                this.setState({ isDisconnected: true })\r\n            } else {\r\n                this.setState({ isDisconnected: false })\r\n            }\r\n        })\r\n\r\n        let refreshingPlayersSockets = [\r\n            PLAYER_CONNECTED,\r\n            PLAYER_DISCONNECTED,\r\n            REFRESH_PLAYERS\r\n        ]\r\n\r\n        refreshingPlayersSockets.forEach(s => {\r\n            socket.on(s, ({ connectedPlayers }) => {\r\n                this.setState({ connectedPlayers })\r\n            })\r\n        })\r\n\r\n        socket.on(INVITATION, ({ nickname, socketId }) => {\r\n            const { socket } = this.state\r\n            this.setState({\r\n                isInvitationModal: true,\r\n                invitationNickname: nickname,\r\n                onInvitationAccept: () => {\r\n                    this.setState({ isInvitationModal: false }, () => {\r\n                        socket.emit(INVITATION_ACCEPTED, {\r\n                            fromSocketId: socketId,\r\n                            to: this.state.player\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n        })\r\n\r\n        socket.on(GAME_CREATED, ({ gameId }) => {\r\n            this.setState({ gameId }, () => {\r\n                this.props.history.push('/walkthrough')\r\n            })\r\n        })\r\n\r\n        socket.on(GAME_STARTED, ({ game }) => {\r\n            this.setGame({ game })\r\n            this.setMove(isMove({ game, player: this.state.player }))\r\n            setScore({\r\n                player: this.state.player,\r\n                game,\r\n                setTitle: this.setTitle\r\n            })\r\n        })\r\n    }\r\n\r\n    loginPlayer = player => {\r\n        const { socket } = this.state\r\n        //Sending login socket with freshly generated, previosly verified player\r\n        socket.emit(PLAYER_CONNECTED, player)\r\n        console.log(player)\r\n        this.setState({ player })\r\n\r\n        //Wait for server response, then get the player list\r\n        socket.on(PLAYER_CONNECTED, ({ connectedPlayers }) => {\r\n            this.setState({ connectedPlayers })\r\n            this.props.history.push('/browser')\r\n        })\r\n    }\r\n\r\n    logoutPlayer = () => {\r\n        //Sending logout socket and setting user to player, thus hiding all the functionalities\r\n        const { socket } = this.state\r\n        socket.emit(LOGOUT)\r\n        this.setState({ player: null })\r\n    }\r\n\r\n    setTitle = ({ title = null, score = null }) => {\r\n        this.setState({ title: title })\r\n        this.setState({ score: score })\r\n    }\r\n\r\n    setGame = ({ game }) => {\r\n        this.setState({ game }, this.props.history.push('/game'))\r\n    }\r\n\r\n    setMove = isMove => {\r\n        this.setState({ isMove })\r\n    }\r\n\r\n    setSettings = ({ soundVol, musicVol }) => {\r\n        if (this.props.location.pathname === '/game') {\r\n            musicVol = 0\r\n        }\r\n        this.setState({\r\n            volumeSettings: { soundVol: soundVol, musicVol: musicVol }\r\n        })\r\n        let cachedVolumeSettings = { musicVol: musicVol, soundVol: soundVol }\r\n        localStorage.setItem(\r\n            'cachedVolumeSettings',\r\n            JSON.stringify(cachedVolumeSettings)\r\n        )\r\n    }\r\n\r\n    muteMusic = state => {\r\n        this.setState({\r\n            volumeSettings: { ...this.state.volumeSettings, muted: state }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            socket,\r\n            player,\r\n            game,\r\n            gameId,\r\n            isMove,\r\n            connectedPlayers\r\n        } = this.state\r\n        const {\r\n            volumeSettings,\r\n            isInvitationModal,\r\n            invitationNickname,\r\n            onInvitationAccept,\r\n            title,\r\n            score,\r\n            isDisconnected\r\n        } = this.state\r\n        return (\r\n            <div className='container of-rows width-full height-full text-nunito '>\r\n                {isInvitationModal && (\r\n                    <InvitationModal\r\n                        nickname={invitationNickname}\r\n                        onAccept={onInvitationAccept}\r\n                        onClose={() =>\r\n                            this.setState({ isInvitationModal: false })\r\n                        }\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {isDisconnected && (\r\n                    <DisconnectedModal soundVolume={volumeSettings.soundVol} />\r\n                )}\r\n                <Logo />\r\n                <Header\r\n                    volumeSettings={volumeSettings}\r\n                    title={title}\r\n                    score={score}\r\n                    setSettings={this.setSettings}\r\n                />\r\n                <ReactAudioPlayer\r\n                    src={bgMusic}\r\n                    autoPlay\r\n                    volume={volumeSettings.musicVol}\r\n                    loop={true}\r\n                    muted={volumeSettings.muted}\r\n                />\r\n                <div className='row height-full width-full bg-lightgrey'>\r\n                    <Switch>\r\n                        <Route exact path='/'>\r\n                            <LoginPage\r\n                                socket={socket}\r\n                                loginPlayer={this.loginPlayer}\r\n                                setTitle={this.setTitle}\r\n                                volumeSettings={this.state.volumeSettings}\r\n                            />\r\n                        </Route>\r\n                        <Route\r\n                            path='/browser'\r\n                            render={() => (\r\n                                <PlayersBrowser\r\n                                    player={player}\r\n                                    setTitle={this.setTitle}\r\n                                    invitationHandler={this.invitationHandler}\r\n                                    connectedPlayers={connectedPlayers}\r\n                                    volumeSettings={volumeSettings}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            path='/walkthrough'\r\n                            render={() => (\r\n                                <Walkthrough\r\n                                    player={player}\r\n                                    setTitle={this.setTitle}\r\n                                    gameId={gameId}\r\n                                    muteMusic={this.muteMusic}\r\n                                    socket={socket}\r\n                                    soundVolume={volumeSettings.soundVol}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            path='/game'\r\n                            render={() => (\r\n                                <Game\r\n                                    player={player}\r\n                                    game={game}\r\n                                    muteMusic={this.muteMusic}\r\n                                    socket={socket}\r\n                                    setTitle={this.setTitle}\r\n                                    setMove={this.setMove}\r\n                                    isMove={isMove}\r\n                                    volumeSettings={volumeSettings}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(App)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n","module.exports = __webpack_public_path__ + \"static/media/popup.6f214bea.mp3\";","const isMove = ({ game, player }) => {\r\n    let nextPlayerIndex = game.nextPlayerIndex\r\n    return game.playerSockets[nextPlayerIndex].id === player.id\r\n}\r\n\r\nconst setScore = ({ player, game = null, setTitle }) => {\r\n    let me = game.playerSockets.filter(p => {\r\n        return p.socketId === player.socketId\r\n    })[0]\r\n\r\n    let enemy = game.playerSockets.filter(p => {\r\n        return p.socketId !== player.socketId\r\n    })[0]\r\n\r\n    let score = game.score\r\n\r\n    setTitle({\r\n        score: {\r\n            me: me.nickname,\r\n            myScore: score[me.socketId],\r\n            enemy: enemy.nickname,\r\n            enemyScore: score[enemy.socketId]\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = { isMove, setScore }\r\n","const Cards = {\r\n    DEFINITION_CARD: {\r\n        id: 'DEFINITION_CARD',\r\n        title: 'Definition card',\r\n        description: 'Shows you a definition of the word.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    RANDOM_CORRECT_LETTER_CARD: {\r\n        id: 'RANDOM_CORRECT_LETTER_CARD',\r\n        title: 'Random correct letter',\r\n        description: 'Chooses a random correct letter.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let randomCorrectLetter = () => {\r\n                let { word } = currentGame.word\r\n                let { guessed } = currentGame\r\n                let guessedArr = guessed.map(g => g.key.toUpperCase())\r\n                word = word.toUpperCase()\r\n                let arr = Array.from(word).filter(char => {\r\n                    return !guessedArr.includes(char)\r\n                })\r\n                let randomIndex = Math.floor(Math.random() * arr.length)\r\n                return arr[randomIndex].toUpperCase()\r\n            }\r\n\r\n            let key = randomCorrectLetter()\r\n            currentGame.guessed.push({\r\n                key,\r\n                playerSocketId: move.playerSocketId\r\n            })\r\n            let playerSocket =\r\n                currentGame.playerSockets[currentGame.nextPlayerIndex].socketId\r\n            let enemySocket =\r\n                currentGame.playerSockets[1 - currentGame.nextPlayerIndex]\r\n                    .socketId\r\n            currentGame.keys.push({\r\n                key,\r\n                playerSocketId: playerSocket\r\n            })\r\n            currentGame.keys.push({\r\n                key,\r\n                playerSocketId: enemySocket\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    ADDITIONAL_TURN_CARD: {\r\n        id: 'ADDITIONAL_TURN_CARD',\r\n        title: 'Additional letter',\r\n        description: 'You can choose two letters in a turn.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            currentGame.nextPlayerIndex = 1 - currentGame.nextPlayerIndex\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    REMOVE_ONE_UNFITTING_CARD: {\r\n        id: 'REMOVE_ONE_UNFITTING_CARD',\r\n        title: 'Remove one unfitting letter.',\r\n        description: 'Removes one unfitting letter from the current word.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let { word } = currentGame.word\r\n            let wordKeys = Array.from(word.toUpperCase())\r\n            let myKeys = []\r\n            currentGame.keys.forEach(key => {\r\n                if (key.playerSocketId === socket.user.socketId) {\r\n                    myKeys.push(key.key)\r\n                }\r\n            })\r\n            let candidates = []\r\n            for (let i = 65; i <= 90; i++) {\r\n                let letter = String.fromCharCode(i).toUpperCase()\r\n                if (!wordKeys.includes(letter) && !myKeys.includes(letter)) {\r\n                    candidates.push(letter)\r\n                }\r\n            }\r\n            currentGame.keys.push({\r\n                key: candidates[Math.floor(Math.random() * candidates.length)],\r\n                playerSocketId: socket.user.socketId\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    REMOVE_TWO_UNFITTING_CARD: {\r\n        id: 'REMOVE_TWO_UNFITTING_CARD',\r\n        title: 'Remove two unfitting letters.',\r\n        description: 'Removes two unfitting letters from the current word.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            currentGame = Cards.REMOVE_ONE_UNFITTING_CARD.use({\r\n                currentGame,\r\n                socket,\r\n                move\r\n            })\r\n            currentGame = Cards.REMOVE_ONE_UNFITTING_CARD.use({\r\n                currentGame,\r\n                socket,\r\n                move\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    BLOCK_CARD: {\r\n        id: 'BLOCK_CARD',\r\n        title: 'Block enemy cards for 2 turns.',\r\n        description: `<span>\r\n                <b>Blocks enemy cards for 2 turns.</b>\r\n            </span>\r\n            <span>\r\n                You can't block an already blocked player.<u>don't</u> add up.<br>\r\n                These values <u>don't</u> add up.\r\n            </span>`,\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n            if (currentGame.blockCounters[enemySocket] === 0)\r\n                currentGame.blockCounters[enemySocket] = 2\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: (game, player) => {\r\n            let enemySocket = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            if (game.blockCounters[enemySocket] === 0) return true\r\n            return false\r\n        }\r\n    },\r\n    IMMUNE_TO_BLOCK_CARD: {\r\n        id: 'IMMUNE_TO_BLOCK_CARD',\r\n        title: 'Immune to block.',\r\n        description: `<span>\r\n                <b>Immune to blocking cards for 2 turns.</b>\r\n            </span>\r\n            <span>\r\n                These values <u>do</u> add up.\r\n            </span>`,\r\n        use: ({ currentGame, socket, move }) => {\r\n            let mySocket = move.playerSocketId\r\n            let blockCounters = currentGame.blockCounters[mySocket]\r\n            currentGame.blockCounters[mySocket] = blockCounters - 2\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    LOOK_UP_CARD: {\r\n        id: 'LOOK_UP_CARD',\r\n        title: 'Look up enemy card',\r\n        description:\r\n            'You can look up one of the enemies cards only if they have any.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: (game, player) => {\r\n            let enemySocket = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            if (game.cards[enemySocket].length === 0) return false\r\n            return true\r\n        }\r\n    },\r\n    SWAP_RANDOM_CARDS: {\r\n        id: 'SWAP_RANDOM_CARDS',\r\n        title: 'Swap with opponent.',\r\n        description: `<span>\r\n                <b>Swap your card for a random opponents card.</b>\r\n            </span>\r\n            <span>\r\n                You must have a card besides this one in the deck. Your\r\n                opponent has to have at least 1 card.\r\n            </span>`,\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n            let enemyCards = currentGame.cards[enemySocket]\r\n            let myCards = currentGame.cards[move.playerSocketId]\r\n\r\n            let randomIndexOfMine = Math.floor(Math.random() * myCards.length)\r\n            let randomIndexOfOpponent = null\r\n            let isSwap = true\r\n            while (isSwap) {\r\n                randomIndexOfOpponent = Math.floor(\r\n                    Math.random() * enemyCards.length\r\n                )\r\n                if (\r\n                    enemyCards[randomIndexOfOpponent].id !==\r\n                    Cards.SWAP_RANDOM_CARDS.id\r\n                ) {\r\n                    isSwap = false\r\n                }\r\n            }\r\n\r\n            let doOtherCardsExist = false\r\n            for (let i = 0; i < myCards.length; i++) {\r\n                if (myCards[i].id !== Cards.SWAP_RANDOM_CARDS.id) {\r\n                    doOtherCardsExist = true\r\n                    break\r\n                }\r\n            }\r\n\r\n            if (enemyCards.length >= 1 && !doOtherCardsExist) {\r\n                let a = myCards[randomIndexOfMine]\r\n                enemyCards[randomIndexOfOpponent] = a\r\n                myCards[randomIndexOfMine] = enemyCards[randomIndexOfOpponent]\r\n                currentGame.cards[enemySocket] = enemyCards\r\n                currentGame.cards[move.playerSocketId] = myCards\r\n            }\r\n\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: (game, player) => {\r\n            let cards = game.cards\r\n            let mySocketId = player.socketId\r\n            let myCards = cards[mySocketId]\r\n            let enemySocketId = game.playerSockets.filter(x => {\r\n                return x.socketId !== player.socketId\r\n            })[0].socketId\r\n            let enemyCards = cards[enemySocketId]\r\n\r\n            let doOtherCardsExist = false\r\n            for (let i = 0; i < myCards.length; i++) {\r\n                if (myCards[i].id !== Cards.SWAP_RANDOM_CARDS.id) {\r\n                    doOtherCardsExist = true\r\n                    break\r\n                }\r\n            }\r\n\r\n            if (doOtherCardsExist === false) return false\r\n            if (enemyCards.length === 0) return false\r\n            return true\r\n        }\r\n    },\r\n    RANDOMIZE_YOURSELF_CARD: {\r\n        id: 'RANDOMIZE_YOURSELF_CARD',\r\n        title: 'Randomize a card',\r\n        description: 'A random card of yours gets changed.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let getRandomCard = (exception = null) => {\r\n                let excluded = ['RANDOMIZE_YOURSELF_CARD', exception]\r\n                let included = Object.values(Cards).filter(\r\n                    card => !excluded.includes(card.id)\r\n                )\r\n                let randomIndex = Math.floor(Math.random() * included.length)\r\n                return included[randomIndex]\r\n            }\r\n            currentGame.cards[move.playerSocketId].push(getRandomCard())\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    RANDOMIZE_ENEMY_CARD: {\r\n        id: 'RANDOMIZE_ENEMY_CARD',\r\n        title: 'Randomize an enemies card',\r\n        description: 'A random card of your opponent gets changed.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n\r\n            let getRandomCard = (exception = null) => {\r\n                let excluded = ['RANDOMIZE_YOURSELF_CARD', exception]\r\n                let included = Object.values(Cards).filter(\r\n                    card => !excluded.includes(card.id)\r\n                )\r\n                let randomIndex = Math.floor(Math.random() * included.length)\r\n                return included[randomIndex]\r\n            }\r\n            let enemyCardAmount = currentGame.cards[enemySocket].length\r\n            let randomIndex = Math.floor(Math.random() * enemyCardAmount)\r\n            if (enemyCardAmount > 0) {\r\n                currentGame.cards[enemySocket][randomIndex] = getRandomCard()\r\n            }\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    }\r\n}\r\n\r\nconst getCard = card => {\r\n    return Cards[card]\r\n}\r\n\r\nconst getRandomCard = () => {\r\n    let randomIndex = Math.floor(Math.random() * Object.keys(Cards).length)\r\n    let randomKey = Object.keys(Cards)[randomIndex]\r\n    return Cards[randomKey]\r\n}\r\n\r\nconst generateCards = amount => {\r\n    let result = []\r\n    let isAdditionalTurnGenerated = false\r\n    for (let i = 0; i < amount; i++) {\r\n        let card = getRandomCard()\r\n        if (card.id === Cards.ADDITIONAL_TURN_CARD.id) {\r\n            if (isAdditionalTurnGenerated) {\r\n                i = i - 1\r\n            } else {\r\n                isAdditionalTurnGenerated = true\r\n                result.push(card)\r\n            }\r\n        } else {\r\n            result.push(card)\r\n        }\r\n    }\r\n    return result\r\n}\r\n\r\nconst resupplyCards = game => {\r\n    let { cards } = game\r\n    for (let i = 0; i < Object.keys(cards).length; i++) {\r\n        let player = Object.keys(cards)[i]\r\n        let newCards = cards[player]\r\n        if (newCards.length < 3) {\r\n            newCards.push(getRandomCard())\r\n        }\r\n        cards[player] = newCards\r\n    }\r\n    return cards\r\n}\r\n\r\nmodule.exports = {\r\n    getRandomCard,\r\n    generateCards,\r\n    Cards,\r\n    getCard,\r\n    resupplyCards\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/card_flip.63e37b8e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip2.e1b8fb14.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_drop.f8713f77.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip3.dff27e09.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button_click.923d6dfa.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bg-lower.b0652969.mp3\";","module.exports = {\r\n    PLAYER_CONNECTED: 'PLAYER_CONNECTED',\r\n    PLAYER_DISCONNECTED: 'PLAYER_DISCONNECTED',\r\n    VERIFY_USER: 'VERIFY_USER',\r\n    LOGOUT: 'LOGOUT',\r\n    INVITATION: 'INVITATION',\r\n    INVITATION_ACCEPTED: 'INVITATION_ACCEPTED',\r\n    GAME_STARTED: 'GAME_STARTED',\r\n    GAME_MOVE: 'GAME_MOVE',\r\n    WIN: 'WIN',\r\n    REFRESH_PLAYERS: 'REFRESH_PLAYERS',\r\n    GAME_CREATED: 'GAME_CREATED',\r\n    WALKTHROUGH_READY: 'WALKTHROUGH_READY'\r\n}\r\n","const roundAndConvertVolume = volume => {\r\n    return Math.round((10 * parseInt(volume)) / 100) / 10\r\n}\r\n\r\nmodule.exports = { roundAndConvertVolume }\r\n","const Result = {\r\n    GAME_TIE: 'GAME_TIE',\r\n    TURN_WIN: 'TURN_WIN',\r\n    TURN_TIE: 'TURN_TIE',\r\n    GAME_WIN: 'GAME_WIN',\r\n    NOTHING: 'NOTHING'\r\n}\r\n\r\nmodule.exports = {\r\n    Result\r\n}\r\n"],"sourceRoot":""}