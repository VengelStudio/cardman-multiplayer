{"version":3,"sources":["config.js","Components/Intro/Intro.jsx","Components/Header/HeaderBar.jsx","Components/Header/Settings.jsx","Components/Header/Header.jsx","Components/Game/Cards/Card.jsx","Components/Game/Cards/Cards.jsx","Components/Game/Key.jsx","Components/Game/Keyboard.jsx","Components/Game/Timer.jsx","Components/Game/GameInfo.jsx","Components/Game/Content.jsx","Components/Modals/GenericModal.jsx","Components/Modals/CardModal.jsx","Components/Game/Game.jsx","Components/PlayersBrowser/BrowserEntry.jsx","Components/PlayersBrowser/Functions.js","Components/PlayersBrowser/PlayersBrowser.jsx","Components/LoginPage/LoginPage.jsx","Components/Game/Walkthrough.jsx","Components/Modals/InvitationModal.jsx","Components/Modals/DisconnectedModal.jsx","App.jsx","index.js","Resources/Sounds/popup.mp3","Shared/Functions.js","Game/Cards/Cards.js","Resources/Sounds/card_drop.mp3","Resources/Sounds/card_flip.mp3","Resources/Sounds/card_flip2.mp3","Resources/Sounds/card_flip3.mp3","Resources/Sounds/button_click.mp3","Resources/Sounds/turn_end.mp3","Resources/Sounds/bg-lower.mp3","Shared/Events.js","Components/Header/Functions.js","Shared/Enums.js"],"names":["module","exports","defaultVolumeSettings","musicVol","soundVol","disconnectedTimeoutMs","Intro","state","display","_this2","this","setTimeout","setState","react_default","a","createElement","Fragment","className","React","Component","HeaderBar","_ref","_ref$title","title","_ref$score","score","me","concat","myScore","enemyScore","enemy","roundAndConvertVolume","require","Settings","onChange","e","target","id","_this","props","setSettings","value","volumeSettings","react_icons_kit_default","icon","cog","size","volume_2","type","min","max","note","Header","Header_Settings","Header_HeaderBar","location","pathname","Object","objectSpread","withRouter","CardContent","description","cardBehaviour","isMine","isUsed","isDisabled","isBlocked","isDiscardEnabled","classes","descriptionComponent","src","alt","CardOverlay","_ref2","onUseAbort","onDiscard","onUse","disabledText","overlay","onClick","fontSize","length","style","Card","_this$props","card","Card_CardContent","Card_CardOverlay","CardsData","Cards","CardsSpawner","cards","areMyCards","player","game","cardMoves","isMove","onCardUse","blockCounter","blockCounters","socketId","resultCards","map","index","cardData","some","move","discarded","data","cardId","doesMeetConditions","key","Cards_Card","isTooltipOpenable","areMine","cardStyle","animation","wrapperTitle","Cards_CardsSpawner","Key","isSelected","letter","keyClickHandler","backgroundColor","textDecoration","borderWidth","borderStyle","borderColor","Keyboard","generateKeys","result","_loop","i","String","fromCharCode","toUpperCase","myKeys","keys","filter","playerSocketId","includes","keyMove","push","Game_Key","onKeyMove","Timer","timeInterval","time","wrapperStyle","circleStyle","propsStyle","setInterval","prevState","clearInterval","onEnd","r","cx","cy","Chains","getSide","side","Shield","GameInfo","getIcon","GameInfo_Chains","GameInfo_Shield","getPlayerState","playerSockets","getGuessedCounter","_this$props2","counter","myGuessed","guessed","console","log","forEach","word","toLowerCase","marginBottom","EndTurnButton","text","disabled","Content","colorDisplayWord","Array","from","g","color","onMoveTimeout","onEndTurn","Game_GameInfo","Game_Timer","displayWord","x","Content_EndTurnButton","Game_Keyboard","GenericModal","onClose","content","soundVolume","ReactDOM","createPortal","bundle_default","volume","popupSound","autoPlay","react_icons_kit","cross","document","body","CardModal","setScore","GAME_MOVE","WIN","Result","Game","gameFromProps","allowMove","soundSrc","guessedWordModal","isTieModal","gameEndWinnerModal","wordDefinition","isMoveModal","isPeekModal","peekCardId","peekDescription","myCards","enemyCards","initializeSocket","socket","on","moveBool","setMove","playSound","turnEndSound","winner","setTitle","returnState","TURN_WIN","TURN_TIE","GAME_WIN","nickname","onMove","flipSound3","_this$state","DEFINITION_CARD","definitions","randomIndex","Math","floor","random","LOOK_UP_CARD","enemySocket","randomIndexOfCard","randomEnemyCard","moves","toConsumableArray","emit","flipSound2","buttonClick","clearKeyMove","clickedIndex","cardMove","flipSound1","newMove","discardSound","event","isDown","mySocketId","myBlocked","keyCode","muteMusic","addEventListener","ctrlPressHandler","_this3","removeEventListener","_this4","my","gameCards","enemySocketId","Modals_GenericModal","Modals_CardModal","history","onEnded","Game_Cards_Cards","Components_Game_Content","BrowserEntry","isButtonDisabled","isTimeoutModal","clickHandler","preventDefault","invitationHandler","_isMounted","extractBrowserPlayers","connectedPlayers","assign","values","isInGame","PlayersBrowser_BrowserEntry","indexOf","PlayersBrowser","playersInBrowser","searchedPlayer","searchPlayer","input","players","item","SearchedPlayer","placeholder","dist_default","width","height","entry","LoginPage","inputRef","createRef","isNameLengthOpen","isNameSpaceOpen","isNameTakenOpen","isAlreadyLoggedInOpen","loginHandler","current","VERIFY_USER","isTaken","isIpFree","loginPlayer","submitOnEnter","which","ref","maxLength","onKeyDown","Description","buttonClass","onReady","Walkthrough","isClicked","WALKTHROUGH_READY","gameId","Walkthrough_Description","InvitationModal","onAccept","DisconnectedPopup","socketUrl","process","trim","getSavedVolume","localStorage","getItem","undefined","cachedVolumeSettings","JSON","parse","setItem","stringify","App","popupsRef","muted","isDisconnected","isInvitationModal","invitationNickname","onInvitationAccept","_ref$id","_ref$socketId","addPopup","INVITATION","io","ms","PLAYER_CONNECTED","PLAYER_DISCONNECTED","REFRESH_PLAYERS","s","_ref3","INVITATION_ACCEPTED","fromSocketId","to","GAME_CREATED","_ref4","GAME_STARTED","_ref5","setGame","_ref6","logoutPlayer","LOGOUT","_ref7","_ref7$title","_ref7$score","_ref8","_ref9","Modals_InvitationModal","DisconnectedModal","Components_Intro_Intro","Components_Header_Header","bgMusic","loop","Switch","Route","exact","path","Components_LoginPage_LoginPage","render","Components_PlayersBrowser_PlayersBrowser","Components_Game_Walkthrough","Components_Game_Game","BrowserRouter","src_App_0","getElementById","__webpack_require__","p","nextPlayerIndex","find","use","currentGame","findIndex","RANDOM_CORRECT_LETTER_CARD","guessedArr","arr","char","randomCorrectLetter","playerSocket","ADDITIONAL_TURN_CARD","REMOVE_ONE_UNFITTING_CARD","wordKeys","user","candidates","REMOVE_TWO_UNFITTING_CARD","_ref10","BLOCK_CARD","_ref11","_ref12","IMMUNE_TO_BLOCK_CARD","_ref13","mySocket","_ref14","_ref15","_ref16","SWAP_RANDOM_CARDS","_ref17","getEnemySocketId","myRandomIndex","enemyRandomIndex","randomMyCard","_ref18","c","RANDOMIZE_YOURSELF_CARD","_ref19","excluded","arguments","included","getRandomCard","_ref20","RANDOMIZE_ENEMY_CARD","_ref21","enemyCardAmount","_ref22","randomKey","generateCards","amount","isAdditionalTurnGenerated","getCard","resupplyCards","newCards","round","parseInt","GAME_TIE","NOTHING"],"mappings":"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","file":"static/js/main.8b1d7810.chunk.js","sourcesContent":["const disconnectedTimeoutMs = 5000\r\n\r\nconst defaultVolumeSettings = {\r\n    musicVol: 0.5,\r\n    soundVol: 0.5\r\n}\r\n\r\nmodule.exports = { defaultVolumeSettings, disconnectedTimeoutMs }\r\n","import React from 'react'\r\nimport '../../App.css'\r\n\r\nclass Intro extends React.Component {\r\n    state = { display: true }\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({ display: false })\r\n        }, 2500)\r\n    }\r\n    render() {\r\n        if (this.state.display) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className='intro-logo'>\r\n                        <div className='text-nunito intro-1'>Cardman&nbsp;</div>\r\n                        <div className='text-nunito intro-2'>Multiplayer</div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Intro\r\n","import React from 'react'\r\n\r\nconst HeaderBar = ({ title = null, score = null }) => {\r\n    return (\r\n        <div className='column auto has-background-dark header'>\r\n            {score && (\r\n                <div className='title has-text-white-ter'>\r\n                    <div className='scoreHeader'>\r\n                        <div className='flex-item me'>\r\n                            <span>{score.me}</span>\r\n                        </div>\r\n                        <div className='flex-item score'>\r\n                            <span>{`${score.myScore}:${\r\n                                score.enemyScore\r\n                            }`}</span>\r\n                        </div>\r\n                        <div className='flex-item enemy'>\r\n                            <span>{score.enemy}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {title && <div className='title has-text-white-ter'>{title}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderBar\r\n","import React, { Component } from 'react'\r\nimport Icon from 'react-icons-kit'\r\nimport { volume_2 } from 'react-icons-kit/ikons/volume_2'\r\nimport { note } from 'react-icons-kit/entypo/note'\r\nimport { cog } from 'react-icons-kit/fa/cog'\r\n\r\nconst { roundAndConvertVolume } = require('./Functions')\r\n\r\nclass Settings extends Component {\r\n    onChange = e => {\r\n        if (e.target.id === 'sound-slider-thumb') {\r\n            this.props.setSettings({\r\n                soundVol: roundAndConvertVolume(e.target.value),\r\n                musicVol: this.props.volumeSettings.musicVol\r\n            })\r\n        } else if (e.target.id === 'music-slider-thumb') {\r\n            this.props.setSettings({\r\n                soundVol: this.props.volumeSettings.soundVol,\r\n                musicVol: roundAndConvertVolume(e.target.value)\r\n            })\r\n        }\r\n    }\r\n\r\n    //todo wobbles when gear rotates\r\n    //playersbrowser nth child even && odd\r\n\r\n    render() {\r\n        let soundVol = this.props.volumeSettings.soundVol * 100\r\n        let musicVol = this.props.volumeSettings.musicVol * 100\r\n        return (\r\n            <div className='options-btn'>\r\n                <div className='gear-icon-wrapper'>\r\n                    <Icon icon={cog} size={'5.5vh'} className='gear-icon' />\r\n                </div>\r\n                <div className='dropdown-options border-neon border-neon-translucent'>\r\n                    <div className='settings-wrapper'>\r\n                        <div className='options-items'>\r\n                            <div className='options-item'>\r\n                                <Icon\r\n                                    className='options-icon'\r\n                                    icon={volume_2}\r\n                                    size={32}\r\n                                />\r\n                                <span className='options-item-description'>{`Sound volume: ${soundVol}%`}</span>\r\n                                <div className='slider-wrapper input-neon border-neon border-neon-violet'>\r\n                                    <input\r\n                                        type='range'\r\n                                        min='0'\r\n                                        max='100'\r\n                                        id='sound-slider-thumb'\r\n                                        className='options-slider slider'\r\n                                        value={soundVol}\r\n                                        onChange={e => this.onChange(e)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className='options-item'>\r\n                                <Icon\r\n                                    className='options-icon'\r\n                                    icon={note}\r\n                                    size={32}\r\n                                />\r\n                                <span className='options-item-description'>{`Music volume: ${musicVol}%`}</span>\r\n                                <div className='slider-wrapper input-neon border-neon border-neon-violet'>\r\n                                    <input\r\n                                        type='range'\r\n                                        min='0'\r\n                                        max='100'\r\n                                        id='music-slider-thumb'\r\n                                        className='options-slider slider'\r\n                                        value={musicVol}\r\n                                        onChange={e => this.onChange(e)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Settings\r\n","import React, { Component } from 'react'\r\nimport HeaderBar from './HeaderBar'\r\nimport Settings from './Settings'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './Header.css'\r\n\r\nclass Header extends Component {\r\n    state = { volumeSettings: this.props.volumeSettings }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.location.pathname === '/game') {\r\n            return {\r\n                volumeSettings: { ...props.volumeSettings, musicVol: 0 }\r\n            }\r\n        }\r\n        return { volumeSettings: props.volumeSettings }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='row header width-full semi-bold bg-dark color-lightblue padding-sm height-sm text-lg content-hcenter content-vcenter'>\r\n                <Settings\r\n                    volumeSettings={this.state.volumeSettings}\r\n                    setSettings={this.props.setSettings}\r\n                />\r\n                <HeaderBar title={this.props.title} score={this.props.score} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Header)\r\n","import React, { Component } from 'react'\r\nimport './Cards.css'\r\n\r\nconst CardContent = ({ id, description, cardBehaviour }) => {\r\n    let {\r\n        isMine,\r\n        isUsed,\r\n        isDisabled,\r\n        isBlocked,\r\n        isDiscardEnabled\r\n    } = cardBehaviour\r\n    let classes = 'card-image '\r\n    if (isUsed || isDisabled || isBlocked || isDiscardEnabled)\r\n        classes += 'card-image-used '\r\n\r\n    if (isMine) {\r\n        let descriptionComponent = isUsed ? (\r\n            <div className='card-info'>{description}</div>\r\n        ) : null\r\n        return (\r\n            <React.Fragment>\r\n                <img\r\n                    className={classes}\r\n                    src={`images/cards/${id}.svg`}\r\n                    alt='Playing card.'\r\n                />\r\n                {descriptionComponent}\r\n            </React.Fragment>\r\n        )\r\n    } else {\r\n        return (\r\n            <img\r\n                className={`${classes} default-pointer`}\r\n                src={`images/cards/placeholder.svg`}\r\n                alt='Playing card.'\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst CardOverlay = ({\r\n    cardBehaviour,\r\n    onUseAbort,\r\n    onDiscard,\r\n    onUse,\r\n    disabledText\r\n}) => {\r\n    let { isUsed, isDisabled, isBlocked, isDiscardEnabled } = cardBehaviour\r\n    let overlay = null\r\n    if (isDiscardEnabled) {\r\n        overlay = (\r\n            <button\r\n                className='card-discard-button'\r\n                onClick={() => {\r\n                    onDiscard()\r\n                }}\r\n            >\r\n                <div>Click to discard</div>\r\n            </button>\r\n        )\r\n    } else if (isUsed) {\r\n        overlay = (\r\n            <button\r\n                className='card-use-abort-button'\r\n                onClick={() => {\r\n                    onUseAbort()\r\n                }}\r\n            >\r\n                <div>Click to abort</div>\r\n            </button>\r\n        )\r\n    } else if (isDisabled) {\r\n        let fontSize = '1.4vw'\r\n        if (disabledText.length > 76) fontSize = '1.2vw'\r\n        overlay = (\r\n            <div className='card-disabled-info' style={{ fontSize }}>\r\n                {disabledText}\r\n            </div>\r\n        )\r\n    } else if (isBlocked) {\r\n        overlay = (\r\n            <div className='card-disabled-info'>Your cards are blocked.</div>\r\n        )\r\n    } else {\r\n        overlay = <button className='card-use-button' onClick={onUse} />\r\n    }\r\n    return <div className='card-overlay'>{overlay}</div>\r\n}\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        let {\r\n            cardBehaviour,\r\n            card,\r\n            onUseAbort,\r\n            onDiscard,\r\n            onUse,\r\n            isMine\r\n        } = this.props\r\n        let classes = 'card '\r\n        if (isMine) classes += 'hover-pointer'\r\n        return (\r\n            <div className={classes}>\r\n                <CardContent\r\n                    id={card.id}\r\n                    description={card.description}\r\n                    cardBehaviour={cardBehaviour}\r\n                />\r\n                <CardOverlay\r\n                    cardBehaviour={cardBehaviour}\r\n                    onUse={onUse}\r\n                    onUseAbort={onUseAbort}\r\n                    onDiscard={onDiscard}\r\n                    disabledText={card.disabledText}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\r\nimport Card from './Card'\r\nimport './Cards.css'\r\nconst { Cards: CardsData } = require('../../../Game/Cards/Cards')\r\n\r\nconst CardsSpawner = props => {\r\n    let {\r\n        cards,\r\n        areMyCards,\r\n        isDiscardEnabled,\r\n        player,\r\n        game,\r\n        cardMoves,\r\n        isMove,\r\n        onDiscard,\r\n        onUseAbort,\r\n        onCardUse\r\n    } = props\r\n    let blockCounter = 0\r\n    if (game !== null) blockCounter = game.blockCounters[player.socketId]\r\n    let resultCards = null\r\n    if (cards !== null) {\r\n        resultCards = cards.map((card, index) => {\r\n            let cardData = CardsData[card.id]\r\n\r\n            let cardBehaviour = {\r\n                isMine: false\r\n            }\r\n            if (areMyCards) {\r\n                //todo cardMoves\r\n                let isUsed = cardMoves.some(move => {\r\n                    return move.discarded === false && move.index === index\r\n                })\r\n                let data = { cardId: card.id, index }\r\n                let isBlocked = false\r\n                if (blockCounter > 0 && blockCounter <= 2) {\r\n                    isBlocked = true\r\n                }\r\n\r\n                cardBehaviour = {\r\n                    isMine: true,\r\n                    isUsed,\r\n                    isDiscardEnabled,\r\n                    isBlocked,\r\n                    isDisabled: !cardData.doesMeetConditions({\r\n                        game,\r\n                        player,\r\n                        index\r\n                    })\r\n                }\r\n\r\n                return (\r\n                    <li key={index}>\r\n                        <Card\r\n                            index={index}\r\n                            card={card}\r\n                            cardBehaviour={cardBehaviour}\r\n                            onUse={() => {\r\n                                isMove && onCardUse(data)\r\n                            }}\r\n                            onUseAbort={() => {\r\n                                onUseAbort(index)\r\n                            }}\r\n                            onDiscard={() => {\r\n                                isMove && onDiscard(index, card.id)\r\n                            }}\r\n                        />\r\n                    </li>\r\n                )\r\n            } else {\r\n                return (\r\n                    <li key={index}>\r\n                        <Card card={card} cardBehaviour={cardBehaviour} />\r\n                    </li>\r\n                )\r\n            }\r\n        })\r\n    }\r\n    return <ul>{resultCards}</ul>\r\n}\r\n\r\nclass Cards extends Component {\r\n    state = { isTooltipOpenable: this.props.areMine }\r\n\r\n    onUse = data => {\r\n        if (this.props.areMyCards) this.props.onCardUse(data)\r\n    }\r\n\r\n    render() {\r\n        let { areMyCards, isMove } = this.props\r\n\r\n        let cardStyle = null\r\n        if ((areMyCards && isMove) || (!areMyCards && !isMove))\r\n            cardStyle = {\r\n                animation:\r\n                    'moveFlashing 400ms linear infinite alternate-reverse forwards'\r\n            }\r\n\r\n        let wrapperTitle = areMyCards ? 'Your cards:' : 'Enemy cards:'\r\n\r\n        return (\r\n            <div className='cards' style={cardStyle}>\r\n                <span className='cards-title'>{wrapperTitle}</span>\r\n                <div className='cards-wrapper'>\r\n                    <CardsSpawner {...this.props} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards\r\n","import React, { Component } from 'react'\r\n\r\nclass Key extends Component {\r\n    render() {\r\n        let { isUsed, isSelected, letter, keyClickHandler } = this.props\r\n        let style = { backgroundColor: '#519C3F' }\r\n        if (isUsed) style = { backgroundColor: '#555', textDecoration: 'none' }\r\n        if (isSelected)\r\n            style = {\r\n                ...style,\r\n                borderWidth: '0.3vh',\r\n                borderStyle: 'solid',\r\n                borderColor: 'orange'\r\n            }\r\n        return (\r\n            <button\r\n                style={style}\r\n                onClick={() => {\r\n                    keyClickHandler()\r\n                }}\r\n                className='key'\r\n            >\r\n                {letter}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Key\r\n","import React, { Component } from 'react'\r\nimport Key from './Key'\r\n\r\nclass Keyboard extends Component {\r\n    generateKeys = () => {\r\n        let result = []\r\n        for (let i = 65; i <= 90; i++) {\r\n            let letter = String.fromCharCode(i).toUpperCase()\r\n            let myKeys = this.props.keys.filter(\r\n                key => key.playerSocketId === this.props.player.socketId\r\n            )\r\n            myKeys = myKeys.map(key => {\r\n                return key.key\r\n            })\r\n\r\n            let isUsed = myKeys.includes(letter)\r\n            let isSelected = false\r\n            if (this.props.keyMove !== null) {\r\n                if (this.props.keyMove.key === letter) {\r\n                    isSelected = true\r\n                }\r\n            }\r\n\r\n            let keyClickHandler = () => {\r\n                let move = {\r\n                    type: 'key',\r\n                    key: letter,\r\n                    playerSocketId: this.props.player.socketId\r\n                }\r\n                if (isSelected === false) {\r\n                    this.props.onKeyMove(move)\r\n                } else {\r\n                    this.props.onKeyMove(null)\r\n                }\r\n            }\r\n\r\n            result.push(\r\n                <Key\r\n                    key={i}\r\n                    keyClickHandler={keyClickHandler}\r\n                    player={this.props.player}\r\n                    letter={letter}\r\n                    isUsed={isUsed}\r\n                    isSelected={isSelected}\r\n                />\r\n            )\r\n        }\r\n        return result\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='keyboard border-neon border-light-translucent'>\r\n                {this.generateKeys().map(key => {\r\n                    return key\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Keyboard\r\n","import React, { Component } from 'react'\r\n\r\nclass Timer extends Component {\r\n    timeInterval = null\r\n    state = {\r\n        time: this.props.time,\r\n        wrapperStyle: {},\r\n        circleStyle: {\r\n            animation: `countdown ${this.props.time}s linear 1 forwards`\r\n        },\r\n        propsStyle: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timeInterval = setInterval(() => {\r\n            this.setState(\r\n                prevState => ({ time: prevState.time - 1 }),\r\n                () => {\r\n                    if (this.state.time === 0) {\r\n                        clearInterval(this.timeInterval)\r\n                        this.props.onEnd && this.props.onEnd() //execute only if there is a callback provided\r\n                        this.setState({\r\n                            style: { display: 'none', ...this.state.style }\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timeInterval)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.state.wrapperStyle} className='timer'>\r\n                <div id='timer-number'>{this.state.time}</div>\r\n                <svg className='timer-svg'>\r\n                    <circle\r\n                        style={this.state.circleStyle}\r\n                        r='18'\r\n                        cx='20'\r\n                        cy='20'\r\n                    />\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer\r\n","import React, { Component } from 'react'\r\n\r\nconst Chains = props => {\r\n    let getSide = props.side\r\n    return (\r\n        <div className={'state-chains ' + getSide}>\r\n            <span>{`Cards blocked for ${props.state} turns.`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Shield = props => {\r\n    let getSide = props.side\r\n    let state = props.state * -1\r\n    return (\r\n        <div className={'state-shield ' + getSide}>\r\n            <span>{`Immune to block cards for ${state} turns.`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass GameInfo extends Component {\r\n    getIcon = (state, side) => {\r\n        if (state > 0) return <Chains state={state} side={side} />\r\n        else if (state < 0) return <Shield state={state} side={side} />\r\n        else return null\r\n    }\r\n\r\n    getPlayerState = me => {\r\n        let { game, player } = this.props\r\n        if (player === null || game === null) return null\r\n        if (me) {\r\n            return this.getIcon(game.blockCounters[player.socketId], 'left-1vh')\r\n        } else {\r\n            let socketId = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            return this.getIcon(game.blockCounters[socketId], 'right-1vh')\r\n        }\r\n    }\r\n\r\n    getGuessedCounter = () => {\r\n        let { game, player } = this.props\r\n        let counter = 0\r\n\r\n        if (player !== null && game !== null) {\r\n            let { socketId } = player\r\n            let myGuessed = game.guessed.filter(e => { return (e.playerSocketId === socketId && e.key !== \"\") })\r\n            console.log(myGuessed)\r\n            myGuessed.forEach(letter => {\r\n                if (game.word.word.includes(letter.key.toLowerCase())) counter++\r\n            });\r\n        }\r\n        return counter\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className='player-state'>\r\n                    {this.getPlayerState(true)}\r\n                    {this.getPlayerState(false)}\r\n                </div>\r\n                <div style={{ fontSize: '4vh', marginBottom: '-4vh' }}>\r\n                    <p>{`Guessed letters: ${this.getGuessedCounter()}`}</p>\r\n                </div>\r\n            </React.Fragment >\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameInfo\r\n","import React, { Component } from 'react'\r\nimport Keyboard from './Keyboard'\r\nimport Timer from './Timer'\r\nimport GameInfo from './GameInfo'\r\nimport './Content.css'\r\n\r\nconst EndTurnButton = props => {\r\n    let { isMove, onClick } = props\r\n    let text = 'Waiting...'\r\n    let classes =\r\n        'end-turn-btn button-pointer border-neon border-light-translucent '\r\n    if (isMove) {\r\n        classes += 'end-turn-btn-hover'\r\n        text = 'End turn'\r\n    } else {\r\n        classes += 'end-turn-btn-waiting '\r\n    }\r\n\r\n    return (\r\n        <button onClick={onClick} disabled={!isMove} className={classes}>\r\n            {text}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Content extends Component {\r\n    colorDisplayWord = word => {\r\n        word = word.toUpperCase()\r\n        let result = []\r\n        let { guessed } = this.props.game\r\n        let { socketId } = this.props.player\r\n        Array.from(word).forEach((letter, i) => {\r\n            let style = null\r\n            if (letter !== '_' && letter !== ' ') {\r\n                let key = guessed.filter(g => {\r\n                    return g.key === letter\r\n                })[0]\r\n                if (key.playerSocketId === socketId) {\r\n                    style = { color: '#0900ff' }\r\n                } else {\r\n                    style = { color: '#b92e34' }\r\n                }\r\n            }\r\n            result.push(\r\n                <span key={i} style={style}>\r\n                    {letter}\r\n                </span>\r\n            )\r\n        })\r\n        return result\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            onMoveTimeout,\r\n            isMove,\r\n            game,\r\n            player,\r\n            onKeyMove,\r\n            keyMove,\r\n            onEndTurn\r\n        } = this.props\r\n\r\n        let wordClass = 'word border-neon border-neon-violet '\r\n        return (\r\n            <div className='content'>\r\n                <GameInfo player={player} game={game} />\r\n                <div className='timer-wrapper'>\r\n                    {isMove && <Timer time={30} onEnd={onMoveTimeout} />}\r\n                </div>\r\n                <div className='game'>\r\n                    <div className={wordClass}>\r\n                        {game &&\r\n                            this.colorDisplayWord(game.displayWord).map(x => {\r\n                                return x\r\n                            })}\r\n                    </div>\r\n                    <EndTurnButton isMove={isMove} onClick={onEndTurn} />\r\n                    <div className='keyboard-wrapper'>\r\n                        {game && (\r\n                            <Keyboard\r\n                                player={player}\r\n                                keys={game.keys}\r\n                                keyMove={keyMove}\r\n                                onKeyMove={onKeyMove}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Content\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst GenericModal = props => {\r\n    let { onClose, title, content, soundVolume } = props\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n                <div className='generic-popup-title'>\r\n                    <span>{title}</span>\r\n                    <button onClick={onClose} className='btn-popup-close'>\r\n                        <Icon\r\n                            icon={cross}\r\n                            size='1.6vh'\r\n                            className='close-icon'\r\n                        />\r\n                    </button>\r\n                </div>\r\n                <div className='generic-popup-content'>{content}</div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default GenericModal\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst CardModal = props => {\r\n    let { cardId, description, onClose, soundVolume } = props\r\n\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n                <div className='generic-popup-title'>\r\n                    <span />\r\n                    <button onClick={onClose} className='btn-popup-close'>\r\n                        <Icon\r\n                            icon={cross}\r\n                            size='1.6vh'\r\n                            className='close-icon'\r\n                        />\r\n                    </button>\r\n                </div>\r\n                <div className='lookup-card-wrapper'>\r\n                    <img\r\n                        className='lookup-card-display'\r\n                        src={`images/cards/${cardId}.svg`}\r\n                        alt='Card'\r\n                    />\r\n                    <span>{description}</span>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default CardModal\r\n","import React, { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport discardSound from '../../Resources/Sounds/card_drop.mp3'\r\nimport flipSound1 from '../../Resources/Sounds/card_flip.mp3'\r\nimport flipSound2 from '../../Resources/Sounds/card_flip2.mp3'\r\nimport flipSound3 from '../../Resources/Sounds/card_flip3.mp3'\r\nimport buttonClick from '../../Resources/Sounds/button_click.mp3'\r\nimport turnEndSound from '../../Resources/Sounds/turn_end.mp3'\r\n\r\nimport './Game.css'\r\nimport Cards from './Cards/Cards'\r\nimport Content from './Content'\r\nimport GenericModal from '../Modals/GenericModal'\r\nimport CardModal from '../Modals/CardModal'\r\n\r\nconst { Cards: CardsData } = require('../../Game/Cards/Cards')\r\nconst { setScore, isMove } = require('../../Shared/Functions')\r\nconst { GAME_MOVE, WIN } = require('../../Shared/Events')\r\nconst { Result } = require('../../Shared/Enums')\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        game: this.props.game,\r\n        gameFromProps: true,\r\n        allowMove: true,\r\n        soundSrc: '',\r\n        isDiscardEnabled: false,\r\n        guessedWordModal: null,\r\n        isTieModal: false,\r\n        gameEndWinnerModal: null,\r\n        wordDefinition: null,\r\n        isMoveModal: false,\r\n        isPeekModal: false,\r\n        peekCardId: null,\r\n        peekDescription: null,\r\n\r\n        keyMove: null,\r\n        cardMoves: [],\r\n        myCards: null,\r\n        enemyCards: null\r\n    }\r\n\r\n    initializeSocket = () => {\r\n        const { socket } = this.props\r\n        socket.on(GAME_MOVE, ({ game }) => {\r\n            this.setState({ game: game }, () => {\r\n                let moveBool = isMove({\r\n                    game: this.state.game,\r\n                    player: this.props.player\r\n                })\r\n                this.props.setMove(moveBool)\r\n                if (moveBool) this.playSound(turnEndSound)\r\n            })\r\n        })\r\n        socket.on(WIN, ({ winner, score, type, game }) => {\r\n            const { setMove, setTitle, player } = this.props\r\n            let returnState = null\r\n            if (type === Result.TURN_WIN) {\r\n                returnState = { gameFromProps: false, game }\r\n                setMove(isMove({ game, player }))\r\n            } else if (type === Result.TURN_TIE) {\r\n                returnState = { gameFromProps: false, game }\r\n                setMove(isMove({ game, player }))\r\n                this.setState({ isTieModal: true })\r\n            } else if (type === Result.GAME_WIN) {\r\n                returnState = { allowMove: false }\r\n                this.setState({ gameEndWinnerModal: winner.nickname })\r\n            }\r\n\r\n            if (\r\n                type === Result.TURN_WIN ||\r\n                type === Result.TURN_TIE ||\r\n                type === Result.GAME_WIN\r\n            ) {\r\n                this.setState({ guessedWordModal: this.state.game.word.word })\r\n            }\r\n\r\n            setScore({\r\n                player,\r\n                game,\r\n                setTitle,\r\n                score\r\n            })\r\n\r\n            this.setState({ ...returnState })\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.gameFromProps) {\r\n            if (props.game !== state.game) {\r\n                setScore({\r\n                    player: props.player,\r\n                    game: props.game,\r\n                    setTitle: props.setTitle\r\n                })\r\n                return {\r\n                    gameFromProps: false,\r\n                    game: props.game\r\n                }\r\n            }\r\n            return null\r\n        }\r\n        return null\r\n    }\r\n\r\n    ctrlPressHandler(event, isDown) {\r\n        let { player, isMove } = this.props\r\n        let { game } = this.state\r\n        if (player !== null && game !== null) {\r\n            let mySocketId = player.socketId\r\n            let myBlocked = game.blockCounters[mySocketId]\r\n            if (isMove && myBlocked <= 0) {\r\n                if (event.keyCode === 17) {\r\n                    this.setState({ isDiscardEnabled: isDown })\r\n                }\r\n            } else {\r\n                if (event.keyCode === 17) {\r\n                    this.setState({ isDiscardEnabled: false })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.socket && this.initializeSocket()\r\n        this.props.muteMusic(true)\r\n        document.addEventListener(\r\n            'keydown',\r\n            e => {\r\n                this.ctrlPressHandler(e, true)\r\n            },\r\n            false\r\n        )\r\n        document.addEventListener(\r\n            'keyup',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\r\n            'keydown',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n        document.removeEventListener(\r\n            'keyup',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n    }\r\n\r\n    onMove = () => {\r\n        if (this.state.keyMove !== null || this.state.cardMoves.length > 0) {\r\n            if (this.props.isMove && this.state.allowMove) {\r\n                this.playSound(flipSound3)\r\n\r\n                let { keyMove, cardMoves } = this.state\r\n                cardMoves.forEach(e => {\r\n                    if (e.discarded === false) {\r\n                        if (e.card === CardsData.DEFINITION_CARD.id) {\r\n                            let { definitions } = this.state.game.word\r\n                            let randomIndex = Math.floor(\r\n                                Math.random() * definitions.length\r\n                            )\r\n                            this.setState({\r\n                                wordDefinition: definitions[randomIndex]\r\n                            })\r\n                        } else if (e.card === CardsData.LOOK_UP_CARD.id) {\r\n                            let enemySocket = this.props.game.playerSockets.filter(\r\n                                x => {\r\n                                    return (\r\n                                        x.socketId !==\r\n                                        this.props.player.socketId\r\n                                    )\r\n                                }\r\n                            )[0].socketId\r\n                            let enemyCards = this.props.game.cards[enemySocket]\r\n                            let randomIndexOfCard = Math.floor(\r\n                                Math.random() * enemyCards.length\r\n                            )\r\n                            let randomEnemyCard =\r\n                                enemyCards[randomIndexOfCard].id\r\n                            let { description } = CardsData[randomEnemyCard]\r\n                            this.setState({\r\n                                isPeekModal: true,\r\n                                peekCardId: enemyCards[randomIndexOfCard].id,\r\n                                peekDescription: description\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n\r\n                const { socket } = this.props\r\n                let moves = []\r\n                if (keyMove !== null) moves.push(keyMove)\r\n                if (cardMoves !== []) moves = [...moves, ...cardMoves]\r\n\r\n                this.setState({\r\n                    keyMove: null,\r\n                    cardMoves: []\r\n                })\r\n                socket.emit(GAME_MOVE, { game: this.state.game, moves })\r\n            }\r\n        } else {\r\n            this.setState({\r\n                isMoveModal: true\r\n            })\r\n        }\r\n    }\r\n\r\n    onMoveTimeout = () => {\r\n        this.setState(\r\n            {\r\n                keyMove: {\r\n                    type: 'key',\r\n                    key: '',\r\n                    playerSocketId: this.props.player.socketId\r\n                },\r\n                cardMoves: []\r\n            },\r\n            () => {\r\n                this.onMove()\r\n            }\r\n        )\r\n    }\r\n\r\n    onUseAbort = index => {\r\n        let { cardMoves } = this.state\r\n        cardMoves = cardMoves.filter(card => {\r\n            return card.index !== index\r\n        })\r\n        this.playSound(flipSound2)\r\n        this.setState({ cardMoves })\r\n    }\r\n\r\n    playSound = src => {\r\n        this.setState({ soundSrc: src })\r\n    }\r\n\r\n    onKeyMove = move => {\r\n        if (this.props.isMove) {\r\n            this.playSound(buttonClick)\r\n            this.setState({ keyMove: move })\r\n        }\r\n    }\r\n\r\n    clearKeyMove = () => {\r\n        this.setState({\r\n            keyMove: null,\r\n            clickedIndex: null\r\n        })\r\n    }\r\n\r\n    onCardUse = data => {\r\n        if (this.props.isMove) {\r\n            let move = {\r\n                index: data.index,\r\n                type: 'card',\r\n                card: data.cardId,\r\n                playerSocketId: this.props.player.socketId,\r\n                discarded: false\r\n            }\r\n\r\n            let isDuplicate = this.state.cardMoves.some(\r\n                cardMove => cardMove.index === data.index\r\n            )\r\n            if (isDuplicate === false) {\r\n                setTimeout(() => {\r\n                    this.playSound(flipSound1)\r\n                }, 100)\r\n                this.setState({ cardMoves: [...this.state.cardMoves, move] })\r\n            }\r\n        }\r\n    }\r\n\r\n    onDiscard = (index, cardId) => {\r\n        let playerSocketId = this.props.player.socketId\r\n\r\n        let newMove = {\r\n            index,\r\n            type: 'card',\r\n            card: cardId,\r\n            playerSocketId,\r\n            discarded: true\r\n        }\r\n        let { cardMoves } = this.state\r\n        cardMoves = cardMoves.filter(move => {\r\n            return move.index + cardMoves.length !== index\r\n        })\r\n        cardMoves.push(newMove)\r\n        this.setState({ cardMoves })\r\n\r\n        let game = this.state.game\r\n        game.cards[playerSocketId] = game.cards[playerSocketId].filter(\r\n            (e, i) => {\r\n                return i !== index\r\n            }\r\n        )\r\n        setTimeout(() => {\r\n            this.playSound(discardSound)\r\n        }, 100)\r\n        this.setState({ game })\r\n    }\r\n\r\n    render() {\r\n        let cards = { my: null, enemy: null }\r\n        if (this.state.game !== null) {\r\n            let gameCards = this.state.game.cards\r\n            let mySocketId = this.props.player.socketId\r\n            cards.my = gameCards[mySocketId]\r\n            let enemySocketId = this.state.game.playerSockets.filter(x => {\r\n                return x.socketId !== this.props.player.socketId\r\n            })[0].socketId\r\n            cards.enemy = gameCards[enemySocketId]\r\n        }\r\n        return (\r\n            <div className='gameWrapper'>\r\n                {this.state.wordDefinition && (\r\n                    <GenericModal\r\n                        title='Word definition:'\r\n                        content={this.state.wordDefinition}\r\n                        onClose={() => this.setState({ wordDefinition: null })}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                    />\r\n                )}\r\n                {this.state.isMoveModal && (\r\n                    <GenericModal\r\n                        title='Cannot continue!'\r\n                        content='You have to make a a move.'\r\n                        onClose={() => this.setState({ isMoveModal: false })}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                    />\r\n                )}\r\n                {this.state.isPeekModal && (\r\n                    <CardModal\r\n                        cardId={this.state.peekCardId}\r\n                        description={this.state.peekDescription}\r\n                        onClose={() => this.setState({ isPeekModal: false })}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                    />\r\n                )}\r\n                {this.state.guessedWordModal && (\r\n                    <GenericModal\r\n                        title='Guessed word:'\r\n                        content={this.state.guessedWordModal}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                        onClose={() => {\r\n                            this.setState({ guessedWordModal: null })\r\n                        }}\r\n                    />\r\n                )}\r\n                {this.state.isTieModal && (\r\n                    <GenericModal\r\n                        title='TIE.'\r\n                        content='Turn is tied. None of the players won.'\r\n                        volumeSettings={this.props.volumeSettings}\r\n                        onClose={() => {\r\n                            this.setState({ isTieModal: null })\r\n                        }}\r\n                    />\r\n                )}\r\n                {this.state.gameEndWinnerModal && (\r\n                    <GenericModal\r\n                        title='GAME ENDED.'\r\n                        content={`Player ${\r\n                            this.state.gameEndWinnerModal\r\n                        } has won the game.`}\r\n                        volumeSettings={this.props.volumeSettings}\r\n                        onClose={() => {\r\n                            this.setState({ gameEndWinnerModal: null })\r\n                            this.props.history.push('/browser')\r\n                            this.setState({ game: null })\r\n                        }}\r\n                    />\r\n                )}\r\n                <ReactAudioPlayer\r\n                    volume={this.props.volumeSettings.soundVol}\r\n                    src={this.state.soundSrc}\r\n                    autoPlay\r\n                    onEnded={() => {\r\n                        this.setState({ soundSrc: '' })\r\n                    }}\r\n                />\r\n                <Cards\r\n                    cards={cards.my}\r\n                    areMyCards={true}\r\n                    onCardUse={this.onCardUse}\r\n                    onDiscard={this.onDiscard}\r\n                    onUseAbort={this.onUseAbort}\r\n                    isDiscardEnabled={this.state.isDiscardEnabled}\r\n                    isMove={this.props.isMove}\r\n                    game={this.state.game}\r\n                    player={this.props.player}\r\n                    cardMoves={this.state.cardMoves}\r\n                />\r\n                <Content\r\n                    player={this.props.player}\r\n                    onMoveTimeout={this.onMoveTimeout}\r\n                    isMove={this.props.isMove}\r\n                    game={this.state.game}\r\n                    keyMove={this.state.keyMove}\r\n                    onKeyMove={this.onKeyMove}\r\n                    onEndTurn={this.onMove}\r\n                />\r\n                <Cards\r\n                    cards={cards.enemy}\r\n                    areMyCards={false}\r\n                    isMove={this.props.isMove}\r\n                    game={this.state.game}\r\n                    player={this.props.player}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nGame.propTypes = {\r\n    game: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    player: PropTypes.object,\r\n    history: PropTypes.object.isRequired,\r\n    isMove: PropTypes.bool.isRequired,\r\n    muteMusic: PropTypes.func.isRequired,\r\n    setMove: PropTypes.func.isRequired,\r\n    setTitle: PropTypes.func.isRequired,\r\n    volumeSettings: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withRouter(Game)\r\n","import React, { Component } from 'react'\r\nimport './PlayersBrowser.css'\r\nimport GenericModal from '../../Components/Modals/GenericModal'\r\n\r\nclass BrowserEntry extends Component {\r\n    state = {\r\n        isButtonDisabled: false,\r\n        isTimeoutModal: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true\r\n        this.setState({ isButtonDisabled: false })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.isButtonDisabled === true) {\r\n            setTimeout(() => {\r\n                if (this._isMounted === true) {\r\n                    this.setState({ isButtonDisabled: false })\r\n                }\r\n            }, 5000)\r\n        }\r\n    }\r\n\r\n    clickHandler = event => {\r\n        event.preventDefault()\r\n        if (this.state.isButtonDisabled === true) {\r\n            this.setState({ isTimeoutModal: true })\r\n        } else {\r\n            this.setState({\r\n                isButtonDisabled: true\r\n            })\r\n\r\n            this.props.invitationHandler({\r\n                id: this.props.id,\r\n                socketId: this.props.socketId\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { isTimeoutModal } = this.state\r\n        let { nickname, volumeSettings } = this.props\r\n        return (\r\n            <React.Fragment>\r\n                {isTimeoutModal && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='You are inviting too fast. Wait 5 seconds.'\r\n                        soundVolume={volumeSettings.soundVol}\r\n                        onClose={() => {\r\n                            this.setState({ isTimeoutModal: false })\r\n                        }}\r\n                    />\r\n                )}\r\n                <div className='browser-entry width-full'>\r\n                    <span className='player-info'>\r\n                        <span className='nickname'>{nickname}</span>\r\n                    </span>\r\n                    <button\r\n                        onClick={e => {\r\n                            this.clickHandler(e)\r\n                        }}\r\n                        className='play border-neon border-neon-lime'\r\n                    >\r\n                        Play\r\n                    </button>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BrowserEntry\r\n","import BrowserEntry from './BrowserEntry'\r\nimport React from 'react'\r\n\r\nexport const extractBrowserPlayers = ({\r\n    player,\r\n    connectedPlayers,\r\n    invitationHandler,\r\n    volumeSettings\r\n}) => {\r\n    connectedPlayers = Object.assign({}, connectedPlayers)\r\n\r\n    //* don't display the current player\r\n    if (player) {\r\n        delete connectedPlayers[player.nickname]\r\n    }\r\n\r\n    let result = []\r\n    Object.values(connectedPlayers).forEach(player => {\r\n        let { isInGame } = player\r\n        if (isInGame === false) {\r\n            result.push(\r\n                <BrowserEntry\r\n                    id={player.id}\r\n                    socketId={player.socketId}\r\n                    invitationHandler={invitationHandler}\r\n                    nickname={player.nickname}\r\n                    volumeSettings={volumeSettings}\r\n                    key={player.id}\r\n                    index={Object.values(connectedPlayers).indexOf(player)}\r\n                />\r\n            )\r\n        }\r\n    })\r\n    return result\r\n}\r\n","import React from 'react'\r\nimport './PlayersBrowser.css'\r\nimport Scrollbar from 'react-scrollbars-custom'\r\nimport { extractBrowserPlayers } from './Functions'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PlayersBrowser extends React.Component {\r\n    state = {\r\n        connectedPlayers: this.props.connectedPlayers,\r\n        playersInBrowser: extractBrowserPlayers({\r\n            player: this.props.player,\r\n            connectedPlayers: this.props.connectedPlayers,\r\n            invitationHandler: this.props.invitationHandler,\r\n            volumeSettings: this.props.volumeSettings\r\n        }),\r\n        searchedPlayer: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Players browser' })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.connectedPlayers !== props.connectedPlayers) {\r\n            return {\r\n                playersInBrowser: extractBrowserPlayers({\r\n                    player: props.player,\r\n                    connectedPlayers: props.connectedPlayers,\r\n                    invitationHandler: props.invitationHandler,\r\n                    volumeSettings: props.volumeSettings\r\n                }),\r\n                connectedPlayers: props.connectedPlayers\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    searchPlayer = e => {\r\n        let input = e.target.value\r\n        if (input === '') {\r\n            this.setState({ searchedPlayer: null })\r\n        } else {\r\n            let players = Object.keys(this.props.connectedPlayers)\r\n            players = players.filter(\r\n                item => item !== this.props.player.nickname\r\n            )\r\n            for (let i = 0; i < players.length; i++) {\r\n                if (players[i].toLowerCase().includes(input.toLowerCase())) {\r\n                    this.setState({\r\n                        searchedPlayer: this.props.connectedPlayers[players[i]]\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    SearchedPlayer = () => {\r\n        return extractBrowserPlayers({\r\n            player: this.props.player,\r\n            connectedPlayers: [this.state.searchedPlayer],\r\n            invitationHandler: this.props.invitationHandler,\r\n            volumeSettings: this.props.volumeSettings\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { player } = this.props\r\n        let { searchedPlayer, playersInBrowser } = this.state\r\n        return (\r\n            <div className='players-browser container content-vcenter border-neon border-neon-orange'>\r\n                <div className='players-browser-title bg-lightgrey width-full text-xlg text-center'>\r\n                    <p>\r\n                        {player && (\r\n                            <span>\r\n                                You are logged in as <b>{player.nickname}</b>.\r\n                            </span>\r\n                        )}\r\n                    </p>\r\n                </div>\r\n                <div className='search-player'>\r\n                    <input\r\n                        placeholder='Search player'\r\n                        onChange={this.searchPlayer}\r\n                        className='border-neon border-neon-blue'\r\n                    />\r\n                </div>\r\n                <Scrollbar style={{ width: '100%', height: '100%' }}>\r\n                    {!searchedPlayer ? (\r\n                        playersInBrowser.map(entry => {\r\n                            return entry\r\n                        })\r\n                    ) : (\r\n                        <this.SearchedPlayer />\r\n                    )}\r\n                </Scrollbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPlayersBrowser.propTypes = {\r\n    connectedPlayers: PropTypes.object.isRequired,\r\n    invitationHandler: PropTypes.func.isRequired,\r\n    player: PropTypes.object,\r\n    playersInBrowser: PropTypes.array,\r\n    setTitle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default PlayersBrowser\r\n","import React, { Component } from 'react'\r\nimport './LoginPage.css'\r\nimport GenericModal from '../Modals/GenericModal'\r\nimport { VERIFY_USER } from '../../Shared/Events'\r\n\r\nclass LoginPage extends Component {\r\n    inputRef = React.createRef()\r\n    state = {\r\n        isNameLengthOpen: false,\r\n        isNameSpaceOpen: false,\r\n        isNameTakenOpen: false,\r\n        isAlreadyLoggedInOpen: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Login page' })\r\n    }\r\n\r\n    loginHandler = () => {\r\n        let { value } = this.inputRef.current\r\n        const { socket } = this.props\r\n        if (value.length <= 1) {\r\n            this.setState({ isNameLengthOpen: true })\r\n            return\r\n        } else if (value.includes(' ')) {\r\n            this.setState({ isNameSpaceOpen: true })\r\n            return\r\n        }\r\n        socket.emit(VERIFY_USER, value, ({ player, isTaken, isIpFree }) => {\r\n            if (!isIpFree) {\r\n                this.setState({ isAlreadyLoggedInOpen: true })\r\n            } else if (isTaken) {\r\n                this.setState({ isNameTakenOpen: true })\r\n            } else {\r\n                this.props.loginPlayer(player)\r\n            }\r\n        })\r\n    }\r\n\r\n    submitOnEnter = key => {\r\n        if (key.which === 13) {\r\n            this.loginHandler()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { volumeSettings } = this.props\r\n        return (\r\n            <div className='login-page-content'>\r\n                {this.state.isNameLengthOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='Your nickname has to be longer.'\r\n                        onClose={() => {\r\n                            this.setState({ isNameLengthOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {this.state.isNameSpaceOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='Your nickname cannot have spaces.'\r\n                        onClose={() => {\r\n                            this.setState({ isNameSpaceOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {this.state.isNameTakenOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='This nickname is taken.'\r\n                        onClose={() => {\r\n                            this.setState({ isNameTakenOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {this.state.isAlreadyLoggedInOpen && (\r\n                    <GenericModal\r\n                        title='Error!'\r\n                        content='You are already logged in.'\r\n                        onClose={() => {\r\n                            this.setState({ isAlreadyLoggedInOpen: false })\r\n                        }}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n\r\n                <div className='infoNickname border-neon border-neon-violet'>\r\n                    <p>Please enter your nickname</p>\r\n                </div>\r\n                <div className='nickname-input'>\r\n                    <input\r\n                        ref={this.inputRef}\r\n                        type='text'\r\n                        maxLength='15'\r\n                        className='inputNickname border-neon border-neon-red'\r\n                        onKeyDown={this.submitOnEnter}\r\n                        placeholder='Your nickname...'\r\n                    />\r\n                    <button\r\n                        className='button-pointer border-neon border-neon-orange'\r\n                        onClick={this.loginHandler}\r\n                    >\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginPage\r\n","import React, { Component } from 'react'\r\nimport { WALKTHROUGH_READY } from '../../Shared/Events'\r\nimport './Walkthrough.css'\r\n\r\nconst Description = ({ data }) => {\r\n    return (\r\n        <section className='walkthrough-desc'>\r\n            <ul>\r\n                <li>\r\n                    <span>\r\n                        During a turn you can use cards and guess one letter.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>To use a card just click it.</span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Game ends after you or your opponent win two rounds.\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n            <div className='ok-btn-wrapper'>\r\n                <button className={data.buttonClass} onClick={data.onReady}>\r\n                    {data.content}\r\n                </button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nclass Walkthrough extends Component {\r\n    state = { isClicked: false }\r\n\r\n    onReady = () => {\r\n        const { socket } = this.props\r\n        if (!this.state.isClicked) {\r\n            socket.emit(WALKTHROUGH_READY, { gameId: this.props.gameId })\r\n        }\r\n\r\n        this.setState({ isClicked: true })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Walkthrough' })\r\n    }\r\n\r\n    render() {\r\n        let buttonClass = this.state.isClicked\r\n            ? 'ok-btn-pressed ok-btn border-neon border-neon-orange'\r\n            : 'ok-btn border-neon border-neon-orange'\r\n        let content = this.state.isClicked ? 'Waiting for opponent...' : 'READY'\r\n        return (\r\n            <div className='gameWrapper'>\r\n                <div className='walkthrough'>\r\n                    <div className='walkthrough-content'>\r\n                        <img\r\n                            className='walkthrough-image'\r\n                            src='images/walkthrough/Walkthrough.svg'\r\n                            alt='Walkthrough screenshot'\r\n                        />\r\n                        <Description\r\n                            data={{\r\n                                buttonClass,\r\n                                content,\r\n                                onReady: this.onReady\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Walkthrough\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Timer from '../Game/Timer'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst InvitationModal = props => {\r\n    let { nickname, onAccept, onClose, soundVolume } = props\r\n\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito bg-khaki'>\r\n                <div className='generic-popup-title'>\r\n                    <span>New game invitation!</span>\r\n                </div>\r\n                <div className='invitation-popup-content'>\r\n                    <div className='msg'>{`You have been invited by ${nickname}.`}</div>\r\n                    <Timer time={10} onEnd={onClose} />\r\n                    <div className='popup-buttons'>\r\n                        <button\r\n                            className='border-neon border-neon-lime'\r\n                            onClick={onAccept}\r\n                        >\r\n                            <span>Accept</span>\r\n                        </button>\r\n                        <button\r\n                            className='border-neon border-neon-orange'\r\n                            onClick={onClose}\r\n                        >\r\n                            <span>Decline</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default InvitationModal\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nimport './Popup.css'\r\nconst DisconnectedPopup = props => {\r\n    let { soundVolume } = props\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            <ReactAudioPlayer volume={soundVolume} src={popupSound} autoPlay />\r\n            <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n                <div className='disconnected-popup-content'>\r\n                    <div className='msg'>\r\n                        You have been disconnected from the server.\r\n                    </div>\r\n                    <div className='spinner-wrapper'>\r\n                        <span className='fa fa-spinner fa-spin fa-3x' />\r\n                    </div>\r\n                    <div className='msg'>Trying to reconnect...</div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>,\r\n        document.body\r\n    )\r\n}\r\n\r\nexport default DisconnectedPopup\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\nimport Intro from './Components/Intro/Intro'\r\nimport Header from './Components/Header/Header'\r\nimport Game from './Components/Game/Game'\r\nimport PlayersBrowser from './Components/PlayersBrowser/PlayersBrowser'\r\nimport LoginPage from './Components/LoginPage/LoginPage'\r\n\r\nimport io from 'socket.io-client'\r\nimport {\r\n    PLAYER_CONNECTED,\r\n    LOGOUT,\r\n    PLAYER_DISCONNECTED,\r\n    INVITATION,\r\n    GAME_STARTED,\r\n    REFRESH_PLAYERS,\r\n    INVITATION_ACCEPTED,\r\n    GAME_CREATED\r\n} from './Shared/Events'\r\nimport { isMove } from './Shared/Functions'\r\n\r\nimport { Route, withRouter, Switch } from 'react-router-dom'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport bgMusic from './Resources/Sounds/bg-lower.mp3'\r\nimport Walkthrough from './Components/Game/Walkthrough'\r\n\r\nimport InvitationModal from './Components/Modals/InvitationModal'\r\nimport DisconnectedModal from './Components/Modals/DisconnectedModal'\r\n\r\nlet socketUrl = 'ws://cardman-multiplayer.herokuapp.com:80'\r\nif (process.env.REACT_APP_STAGE) {\r\n    if (process.env.REACT_APP_STAGE.trim() === 'dev')\r\n        socketUrl = 'localhost:3231'\r\n}\r\nconst { setScore } = require('./Shared/Functions')\r\nconst { defaultVolumeSettings, disconnectedTimeoutMs } = require('./config')\r\n\r\nconst isInCache = key => {\r\n    return (\r\n        localStorage.getItem(key) !== null &&\r\n        localStorage.getItem(key) !== undefined\r\n    )\r\n}\r\n\r\nconst getSavedVolume = state => {\r\n    if (isInCache('cachedVolumeSettings')) {\r\n        let cachedVolumeSettings = JSON.parse(\r\n            localStorage.getItem('cachedVolumeSettings')\r\n        )\r\n        return {\r\n            musicVol: cachedVolumeSettings.musicVol,\r\n            soundVol: cachedVolumeSettings.soundVol\r\n        }\r\n    } else {\r\n        let cachedVolumeSettings = {\r\n            musicVol: defaultVolumeSettings.musicVol,\r\n            soundVol: defaultVolumeSettings.soundVol\r\n        }\r\n        localStorage.setItem(\r\n            'cachedVolumeSettings',\r\n            JSON.stringify(cachedVolumeSettings)\r\n        )\r\n        return cachedVolumeSettings\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    popupsRef = React.createRef()\r\n    state = {\r\n        title: 'Cardman Multiplayer',\r\n        score: null,\r\n        player: null,\r\n        socket: null,\r\n        connectedPlayers: {},\r\n        game: null,\r\n        isMove: false,\r\n        volumeSettings: {\r\n            musicVol: 0.5,\r\n            soundVol: 0.5,\r\n            muted: false\r\n        },\r\n        isDisconnected: false,\r\n        gameId: null,\r\n        isInvitationModal: false,\r\n        invitationNickname: null,\r\n        onInvitationAccept: null\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.location.pathname !== '/') {\r\n            if (this.state.player === null) {\r\n                this.props.history.push('/')\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ volumeSettings: getSavedVolume(this.state) })\r\n        this.initializeSocket()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.logoutPlayer()\r\n    }\r\n\r\n    invitationHandler = ({ id = null, socketId = null }) => {\r\n        //Prevent players from inviting themselves\r\n        if (id === this.state.player.id) {\r\n            this.addPopup({\r\n                title: 'Error!',\r\n                content: 'You cannot invite yourself.'\r\n            })\r\n        } else {\r\n            const { socket } = this.state\r\n            socket.emit(INVITATION, { id, socketId })\r\n        }\r\n    }\r\n\r\n    initializeSocket = () => {\r\n        const socket = io(socketUrl)\r\n        this.setState({ socket })\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected to server.')\r\n        })\r\n\r\n        socket.on('pong', ms => {\r\n            if (ms > disconnectedTimeoutMs) {\r\n                this.setState({ isDisconnected: true })\r\n            } else {\r\n                this.setState({ isDisconnected: false })\r\n            }\r\n        })\r\n\r\n        let refreshingPlayersSockets = [\r\n            PLAYER_CONNECTED,\r\n            PLAYER_DISCONNECTED,\r\n            REFRESH_PLAYERS\r\n        ]\r\n\r\n        refreshingPlayersSockets.forEach(s => {\r\n            socket.on(s, ({ connectedPlayers }) => {\r\n                this.setState({ connectedPlayers })\r\n            })\r\n        })\r\n\r\n        socket.on(INVITATION, ({ nickname, socketId }) => {\r\n            const { socket } = this.state\r\n            this.setState({\r\n                isInvitationModal: true,\r\n                invitationNickname: nickname,\r\n                onInvitationAccept: () => {\r\n                    this.setState({ isInvitationModal: false }, () => {\r\n                        socket.emit(INVITATION_ACCEPTED, {\r\n                            fromSocketId: socketId,\r\n                            to: this.state.player\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n        })\r\n\r\n        socket.on(GAME_CREATED, ({ gameId }) => {\r\n            this.setState({ gameId }, () => {\r\n                this.props.history.push('/walkthrough')\r\n            })\r\n        })\r\n\r\n        socket.on(GAME_STARTED, ({ game }) => {\r\n            this.setGame({ game })\r\n            this.setMove(isMove({ game, player: this.state.player }))\r\n            setScore({\r\n                player: this.state.player,\r\n                game,\r\n                setTitle: this.setTitle\r\n            })\r\n        })\r\n    }\r\n\r\n    loginPlayer = player => {\r\n        const { socket } = this.state\r\n        //Sending login socket with freshly generated, previosly verified player\r\n        socket.emit(PLAYER_CONNECTED, player)\r\n        this.setState({ player })\r\n\r\n        //Wait for server response, then get the player list\r\n        socket.on(PLAYER_CONNECTED, ({ connectedPlayers }) => {\r\n            this.setState({ connectedPlayers })\r\n            this.props.history.push('/browser')\r\n        })\r\n    }\r\n\r\n    logoutPlayer = () => {\r\n        //Sending logout socket and setting user to player, thus hiding all the functionalities\r\n        const { socket } = this.state\r\n        socket.emit(LOGOUT)\r\n        this.setState({ player: null })\r\n    }\r\n\r\n    setTitle = ({ title = null, score = null }) => {\r\n        this.setState({ title: title })\r\n        this.setState({ score: score })\r\n    }\r\n\r\n    setGame = ({ game }) => {\r\n        this.setState({ game }, this.props.history.push('/game'))\r\n    }\r\n\r\n    setMove = isMove => {\r\n        this.setState({ isMove })\r\n    }\r\n\r\n    setSettings = ({ soundVol, musicVol }) => {\r\n        if (this.props.location.pathname === '/game') {\r\n            musicVol = 0\r\n        }\r\n        this.setState({\r\n            volumeSettings: { soundVol: soundVol, musicVol: musicVol }\r\n        })\r\n        let cachedVolumeSettings = { musicVol: musicVol, soundVol: soundVol }\r\n        localStorage.setItem(\r\n            'cachedVolumeSettings',\r\n            JSON.stringify(cachedVolumeSettings)\r\n        )\r\n    }\r\n\r\n    muteMusic = state => {\r\n        this.setState({\r\n            volumeSettings: { ...this.state.volumeSettings, muted: state }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            socket,\r\n            player,\r\n            game,\r\n            gameId,\r\n            isMove,\r\n            connectedPlayers,\r\n            volumeSettings,\r\n            isInvitationModal,\r\n            invitationNickname,\r\n            onInvitationAccept,\r\n            title,\r\n            score,\r\n            isDisconnected\r\n        } = this.state\r\n        return (\r\n            <div className='container of-rows width-full height-full text-nunito '>\r\n                {isInvitationModal && (\r\n                    <InvitationModal\r\n                        nickname={invitationNickname}\r\n                        onAccept={onInvitationAccept}\r\n                        onClose={() =>\r\n                            this.setState({ isInvitationModal: false })\r\n                        }\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                )}\r\n                {isDisconnected && (\r\n                    <DisconnectedModal soundVolume={volumeSettings.soundVol} />\r\n                )}\r\n                <Intro />\r\n                <Header\r\n                    volumeSettings={volumeSettings}\r\n                    title={title}\r\n                    score={score}\r\n                    setSettings={this.setSettings}\r\n                />\r\n                <ReactAudioPlayer\r\n                    src={bgMusic}\r\n                    autoPlay\r\n                    volume={volumeSettings.musicVol}\r\n                    loop={true}\r\n                    muted={volumeSettings.muted}\r\n                />\r\n                <div className='row height-full width-full bg-lightgrey'>\r\n                    <Switch>\r\n                        <Route exact path='/'>\r\n                            <LoginPage\r\n                                socket={socket}\r\n                                loginPlayer={this.loginPlayer}\r\n                                setTitle={this.setTitle}\r\n                                volumeSettings={this.state.volumeSettings}\r\n                            />\r\n                        </Route>\r\n                        <Route\r\n                            path='/browser'\r\n                            render={() => (\r\n                                <PlayersBrowser\r\n                                    player={player}\r\n                                    setTitle={this.setTitle}\r\n                                    invitationHandler={this.invitationHandler}\r\n                                    connectedPlayers={connectedPlayers}\r\n                                    volumeSettings={volumeSettings}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            path='/walkthrough'\r\n                            render={() => (\r\n                                <Walkthrough\r\n                                    player={player}\r\n                                    setTitle={this.setTitle}\r\n                                    gameId={gameId}\r\n                                    muteMusic={this.muteMusic}\r\n                                    socket={socket}\r\n                                    soundVolume={volumeSettings.soundVol}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            path='/game'\r\n                            render={() => (\r\n                                <Game\r\n                                    player={player}\r\n                                    game={game}\r\n                                    muteMusic={this.muteMusic}\r\n                                    socket={socket}\r\n                                    setTitle={this.setTitle}\r\n                                    setMove={this.setMove}\r\n                                    isMove={isMove}\r\n                                    volumeSettings={volumeSettings}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(App)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n","module.exports = __webpack_public_path__ + \"static/media/popup.6f214bea.mp3\";","const isMove = ({ game, player }) => {\r\n    let nextPlayerIndex = game.nextPlayerIndex\r\n    return game.playerSockets[nextPlayerIndex].id === player.id\r\n}\r\n\r\nconst setScore = ({ player, game, setTitle }) => {\r\n    let { socketId } = player\r\n    let { playerSockets } = game\r\n    let me =\r\n        playerSockets.find(p => {\r\n            return p.socketId === socketId\r\n        }) || []\r\n\r\n    let enemy =\r\n        playerSockets.find(p => {\r\n            return p.socketId !== socketId\r\n        }) || []\r\n\r\n    let score = game.score\r\n\r\n    setTitle({\r\n        score: {\r\n            me: me.nickname,\r\n            myScore: score[me.socketId],\r\n            enemy: enemy.nickname,\r\n            enemyScore: score[enemy.socketId]\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = { isMove, setScore }\r\n","const Cards = {\r\n    DEFINITION_CARD: {\r\n        id: 'DEFINITION_CARD',\r\n        title: 'Definition card',\r\n        description: 'Shows you a definition of the word.',\r\n        disabledText: 'You can only use one card of this kind during a turn',\r\n        use: ({ currentGame, socket, move }) => {\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player, index }) => {\r\n            let { socketId } = player\r\n            let firstCardIndex = game.cards[socketId].findIndex(card => {\r\n                return card.id === Cards.DEFINITION_CARD.id\r\n            })\r\n            if (index === firstCardIndex) return true\r\n            return false\r\n        }\r\n    },\r\n    RANDOM_CORRECT_LETTER_CARD: {\r\n        id: 'RANDOM_CORRECT_LETTER_CARD',\r\n        title: 'Random correct letter',\r\n        description: 'Chooses a random correct letter.',\r\n        disabledText: '',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let randomCorrectLetter = () => {\r\n                let { word } = currentGame.word\r\n                let { guessed } = currentGame\r\n                let guessedArr = guessed.map(g => g.key.toUpperCase())\r\n                word = word.toUpperCase()\r\n                let arr = Array.from(word).filter(char => {\r\n                    return !guessedArr.includes(char)\r\n                })\r\n                let randomIndex = Math.floor(Math.random() * arr.length)\r\n                return arr[randomIndex].toUpperCase()\r\n            }\r\n\r\n            let key = randomCorrectLetter()\r\n            currentGame.guessed.push({\r\n                key,\r\n                playerSocketId: move.playerSocketId\r\n            })\r\n            let playerSocket =\r\n                currentGame.playerSockets[currentGame.nextPlayerIndex].socketId\r\n            let enemySocket =\r\n                currentGame.playerSockets[1 - currentGame.nextPlayerIndex]\r\n                    .socketId\r\n            currentGame.keys.push({\r\n                key,\r\n                playerSocketId: playerSocket\r\n            })\r\n            currentGame.keys.push({\r\n                key,\r\n                playerSocketId: enemySocket\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game }) => {\r\n            return true\r\n        }\r\n    },\r\n    ADDITIONAL_TURN_CARD: {\r\n        id: 'ADDITIONAL_TURN_CARD',\r\n        title: 'Additional letter',\r\n        description: 'You can choose two letters in a turn.',\r\n        disabledText: 'You can only use one card of this kind during a turn',\r\n        use: ({ currentGame, socket, move }) => {\r\n            currentGame.nextPlayerIndex = 1 - currentGame.nextPlayerIndex\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player, index }) => {\r\n            let { socketId } = player\r\n            let firstCardIndex = game.cards[socketId].findIndex(card => {\r\n                return card.id === Cards.ADDITIONAL_TURN_CARD.id\r\n            })\r\n            if (index === firstCardIndex) return true\r\n            return false\r\n        }\r\n    },\r\n    REMOVE_ONE_UNFITTING_CARD: {\r\n        id: 'REMOVE_ONE_UNFITTING_CARD',\r\n        title: 'Remove one unfitting letter.',\r\n        description: 'Removes one unfitting letter from the current word.',\r\n        disabledText: '',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let { word } = currentGame.word\r\n            let wordKeys = Array.from(word.toUpperCase())\r\n            let myKeys = []\r\n            currentGame.keys.forEach(key => {\r\n                if (key.playerSocketId === socket.user.socketId) {\r\n                    myKeys.push(key.key)\r\n                }\r\n            })\r\n            let candidates = []\r\n            for (let i = 65; i <= 90; i++) {\r\n                let letter = String.fromCharCode(i).toUpperCase()\r\n                if (!wordKeys.includes(letter) && !myKeys.includes(letter)) {\r\n                    candidates.push(letter)\r\n                }\r\n            }\r\n            currentGame.keys.push({\r\n                key: candidates[Math.floor(Math.random() * candidates.length)],\r\n                playerSocketId: socket.user.socketId\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game }) => {\r\n            return true\r\n        }\r\n    },\r\n    REMOVE_TWO_UNFITTING_CARD: {\r\n        id: 'REMOVE_TWO_UNFITTING_CARD',\r\n        title: 'Remove two unfitting letters.',\r\n        description: 'Removes two unfitting letters from the current word.',\r\n        disabledText: '',\r\n        use: ({ currentGame, socket, move }) => {\r\n            currentGame = Cards.REMOVE_ONE_UNFITTING_CARD.use({\r\n                currentGame,\r\n                socket,\r\n                move\r\n            })\r\n            currentGame = Cards.REMOVE_ONE_UNFITTING_CARD.use({\r\n                currentGame,\r\n                socket,\r\n                move\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game }) => {\r\n            return true\r\n        }\r\n    },\r\n    BLOCK_CARD: {\r\n        id: 'BLOCK_CARD',\r\n        title: 'Block enemy cards for 2 turns.',\r\n        description: 'Blocks enemy cards for 2 turns.',\r\n        disabledText: 'You cannot block an already blocked player',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n            if (currentGame.blockCounters[enemySocket] === 0)\r\n                currentGame.blockCounters[enemySocket] = 2\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player }) => {\r\n            let enemySocket = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            if (game.blockCounters[enemySocket] === 0) return true\r\n            return false\r\n        }\r\n    },\r\n    IMMUNE_TO_BLOCK_CARD: {\r\n        id: 'IMMUNE_TO_BLOCK_CARD',\r\n        title: 'Immune to block.',\r\n        description: 'Immune to blocking cards for 2 turns',\r\n        disabledText: 'You can only use one card of this kind during a turn',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let mySocket = move.playerSocketId\r\n            let blockCounters = currentGame.blockCounters[mySocket]\r\n            currentGame.blockCounters[mySocket] = blockCounters - 2\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game }) => {\r\n            return true\r\n        }\r\n    },\r\n    LOOK_UP_CARD: {\r\n        id: 'LOOK_UP_CARD',\r\n        title: 'Look up enemy card',\r\n        description: 'You can look up one of the enemies cards',\r\n        disabledText: 'You cannot use it when enemy does not have cards',\r\n        use: ({ currentGame, socket, move }) => {\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player }) => {\r\n            let enemySocket = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            if (game.cards[enemySocket].length === 0) return false\r\n            return true\r\n        }\r\n    },\r\n    SWAP_RANDOM_CARDS: {\r\n        id: 'SWAP_RANDOM_CARDS',\r\n        title: 'Swap with opponent.',\r\n        description: 'Swap your card for a random opponents card.',\r\n        disabledText:\r\n            'You must have a card besides this one in the deck. Your opponent has to have at least 1 card.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocketId = getEnemySocketId(\r\n                currentGame,\r\n                move.playerSocketId\r\n            )\r\n            let myCards = currentGame.cards[move.playerSocketId]\r\n            let enemyCards = currentGame.cards[enemySocketId]\r\n\r\n            let myRandomIndex = Math.floor(Math.random() * myCards.length)\r\n            let enemyRandomIndex = Math.floor(Math.random() * enemyCards.length)\r\n\r\n            let randomMyCard = myCards[myRandomIndex]\r\n            let randomEnemyCard = enemyCards[enemyRandomIndex]\r\n\r\n            currentGame.cards[move.playerSocketId][\r\n                myRandomIndex\r\n            ] = randomEnemyCard\r\n            currentGame.cards[enemySocketId][enemyRandomIndex] = randomMyCard\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player }) => {\r\n            let cards = game.cards\r\n            let mySocketId = player.socketId\r\n            let myCards = cards[mySocketId]\r\n            let enemySocketId = game.playerSockets.filter(x => {\r\n                return x.socketId !== player.socketId\r\n            })[0].socketId\r\n            let enemyCards = cards[enemySocketId]\r\n            if (enemyCards.length === 0) return false\r\n\r\n            let doOtherCardsExist = myCards.some(c => {\r\n                return c.id !== Cards.SWAP_RANDOM_CARDS.id\r\n            })\r\n\r\n            if (doOtherCardsExist === false) return false\r\n            return true\r\n        }\r\n    },\r\n    RANDOMIZE_YOURSELF_CARD: {\r\n        id: 'RANDOMIZE_YOURSELF_CARD',\r\n        title: 'Randomize a card',\r\n        description: 'A random card of yours gets changed.',\r\n        disabledText: '',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let getRandomCard = (exception = null) => {\r\n                let excluded = ['RANDOMIZE_YOURSELF_CARD', exception]\r\n                let included = Object.values(Cards).filter(\r\n                    card => !excluded.includes(card.id)\r\n                )\r\n                let randomIndex = Math.floor(Math.random() * included.length)\r\n                return included[randomIndex]\r\n            }\r\n            currentGame.cards[move.playerSocketId].push(getRandomCard())\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game }) => {\r\n            return true\r\n        }\r\n    },\r\n    RANDOMIZE_ENEMY_CARD: {\r\n        id: 'RANDOMIZE_ENEMY_CARD',\r\n        title: 'Randomize an enemies card',\r\n        description: 'A random card of your opponent gets changed.',\r\n        disabledText: 'You cannot use it when enemy does not have cards',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n\r\n            let getRandomCard = (exception = null) => {\r\n                let excluded = ['RANDOMIZE_YOURSELF_CARD', exception]\r\n                let included = Object.values(Cards).filter(\r\n                    card => !excluded.includes(card.id)\r\n                )\r\n                let randomIndex = Math.floor(Math.random() * included.length)\r\n                return included[randomIndex]\r\n            }\r\n            let enemyCardAmount = currentGame.cards[enemySocket].length\r\n            let randomIndex = Math.floor(Math.random() * enemyCardAmount)\r\n            if (enemyCardAmount > 0) {\r\n                currentGame.cards[enemySocket][randomIndex] = getRandomCard()\r\n            }\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: ({ game, player }) => {\r\n            let enemySocketId = game.playerSockets.filter(x => {\r\n                return x.socketId !== player.socketId\r\n            })[0].socketId\r\n\r\n            if (game.cards[enemySocketId].length === 0) {\r\n                return false\r\n            }\r\n            return true\r\n        }\r\n    }\r\n}\r\n\r\nconst getEnemySocketId = (game, playerSocketId) => {\r\n    return game.playerSockets.filter(e => {\r\n        return e.socketId !== playerSocketId\r\n    })[0].socketId\r\n}\r\n\r\nconst getCard = card => {\r\n    return Cards[card]\r\n}\r\n\r\nconst getRandomCard = () => {\r\n    let randomIndex = Math.floor(Math.random() * Object.keys(Cards).length)\r\n    let randomKey = Object.keys(Cards)[randomIndex]\r\n    return Cards[randomKey]\r\n}\r\n\r\nconst generateCards = amount => {\r\n    let result = []\r\n    let isAdditionalTurnGenerated = false\r\n    for (let i = 0; i < amount; i++) {\r\n        let card = getRandomCard()\r\n        if (card.id === Cards.ADDITIONAL_TURN_CARD.id) {\r\n            if (isAdditionalTurnGenerated) {\r\n                i = i - 1\r\n            } else {\r\n                isAdditionalTurnGenerated = true\r\n                result.push(card)\r\n            }\r\n        } else {\r\n            result.push(card)\r\n        }\r\n    }\r\n    return result\r\n}\r\n\r\nconst resupplyCards = game => {\r\n    let { cards } = game\r\n    for (let i = 0; i < Object.keys(cards).length; i++) {\r\n        let player = Object.keys(cards)[i]\r\n        let newCards = cards[player]\r\n        if (newCards.length < 3) {\r\n            newCards.push(getRandomCard())\r\n        }\r\n        cards[player] = newCards\r\n    }\r\n    return cards\r\n}\r\n\r\nmodule.exports = {\r\n    getRandomCard,\r\n    generateCards,\r\n    Cards,\r\n    getCard,\r\n    resupplyCards\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/card_drop.f8713f77.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip.63e37b8e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip2.e1b8fb14.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip3.dff27e09.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button_click.923d6dfa.mp3\";","module.exports = __webpack_public_path__ + \"static/media/turn_end.e1720e84.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bg-lower.b0652969.mp3\";","module.exports = {\r\n    PLAYER_CONNECTED: 'PLAYER_CONNECTED',\r\n    PLAYER_DISCONNECTED: 'PLAYER_DISCONNECTED',\r\n    VERIFY_USER: 'VERIFY_USER',\r\n    LOGOUT: 'LOGOUT',\r\n    INVITATION: 'INVITATION',\r\n    INVITATION_ACCEPTED: 'INVITATION_ACCEPTED',\r\n    GAME_STARTED: 'GAME_STARTED',\r\n    GAME_MOVE: 'GAME_MOVE',\r\n    WIN: 'WIN',\r\n    REFRESH_PLAYERS: 'REFRESH_PLAYERS',\r\n    GAME_CREATED: 'GAME_CREATED',\r\n    WALKTHROUGH_READY: 'WALKTHROUGH_READY'\r\n}\r\n","const roundAndConvertVolume = volume => {\r\n    return Math.round((10 * parseInt(volume)) / 100) / 10\r\n}\r\n\r\nmodule.exports = { roundAndConvertVolume }\r\n","const Result = {\r\n    GAME_TIE: 'GAME_TIE',\r\n    TURN_WIN: 'TURN_WIN',\r\n    TURN_TIE: 'TURN_TIE',\r\n    GAME_WIN: 'GAME_WIN',\r\n    NOTHING: 'NOTHING'\r\n}\r\n\r\nmodule.exports = {\r\n    Result\r\n}\r\n"],"sourceRoot":""}