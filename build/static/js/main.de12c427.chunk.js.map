{"version":3,"sources":["Components/Popup/Types.js","Components/Header/HeaderBar.jsx","Components/Header/Settings.jsx","Components/Header/Header.jsx","Components/Popup/Popups/GenericPopup.jsx","Components/Popup/Popups/ConfirmationPopup.jsx","Components/Game/Timer.jsx","Components/Popup/Popups/InvitationPopup.jsx","Components/Popup/Popups/DisconnectedPopup.jsx","Components/Popup/Popups/CardPopup.jsx","Components/Popup/Popups.jsx","Components/Game/Card.jsx","Components/Game/Cards.jsx","Components/Game/Key.jsx","Components/Game/Keyboard.jsx","Components/Game/PlayerState.jsx","Components/Game/Content.jsx","Components/Game/Game.jsx","Components/PlayersBrowser/BrowserEntry.jsx","Components/PlayersBrowser/Functions.js","Components/PlayersBrowser/PlayersBrowser.jsx","Components/LoginPage/LoginPage.jsx","Components/Game/Walkthrough.jsx","App.jsx","index.js","Shared/Functions.js","Game/Cards/Cards.js","Shared/Enums.js","Resources/Sounds/popup.mp3","Resources/Sounds/card_flip.mp3","Resources/Sounds/card_flip2.mp3","Resources/Sounds/card_drop.mp3","Resources/Sounds/card_flip3.mp3","Resources/Sounds/button_click.mp3","Resources/Sounds/bg-lower.mp3","Shared/Events.js","Components/Header/Functions.js","Components/Game/Functions.js"],"names":["module","exports","POPUP_GENERIC","POPUP_CONFIRMATION","POPUP_INVITATION","POPUP_DISCONNECTED","POPUP_CARD","HeaderBar","_ref","_ref$title","title","_ref$score","score","react_default","a","createElement","className","me","concat","myScore","enemyScore","enemy","roundAndConvertVolume","require","Settings","onChange","e","target","id","_this","props","setSettings","soundVol","value","musicVol","volumeSettings","_this2","this","react_icons_kit_default","icon","cog","size","volume_2","type","min","max","note","Component","Header","state","Header_Settings","Header_HeaderBar","location","pathname","Object","objectSpread","withRouter","GenericPopup","console","log","popupData","content","onClick","onClose","react_icons_kit","cross","dangerouslySetInnerHTML","__html","ConfirmationPopup","onConfirm","Timer","timeInterval","time","wrapperStyle","circleStyle","animation","propsStyle","setInterval","setState","prevState","clearInterval","onEnd","style","display","r","cx","cy","InvitationPopup","accepted","onAccept","onDecline","message","nickname","Game_Timer","DisconnectedPopup","CardPopup","src","cardId","alt","description","Popups","popups","newPopup","components","newPopups","filter","popup","Popup","key","displayStyle","length","isDisconnected","Popups_DisconnectedPopup","map","i","Fragment","bundle_default","volume","soundVolume","popupSound","autoPlay","toConsumableArray","CardImage","isMine","isUsed","isDisabled","isBlocked","isDiscardEnabled","classes","draggable","onMouseDown","userDrag","CardDescription","_ref2","displayTooltip","CardOverlay","_ref3","onDiscard","Card","cardClasses","Card_CardImage","card","Card_CardOverlay","onUseAbort","index","Card_CardDescription","CardsData","Cards","areMine","getBg","move","animationName","animationDuration","animationIterationCount","animationTimingFunction","animationDirection","animationFillMode","GenerateCard","blockCounter","usedCardIndexes","data","JSON","stringify","lib","enabled","onDragStart","playSound","flipSound1","setCardTargetHighlight","onDragEnd","flipSound2","Game_Card","CardsSpawner","_this$props","cards","player","game","blockCounters","socketId","cardData","doesMeetConditions","Key","clickHandler","isClicked","moveHandler","letter","playerSocketId","getStyle","backgroundColor","textDecoration","borderWidth","borderStyle","borderColor","Keyboard","clickedIndex","generateKeys","result","_loop","String","fromCharCode","toUpperCase","myKeys","keys","includes","push","Game_Key","setSelectedKey","clearKeyMove","Chains","getSide","side","Shield","PlayerState","getIcon","PlayerState_Chains","PlayerState_Shield","getPlayerState","playerSockets","Content","keyMove","cardMoves","buttonClick","colorDisplayWord","word","guessed","Array","from","forEach","g","color","onDrop","parse","updateUsedCardIndexes","some","cardMove","setTimeout","cardDropSound","onMove","onEndTurn","moves","_this$state","discarded","0","1","2","flipSound3","DEFINITION_CARD","definitions","randomIndex","Math","floor","random","addPopup","LOOK_UP_CARD","enemySocket","x","enemyCards","randomEnemyCard","endTurnButton","text","disabled","displayWord","wordClass","isCardTargetHighlight","Game_PlayerState","onMoveTimeout","types","Game_Keyboard","newCardMoves","parseInt","isMove","winHandler","setScore","GAME_MOVE","WIN","Result","Game","gameFromProps","allowMove","myCards","cardTargetHighlight","soundSrc","discardMoves","initializeSocket","socket","on","setMove","winner","TURN_WIN","TURN_TIE","winObj","returnToMenu","history","_ref3$moves","allMoves","emit","bool","newIndexes","newGame","mySocketId","val","newDiscardMoves","event","isDown","myBlocked","keyCode","muteMusic","document","addEventListener","ctrlPressHandler","_this3","removeEventListener","_this4","my","gameCards","enemySocketId","onEnded","Components_Game_Cards","Components_Game_Content","setTitle","BrowserEntry","isButtonDisabled","preventDefault","invitationHandler","_isMounted","extractBrowserPlayers","connectedPlayers","assign","values","isInGame","PlayersBrowser_BrowserEntry","indexOf","PlayersBrowser","playersInBrowser","searchedPlayer","searchPlayer","input","players","item","toLowerCase","SearchedPlayer","placeholder","dist_default","width","height","entry","React","LoginPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loginHandler","inputRef","current","VERIFY_USERNAME","isTaken","loginPlayer","submitOnEnter","which","createRef","ref","maxLength","onKeyDown","Description","Walkthrough","buttonVisibility","onReady","WALKTHROUGH_READY","gameId","buttonClass","Walkthrough_Description","uuidv4","socketUrl","Logo","App","config","disconnectedTimeoutMs","defaultVolumeSettings","isInCache","localStorage","getItem","undefined","_ref$id","_ref$socketId","INVITATION","io","ms","PLAYER_CONNECTED","PLAYER_DISCONNECTED","REFRESH_PLAYERS","s","INVITATION_ACCEPTED","fromSocketId","to","GAME_CREATED","_ref4","GAME_STARTED","_ref5","setGame","_ref6","logoutPlayer","LOGOUT","_ref7","_ref7$title","_ref7$score","_ref8","_ref9","cachedVolumeSettings","setItem","muted","_ref10","_ref10$type","popupsRef","isLogoVisible","_this5","App_Logo","Components_Header_Header","bgMusic","loop","Popup_Popups","Switch","Route","exact","path","Components_LoginPage_LoginPage","render","Components_PlayersBrowser_PlayersBrowser","Components_Game_Walkthrough","Components_Game_Game","ReactDOM","BrowserRouter","src_App_0","getElementById","nextPlayerIndex","_ref2$game","p","use","currentGame","RANDOM_CORRECT_LETTER_CARD","guessedArr","arr","char","randomCorrectLetter","playerSocket","ADDITIONAL_TURN_CARD","REMOVE_ONE_UNFITTING_CARD","wordKeys","user","candidates","REMOVE_TWO_UNFITTING_CARD","BLOCK_CARD","IMMUNE_TO_BLOCK_CARD","mySocket","SWAP_RANDOM_CARDS","randomIndexOfMine","randomIndexOfOpponent","isSwap","doOtherCardsExist","RANDOMIZE_YOURSELF_CARD","excluded","arguments","included","getRandomCard","RANDOMIZE_ENEMY_CARD","_ref11","enemyCardAmount","randomKey","generateCards","amount","getCard","resupplyCards","newCards","GAME_TIE","GAME_WIN","NOTHING","__webpack_require__","round","_ref$setScore","_ref$game","_ref$winner","_ref$returnToMenu","returnState"],"mappings":"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","file":"static/js/main.de12c427.chunk.js","sourcesContent":["module.exports = {\r\n    POPUP_GENERIC: 'POPUP_GENERIC',\r\n    POPUP_CONFIRMATION: 'POPUP_CONFIRMATION',\r\n    POPUP_INVITATION: 'POPUP_INVITATION',\r\n    POPUP_DISCONNECTED: 'POPUP_DISCONNECTED',\r\n    POPUP_CARD: 'POPUP_CARD'\r\n}\r\n","import React from 'react'\r\n\r\nconst HeaderBar = ({ title = null, score = null }) => {\r\n    return (\r\n        <div className='column auto has-background-dark header'>\r\n            {score && (\r\n                <div className='title has-text-white-ter'>\r\n                    <div className='scoreHeader'>\r\n                        <div className='flex-item me'>\r\n                            <span>{score.me}</span>\r\n                        </div>\r\n                        <div className='flex-item score'>\r\n                            <span>{`${score.myScore}:${\r\n                                score.enemyScore\r\n                            }`}</span>\r\n                        </div>\r\n                        <div className='flex-item enemy'>\r\n                            <span>{score.enemy}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {title && <h1 className='title has-text-white-ter'>{title}</h1>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderBar\r\n","import React, { Component } from 'react'\r\nimport Icon from 'react-icons-kit'\r\nimport { volume_2 } from 'react-icons-kit/ikons/volume_2'\r\nimport { note } from 'react-icons-kit/entypo/note'\r\nimport { cog } from 'react-icons-kit/fa/cog'\r\n\r\nconst { roundAndConvertVolume } = require('./Functions')\r\n\r\nclass Settings extends Component {\r\n    onChange = e => {\r\n        if (e.target.id === 'sound-slider-thumb') {\r\n            this.props.setSettings({\r\n                soundVol: roundAndConvertVolume(e.target.value),\r\n                musicVol: this.props.volumeSettings.musicVol\r\n            })\r\n        } else if (e.target.id === 'music-slider-thumb') {\r\n            this.props.setSettings({\r\n                soundVol: this.props.volumeSettings.soundVol,\r\n                musicVol: roundAndConvertVolume(e.target.value)\r\n            })\r\n        }\r\n    }\r\n\r\n    //todo wobbles when gear rotates\r\n    //playersbrowser nth child even && odd\r\n\r\n    render() {\r\n        let soundVol = this.props.volumeSettings.soundVol * 100\r\n        let musicVol = this.props.volumeSettings.musicVol * 100\r\n        return (\r\n            <div className='options-btn'>\r\n                <div className='gear-icon-wrapper'>\r\n                    <Icon icon={cog} size={32} className='gear-icon' />\r\n                </div>\r\n                <div className='dropdown-options border-neon border-neon-translucent'>\r\n                    <div className='settings-wrapper'>\r\n                        <div className='options-items'>\r\n                            <div className='options-item'>\r\n                                <Icon\r\n                                    className='options-icon'\r\n                                    icon={volume_2}\r\n                                    size={32}\r\n                                />\r\n                                <span className='options-item-description'>{`Sound volume: ${soundVol}%`}</span>\r\n                                <div className='slider-wrapper input-neon border-neon border-neon-violet'>\r\n                                    <input\r\n                                        type='range'\r\n                                        min='0'\r\n                                        max='100'\r\n                                        id='sound-slider-thumb'\r\n                                        className='options-slider slider'\r\n                                        value={soundVol}\r\n                                        onChange={e => this.onChange(e)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className='options-item'>\r\n                                <Icon\r\n                                    className='options-icon'\r\n                                    icon={note}\r\n                                    size={32}\r\n                                />\r\n                                <span className='options-item-description'>{`Music volume: ${musicVol}%`}</span>\r\n                                <div className='slider-wrapper input-neon border-neon border-neon-violet'>\r\n                                    <input\r\n                                        type='range'\r\n                                        min='0'\r\n                                        max='100'\r\n                                        id='music-slider-thumb'\r\n                                        className='options-slider slider'\r\n                                        value={musicVol}\r\n                                        onChange={e => this.onChange(e)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Settings\r\n","import React, { Component } from 'react'\r\nimport HeaderBar from './HeaderBar'\r\nimport Settings from './Settings'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './Header.css'\r\n\r\nclass Header extends Component {\r\n    state = { volumeSettings: this.props.volumeSettings }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.location.pathname === '/game') {\r\n            return {\r\n                volumeSettings: { ...props.volumeSettings, musicVol: 0 }\r\n            }\r\n        }\r\n        return { volumeSettings: props.volumeSettings }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='row header width-full semi-bold bg-dark color-lightblue padding-sm height-sm text-lg content-hcenter content-vcenter'>\r\n                <Settings\r\n                    volumeSettings={this.state.volumeSettings}\r\n                    setSettings={this.props.setSettings}\r\n                />\r\n                <HeaderBar title={this.props.title} score={this.props.score} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Header)\r\n","import React from 'react'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nconst GenericPopup = props => {\r\n    const onClose = () => {\r\n        props.popupData.onClose(props.popupData.id)\r\n    }\r\n    console.log(props.popupData.content)\r\n\r\n    return (\r\n        <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n            <div className='generic-popup-title'>\r\n                <span>{props.popupData.title}</span>\r\n                <button onClick={onClose} className='btn-popup-close'>\r\n                    <Icon icon={cross} size='1.6vh' className='close-icon' />\r\n                </button>\r\n            </div>\r\n            <div\r\n                className='generic-popup-content'\r\n                dangerouslySetInnerHTML={{\r\n                    __html: props.popupData.content\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GenericPopup\r\n","import React from 'react'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nconst ConfirmationPopup = props => {\r\n    const onClose = () => {\r\n        props.popupData.onConfirm()\r\n        props.popupData.onClose(props.popupData.id)\r\n    }\r\n\r\n    return (\r\n        <div className='generic-popup border-neon border-neon-red text-nunito bg-khaki'>\r\n            <div className='generic-popup-title'>\r\n                <span>{props.popupData.title}</span>\r\n                <button onClick={onClose} className='btn-popup-close'>\r\n                    <Icon icon={cross} size='1.6vh' className='close-icon' />\r\n                </button>\r\n            </div>\r\n            <div className='generic-popup-content'>\r\n                <div>{props.popupData.content}</div>\r\n                <div className='popup-buttons'>\r\n                    <button\r\n                        className='border-neon border-neon-lime'\r\n                        onClick={() => {\r\n                            onClose()\r\n                        }}\r\n                    >\r\n                        <span>OK</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfirmationPopup\r\n","import React, { Component } from 'react'\r\n\r\nclass Timer extends Component {\r\n    timeInterval = null\r\n    state = {\r\n        time: this.props.time,\r\n        wrapperStyle: {},\r\n        circleStyle: {\r\n            animation: `countdown ${this.props.time}s linear 1 forwards`\r\n        },\r\n        propsStyle: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timeInterval = setInterval(() => {\r\n            this.setState(\r\n                prevState => ({ time: prevState.time - 1 }),\r\n                () => {\r\n                    if (this.state.time === 0) {\r\n                        clearInterval(this.timeInterval)\r\n                        this.props.onEnd && this.props.onEnd() //execute only if there is a callback provided\r\n                        this.setState({\r\n                            style: { display: 'none', ...this.state.style }\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timeInterval)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.state.wrapperStyle} className='timer'>\r\n                <div id='timer-number'>{this.state.time}</div>\r\n                <svg className='timer-svg'>\r\n                    <circle\r\n                        style={this.state.circleStyle}\r\n                        r='18'\r\n                        cx='20'\r\n                        cy='20'\r\n                    />\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer\r\n","import React from 'react'\r\nimport Timer from '../../Game/Timer'\r\nconst InvitationPopup = props => {\r\n    const onClose = accepted => {\r\n        if (accepted) {\r\n            props.popupData.onAccept()\r\n        } else {\r\n            props.popupData.onDecline()\r\n        }\r\n        props.popupData.onClose(props.popupData.id)\r\n    }\r\n\r\n    const message = `You have been invited by ${props.popupData.nickname}.`\r\n\r\n    const onTimeout = () => {\r\n        props.popupData.onDecline()\r\n        props.popupData.onClose(props.popupData.id)\r\n    }\r\n\r\n    return (\r\n        <div className='generic-popup border-neon border-neon-red text-nunito bg-khaki'>\r\n            <div className='generic-popup-title'>\r\n                <span>New game invitation!</span>\r\n            </div>\r\n            <div className='invitation-popup-content'>\r\n                <div className='msg'>{message}</div>\r\n                <Timer time={10} onEnd={onTimeout} />\r\n                <div className='popup-buttons'>\r\n                    <button\r\n                        className='border-neon border-neon-lime'\r\n                        onClick={() => {\r\n                            onClose(true)\r\n                        }}\r\n                    >\r\n                        <span>Accept</span>\r\n                    </button>\r\n                    <button\r\n                        className='border-neon border-neon-orange'\r\n                        onClick={() => {\r\n                            onClose(false)\r\n                        }}\r\n                    >\r\n                        <span>Decline</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InvitationPopup\r\n","import React from 'react'\r\n\r\nconst DisconnectedPopup = () => {\r\n    return (\r\n        <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n            <div className='disconnected-popup-content'>\r\n                <div className='msg'>\r\n                    You have been disconnected from the server.\r\n                </div>\r\n                <div className='spinner-wrapper'>\r\n                    <span className='fa fa-spinner fa-spin fa-3x' />\r\n                </div>\r\n                <div className='msg'>Trying to reconnect...</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisconnectedPopup\r\n","import React from 'react'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nconst CardPopup = props => {\r\n    const onClose = () => {\r\n        props.popupData.onClose(props.popupData.id)\r\n    }\r\n\r\n    return (\r\n        <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n            <div className='generic-popup-title'>\r\n                <span />\r\n                <button onClick={onClose} className='btn-popup-close'>\r\n                    <Icon icon={cross} size='1.6vh' className='close-icon' />\r\n                </button>\r\n            </div>\r\n            <div className='lookup-card-wrapper'>\r\n                <img\r\n                    className='lookup-card-display'\r\n                    src={`images/cards/${props.popupData.cardId}.svg`}\r\n                    alt='Card'\r\n                />\r\n                <span\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: props.popupData.description\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardPopup\r\n","import React, { Component } from 'react'\r\nimport GenericPopup from './Popups/GenericPopup'\r\nimport ConfirmationPopup from './Popups/ConfirmationPopup'\r\nimport InvitationPopup from './Popups/InvitationPopup'\r\nimport DisconnectedPopup from './Popups/DisconnectedPopup'\r\nimport CardPopup from './Popups/CardPopup'\r\nimport {\r\n    // eslint-disable-next-line\r\n    POPUP_GENERIC,\r\n    // eslint-disable-next-line\r\n    POPUP_CONFIRMATION,\r\n    // eslint-disable-next-line\r\n    POPUP_INVITATION,\r\n    // eslint-disable-next-line\r\n    POPUP_DISCONNECTED,\r\n    // eslint-disable-next-line\r\n    POPUP_CARD\r\n} from './Types'\r\nimport './Popup.css'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nclass Popups extends Component {\r\n    state = { popups: [], newPopup: null }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.newPopup !== props.newPopup) {\r\n            if (props.newPopup)\r\n                return {\r\n                    newPopup: props.newPopup,\r\n                    popups: [...state.popups, props.newPopup]\r\n                }\r\n        }\r\n        return null\r\n    }\r\n\r\n    components = {\r\n        POPUP_GENERIC: GenericPopup,\r\n        POPUP_CONFIRMATION: ConfirmationPopup,\r\n        POPUP_INVITATION: InvitationPopup,\r\n        POPUP_DISCONNECTED: DisconnectedPopup,\r\n        POPUP_CARD: CardPopup\r\n    }\r\n\r\n    onClose = id => {\r\n        let newPopups = this.state.popups.filter(popup => {\r\n            return popup.popupData.id !== id\r\n        })\r\n        this.setState({ popups: newPopups })\r\n    }\r\n\r\n    Popup = ({ type, popupData }) => {\r\n        let Component = this.components[type]\r\n        return (\r\n            <Component\r\n                key={popupData.id}\r\n                popupData={{ ...popupData, onClose: this.onClose }}\r\n            />\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let displayStyle = this.state.popups.length === 0 ? 'none' : 'flex'\r\n        return (\r\n            <div style={{ display: displayStyle }} className='popups-wrapper'>\r\n                {this.props.isDisconnected === true ? (\r\n                    <DisconnectedPopup />\r\n                ) : null}\r\n                {this.state.popups &&\r\n                    this.state.popups.map((popup, i) => {\r\n                        return (\r\n                            <React.Fragment key={i}>\r\n                                <this.Popup\r\n                                    key={i}\r\n                                    type={popup.type}\r\n                                    popupData={popup.popupData}\r\n                                />\r\n                                <ReactAudioPlayer\r\n                                    volume={this.props.soundVolume}\r\n                                    src={popupSound}\r\n                                    autoPlay\r\n                                />\r\n                            </React.Fragment>\r\n                        )\r\n                    })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Popups\r\n","import React, { Component } from 'react'\r\nimport './Cards.css'\r\n\r\nconst CardImage = ({\r\n    id,\r\n    isMine,\r\n    isUsed,\r\n    isDisabled,\r\n    isBlocked,\r\n    isDiscardEnabled\r\n}) => {\r\n    let classes = 'card-image '\r\n    if (isUsed || isDisabled || isBlocked || isDiscardEnabled)\r\n        classes += 'card-image-used '\r\n\r\n    if (isMine) {\r\n        return (\r\n            <img\r\n                draggable={!isDisabled}\r\n                onMouseDown={() => {\r\n                    return isDisabled ? false : true\r\n                }}\r\n                className={classes}\r\n                src={`images/cards/${id}.svg`}\r\n                alt='Playing card.'\r\n            />\r\n        )\r\n    } else {\r\n        return (\r\n            <img\r\n                draggable='false'\r\n                onMouseDown={() => {\r\n                    return false\r\n                }}\r\n                style={{ userDrag: 'none' }}\r\n                className={`${classes} default-pointer`}\r\n                src={`images/cards/placeholder.svg`}\r\n                alt='Playing card.'\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst CardDescription = ({ description, displayTooltip }) => {\r\n    if (displayTooltip) {\r\n        return (\r\n            <div\r\n                className='card-info'\r\n                dangerouslySetInnerHTML={{ __html: description }}\r\n            />\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nconst CardOverlay = ({\r\n    isUsed,\r\n    isDisabled,\r\n    isBlocked,\r\n    onClick,\r\n    isDiscardEnabled,\r\n    onDiscard\r\n}) => {\r\n    if (isDiscardEnabled) {\r\n        return (\r\n            <button className='card-discard-button' onClick={onDiscard}>\r\n                <div>\r\n                    <span>Click to discard</span>\r\n                </div>\r\n            </button>\r\n        )\r\n    } else if (isUsed) {\r\n        return (\r\n            <button className='card-use-abort-button' onClick={onClick}>\r\n                <div>\r\n                    <span>Click to abort</span>\r\n                </div>\r\n            </button>\r\n        )\r\n    } else if (isDisabled) {\r\n        return (\r\n            <div className='card-disabled'>\r\n                <span>\r\n                    This card doesn't meet the conditions. Check the\r\n                    description.\r\n                </span>\r\n            </div>\r\n        )\r\n    } else if (isBlocked) {\r\n        return (\r\n            <div className='card-disabled'>\r\n                <span>This card is disabled.</span>\r\n            </div>\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nclass Card extends Component {\r\n    cardClasses = () => {\r\n        let classes = 'card '\r\n        if (this.props.isMine) classes += 'hover-pointer'\r\n        return classes\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.cardClasses()}>\r\n                <CardImage\r\n                    id={this.props.card.id}\r\n                    isDisabled={this.props.isDisabled}\r\n                    isMine={this.props.isMine}\r\n                    isUsed={this.props.isUsed}\r\n                    isBlocked={this.props.isBlocked}\r\n                    isDiscardEnabled={this.props.isDiscardEnabled}\r\n                />\r\n                <CardOverlay\r\n                    isDiscardEnabled={this.props.isDiscardEnabled}\r\n                    isDisabled={this.props.isDisabled}\r\n                    isUsed={this.props.isUsed}\r\n                    isBlocked={this.props.isBlocked}\r\n                    onClick={() => {\r\n                        this.props.onUseAbort()\r\n                    }}\r\n                    onDiscard={() => {\r\n                        this.props.onDiscard(this.props.index)\r\n                    }}\r\n                />\r\n                <CardDescription\r\n                    description={this.props.card.description}\r\n                    displayTooltip={this.props.displayTooltip}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\r\nimport Card from './Card'\r\nimport './Cards.css'\r\n\r\nimport { Draggable } from 'react-drag-and-drop'\r\n\r\nimport flipSound1 from '../../Resources/Sounds/card_flip.mp3'\r\nimport flipSound2 from '../../Resources/Sounds/card_flip2.mp3'\r\nconst { Cards: CardsData } = require('../../Game/Cards/Cards')\r\n\r\nclass Cards extends Component {\r\n    state = { displayTooltip: this.props.areMine }\r\n\r\n    getBg = () => {\r\n        if (this.props.move) {\r\n            return {\r\n                animationName: 'moveFlashing',\r\n                animationDuration: '400ms',\r\n                animationIterationCount: 'infinite',\r\n                animationTimingFunction: 'linear',\r\n                animationDirection: 'alternate-reverse',\r\n                animationFillMode: 'forwards'\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    GenerateCard = ({ card, isMine, index, isDisabled, blockCounter }) => {\r\n        if (isMine) {\r\n            let isUsed = this.props.usedCardIndexes[index]\r\n            let data = JSON.stringify({ cardId: card.id, index })\r\n            let isBlocked = false\r\n            if (blockCounter > 0 && blockCounter <= 2) {\r\n                isBlocked = true\r\n            }\r\n\r\n            return (\r\n                <Draggable\r\n                    enabled={isMine && !isUsed && !isDisabled && !isBlocked}\r\n                    onDragStart={() => {\r\n                        this.setState({ displayTooltip: false })\r\n                        this.props.playSound(flipSound1)\r\n                        this.props.setCardTargetHighlight(true)\r\n                    }}\r\n                    onDragEnd={() => {\r\n                        this.setState({ displayTooltip: true })\r\n                        this.props.playSound(flipSound2)\r\n                        this.props.setCardTargetHighlight(false)\r\n                    }}\r\n                    type='card'\r\n                    data={data}\r\n                >\r\n                    <li>\r\n                        <Card\r\n                            isDisabled={isDisabled}\r\n                            isBlocked={isBlocked}\r\n                            index={index}\r\n                            card={card}\r\n                            displayTooltip={this.state.displayTooltip}\r\n                            isDiscardEnabled={this.props.isDiscardEnabled}\r\n                            isMine={isMine}\r\n                            isUsed={isUsed}\r\n                            onUseAbort={() => {\r\n                                this.props.onUseAbort(index)\r\n                            }}\r\n                            onDiscard={index => {\r\n                                if (this.props.move) {\r\n                                    this.props.onDiscard(index, card.id)\r\n                                }\r\n                            }}\r\n                        />\r\n                    </li>\r\n                </Draggable>\r\n            )\r\n        } else {\r\n            return (\r\n                <li>\r\n                    <Card\r\n                        card={card}\r\n                        displayTooltip={this.state.displayTooltip}\r\n                        isMine={isMine}\r\n                    />\r\n                </li>\r\n            )\r\n        }\r\n    }\r\n\r\n    CardsSpawner = () => {\r\n        let { cards, areMine, player, game } = this.props\r\n        let blockCounter = 0\r\n        if (game !== null) blockCounter = game.blockCounters[player.socketId]\r\n        if (cards !== null) {\r\n            return cards.map((card, i) => {\r\n                let cardData = CardsData[card.id]\r\n                return (\r\n                    <this.GenerateCard\r\n                        card={card}\r\n                        index={i}\r\n                        key={i}\r\n                        isMine={areMine}\r\n                        isDisabled={!cardData.doesMeetConditions(game, player)}\r\n                        blockCounter={blockCounter}\r\n                    />\r\n                )\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='cards' style={this.getBg()}>\r\n                <span className='cards-title'>\r\n                    {this.props.title && this.props.title}\r\n                </span>\r\n                <div className='cards-wrapper'>\r\n                    <ul>\r\n                        <this.CardsSpawner />\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards\r\n","import React, { Component } from 'react'\r\n\r\nclass Key extends Component {\r\n    clickHandler = () => {\r\n        this.props.onClick()\r\n        if (this.props.isClicked === false) {\r\n            this.props.moveHandler({\r\n                move: {\r\n                    type: 'key',\r\n                    key: this.props.letter,\r\n                    playerSocketId: this.props.player.socketId\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    getStyle = () => {\r\n        let style = null\r\n        style = { backgroundColor: '#519C3F' }\r\n        if (this.props.isUsed) {\r\n            style = { backgroundColor: '#555', textDecoration: 'none' }\r\n        }\r\n        if (this.props.isClicked) {\r\n            style = {\r\n                ...style,\r\n                borderWidth: '0.3vh',\r\n                borderStyle: 'solid',\r\n                borderColor: 'orange'\r\n            }\r\n        }\r\n\r\n        return style\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                style={this.getStyle()}\r\n                onClick={this.clickHandler}\r\n                className='key'\r\n            >\r\n                {this.props.letter}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Key\r\n","import React, { Component } from 'react'\r\nimport Key from './Key'\r\n\r\nclass Keyboard extends Component {\r\n    state = { clickedIndex: null }\r\n\r\n    generateKeys = () => {\r\n        let result = []\r\n        for (let i = 65; i <= 90; i++) {\r\n            let letter = String.fromCharCode(i).toUpperCase()\r\n            let myKeys = this.props.keys.filter(\r\n                key => key.playerSocketId === this.props.player.socketId\r\n            )\r\n            myKeys = myKeys.map(key => {\r\n                return key.key\r\n            })\r\n            let isUsed = myKeys.includes(letter)\r\n\r\n            let isClicked = this.props.clickedIndex === i\r\n\r\n            let onClick = index => {\r\n                if (this.props.clickedIndex === index) {\r\n                    this.props.setSelectedKey(null)\r\n                    this.props.clearKeyMove()\r\n                } else {\r\n                    this.props.setSelectedKey(index)\r\n                }\r\n            }\r\n            result.push(\r\n                <Key\r\n                    moveHandler={this.props.moveHandler}\r\n                    onClick={() => onClick(i)}\r\n                    key={i}\r\n                    player={this.props.player}\r\n                    letter={letter}\r\n                    isUsed={isUsed}\r\n                    isClicked={isClicked}\r\n                />\r\n            )\r\n        }\r\n        return result\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='keyboard border-neon border-light-translucent'>\r\n                {this.generateKeys().map(key => {\r\n                    return key\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Keyboard\r\n","import React, { Component } from 'react'\r\n\r\nconst Chains = props => {\r\n    let getSide = props.side\r\n    return (\r\n        <div className={'state-chains ' + getSide}>\r\n            <span>{`Cards blocked for ${props.state} turns.`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Shield = props => {\r\n    let getSide = props.side\r\n    let state = props.state * -1\r\n    return (\r\n        <div className={'state-shield ' + getSide}>\r\n            <span>{`Immune to block cards for ${state} turns.`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass PlayerState extends Component {\r\n    getIcon = (state, side) => {\r\n        if (state > 0) return <Chains state={state} side={side} />\r\n        else if (state < 0) return <Shield state={state} side={side} />\r\n        else return null\r\n    }\r\n\r\n    getPlayerState = me => {\r\n        let { game, player } = this.props\r\n        if (player === null || game === null) return null\r\n        if (me) {\r\n            return this.getIcon(game.blockCounters[player.socketId], 'left-1vh')\r\n        } else {\r\n            let socketId = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            return this.getIcon(game.blockCounters[socketId], 'right-1vh')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='player-state'>\r\n                {this.getPlayerState(true)}\r\n                {this.getPlayerState(false)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayerState\r\n","import React, { Component } from 'react'\r\nimport { Droppable } from 'react-drag-and-drop'\r\nimport Keyboard from './Keyboard'\r\nimport Timer from './Timer'\r\nimport PlayerState from './PlayerState'\r\nimport { POPUP_CARD } from '../Popup/Types'\r\nimport './Content.css'\r\nimport cardDropSound from '../../Resources/Sounds/card_drop.mp3'\r\nimport flipSound3 from '../../Resources/Sounds/card_flip3.mp3'\r\nimport buttonClick from '../../Resources/Sounds/button_click.mp3'\r\nconst { Cards: CardsData } = require('../../Game/Cards/Cards')\r\n\r\nclass Content extends Component {\r\n    state = {\r\n        keyMove: null,\r\n        cardMoves: [],\r\n        clickedIndex: null,\r\n        isDiscardEnabled: false\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        let newCardMoves = state.cardMoves\r\n        Object.keys(props.usedCardIndexes).forEach(index => {\r\n            index = parseInt(index)\r\n            let val = props.usedCardIndexes[index]\r\n            if (val === false) {\r\n                newCardMoves = newCardMoves.filter(move => {\r\n                    return move.index !== index\r\n                })\r\n            }\r\n        })\r\n        return {\r\n            cardMoves: newCardMoves\r\n        }\r\n    }\r\n\r\n    setSelectedKey = state => {\r\n        this.props.playSound(buttonClick)\r\n        this.setState({ clickedIndex: state })\r\n    }\r\n\r\n    colorDisplayWord = word => {\r\n        word = word.toUpperCase()\r\n        let result = []\r\n        let { guessed } = this.props.game\r\n        let { socketId } = this.props.player\r\n        Array.from(word).forEach((letter, i) => {\r\n            let style = null\r\n            if (letter !== '_' && letter !== ' ') {\r\n                let key = guessed.filter(g => {\r\n                    return g.key === letter\r\n                })[0]\r\n                if (key.playerSocketId === socketId) {\r\n                    style = { color: '#0900ff' }\r\n                } else {\r\n                    style = { color: '#b92e34' }\r\n                }\r\n            }\r\n            result.push(\r\n                <span key={i} style={style}>\r\n                    {letter}\r\n                </span>\r\n            )\r\n        })\r\n        return result\r\n    }\r\n\r\n    onDrop = data => {\r\n        if (this.props.move) {\r\n            let card = JSON.parse(data.card)\r\n            let move = {\r\n                index: card.index,\r\n                type: 'card',\r\n                card: card.cardId,\r\n                playerSocketId: this.props.player.socketId\r\n            }\r\n\r\n            let { usedCardIndexes } = this.props\r\n            usedCardIndexes[card.index] = true\r\n            this.props.updateUsedCardIndexes(usedCardIndexes)\r\n\r\n            let isDuplicate = this.state.cardMoves.some(\r\n                cardMove => cardMove.index === card.index\r\n            )\r\n            if (isDuplicate === false) {\r\n                setTimeout(() => {\r\n                    this.props.playSound(cardDropSound)\r\n                }, 100)\r\n                this.setState({ cardMoves: [...this.state.cardMoves, move] })\r\n            }\r\n        }\r\n    }\r\n\r\n    onMove = ({ move }) => {\r\n        if (this.props.move) {\r\n            this.setState({ keyMove: move })\r\n        }\r\n    }\r\n\r\n    clearKeyMove = () => {\r\n        this.setState({\r\n            keyMove: null,\r\n            clickedIndex: null\r\n        })\r\n    }\r\n\r\n    onEndTurn = () => {\r\n        if (this.state.keyMove !== null || this.state.cardMoves.length > 0) {\r\n            if (this.props.move) {\r\n                let moves = []\r\n                let { keyMove, cardMoves } = this.state\r\n                if (keyMove !== null) moves.push(keyMove)\r\n                if (cardMoves !== []) moves = [...moves, ...cardMoves]\r\n                moves = moves.map(move => {\r\n                    return { ...move, discarded: false }\r\n                })\r\n                this.props.moveHandler({ moves })\r\n                this.setSelectedKey(null)\r\n                this.props.updateUsedCardIndexes({\r\n                    0: false,\r\n                    1: false,\r\n                    2: false\r\n                })\r\n                this.setState({\r\n                    keyMove: null,\r\n                    cardMoves: [],\r\n                    clickedIndex: null\r\n                })\r\n                this.props.playSound(flipSound3)\r\n                cardMoves.forEach(e => {\r\n                    if (e.card === CardsData.DEFINITION_CARD.id) {\r\n                        let definitions = this.props.game.word.definitions\r\n                        let randomIndex = Math.floor(\r\n                            Math.random() * definitions.length\r\n                        )\r\n                        this.props.addPopup({\r\n                            popupData: {\r\n                                title: 'Word definition',\r\n                                content: definitions[randomIndex]\r\n                            }\r\n                        })\r\n                    } else if (e.card === CardsData.LOOK_UP_CARD.id) {\r\n                        let enemySocket = this.props.game.playerSockets.filter(\r\n                            x => {\r\n                                return x.socketId !== this.props.player.socketId\r\n                            }\r\n                        )[0].socketId\r\n                        let enemyCards = this.props.game.cards[enemySocket]\r\n                        let randomIndexOfCard = Math.floor(\r\n                            Math.random() * enemyCards.length\r\n                        )\r\n                        let randomEnemyCard = enemyCards[randomIndexOfCard].id\r\n                        let { description } = CardsData[randomEnemyCard]\r\n                        this.props.addPopup({\r\n                            type: POPUP_CARD,\r\n                            popupData: {\r\n                                cardId: randomEnemyCard,\r\n                                description\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            this.props.addPopup({\r\n                popupData: {\r\n                    title: 'You need to move',\r\n                    content: \"You can't move without making any choice.\"\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    endTurnButton = () => {\r\n        let text = 'Waiting...'\r\n        if (this.props.move) text = 'End turn'\r\n        let classes =\r\n            'end-turn-btn button-pointer border-neon border-light-translucent '\r\n        if (this.props.move) classes += 'end-turn-btn-hover'\r\n\r\n        return (\r\n            <button\r\n                onClick={this.onEndTurn}\r\n                disabled={!this.props.move}\r\n                className={classes}\r\n            >\r\n                {text}\r\n            </button>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let displayWord = []\r\n        if (this.props.game !== null) {\r\n            displayWord = this.colorDisplayWord(this.props.game.displayWord)\r\n        }\r\n\r\n        let wordClass = 'word border-neon border-neon-violet '\r\n        if (this.props.isCardTargetHighlight && this.props.move)\r\n            wordClass += 'word-glow'\r\n\r\n        return (\r\n            <div className='content'>\r\n                <PlayerState\r\n                    player={this.props.player}\r\n                    game={this.props.game}\r\n                />\r\n                <div className='timer-wrapper'>\r\n                    {this.props.move && (\r\n                        <Timer time={30} onEnd={this.props.onMoveTimeout} />\r\n                    )}\r\n                </div>\r\n                <div className='game'>\r\n                    <Droppable types={['card']} onDrop={this.onDrop}>\r\n                        <div className={wordClass}>\r\n                            {displayWord.map(x => {\r\n                                return x\r\n                            })}\r\n                        </div>\r\n                    </Droppable>\r\n                    <div className='keyboard-wrapper'>\r\n                        <this.endTurnButton />\r\n                        {this.props.game && (\r\n                            <Keyboard\r\n                                player={this.props.player}\r\n                                moveHandler={this.onMove}\r\n                                keys={this.props.game.keys}\r\n                                setSelectedKey={this.setSelectedKey}\r\n                                clickedIndex={this.state.clickedIndex}\r\n                                clearKeyMove={this.clearKeyMove}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Content\r\n","import React, { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport ReactAudioPlayer from 'react-audio-player'\r\n\r\nimport './Game.css'\r\nimport Cards from './Cards'\r\nimport Content from './Content'\r\n\r\nconst { isMove } = require('../../Shared/Functions')\r\nconst { winHandler } = require('./Functions')\r\nconst { setScore } = require('../../Shared/Functions')\r\nconst { GAME_MOVE, WIN } = require('../../Shared/Events')\r\nconst { Result } = require('../../Shared/Enums')\r\nclass Game extends Component {\r\n    state = {\r\n        game: this.props.game,\r\n        gameFromProps: true,\r\n        allowMove: true,\r\n        myCards: null,\r\n        enemyCards: null,\r\n        cardTargetHighlight: false,\r\n        usedCardIndexes: { 0: false, 1: false, 2: false },\r\n        soundSrc: '',\r\n        isDiscardEnabled: false,\r\n        discardMoves: []\r\n    }\r\n\r\n    initializeSocket = () => {\r\n        const { socket } = this.props\r\n        socket.on(GAME_MOVE, ({ game }) => {\r\n            this.setState({ game: game }, () => {\r\n                this.props.setMove(\r\n                    isMove({ game: this.state.game, player: this.props.player })\r\n                )\r\n            })\r\n        })\r\n        socket.on(WIN, ({ winner, score, type, game }) => {\r\n            if (type === Result.TURN_WIN || type === Result.TURN_TIE) {\r\n                this.props.addPopup({\r\n                    popupData: {\r\n                        title: 'Guessed word',\r\n                        content: this.state.game.word.word\r\n                    }\r\n                })\r\n            }\r\n            let winObj = winHandler({\r\n                type,\r\n                setScore,\r\n                score,\r\n                game,\r\n                winner,\r\n                props: this.props,\r\n                returnToMenu: () => {\r\n                    this.props.history.push('/browser')\r\n                }\r\n            })\r\n\r\n            this.setState({ ...winObj })\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.gameFromProps) {\r\n            if (props.game !== state.game) {\r\n                setScore({\r\n                    player: props.player,\r\n                    game: props.game,\r\n                    setTitle: props.setTitle\r\n                })\r\n                return {\r\n                    gameFromProps: false,\r\n                    game: props.game\r\n                }\r\n            }\r\n            return null\r\n        }\r\n        return null\r\n    }\r\n\r\n    ctrlPressHandler(event, isDown) {\r\n        let { player } = this.props\r\n        let { game } = this.state\r\n        if (player !== null && game !== null) {\r\n            let mySocketId = player.socketId\r\n            let myBlocked = game.blockCounters[mySocketId]\r\n            if (event.keyCode === 17 && myBlocked <= 0) {\r\n                this.setState({ isDiscardEnabled: isDown })\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.socket && this.initializeSocket()\r\n        this.props.muteMusic(true)\r\n        document.addEventListener(\r\n            'keydown',\r\n            e => {\r\n                this.ctrlPressHandler(e, true)\r\n            },\r\n            false\r\n        )\r\n        document.addEventListener(\r\n            'keyup',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\r\n            'keydown',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n        document.removeEventListener(\r\n            'keyup',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n    }\r\n\r\n    moveHandler = ({ moves = null }) => {\r\n        if (this.state.allowMove === true) {\r\n            const { socket } = this.props\r\n            let allMoves = [...moves, ...this.state.discardMoves]\r\n            socket.emit(GAME_MOVE, { game: this.state.game, moves: allMoves })\r\n        }\r\n    }\r\n\r\n    onMoveTimeout = () => {\r\n        this.moveHandler({\r\n            moves: [\r\n                {\r\n                    type: 'key',\r\n                    key: '',\r\n                    playerSocketId: this.props.player.socketId\r\n                }\r\n            ]\r\n        })\r\n    }\r\n\r\n    setCardTargetHighlight = bool => {\r\n        this.setState({ cardTargetHighlight: bool })\r\n    }\r\n\r\n    updateUsedCardIndexes = newIndexes => {\r\n        this.setState({ usedCardIndexes: newIndexes })\r\n    }\r\n\r\n    onUseAbort = index => {\r\n        let newIndexes = this.state.usedCardIndexes\r\n        newIndexes[index] = false\r\n        this.updateUsedCardIndexes(newIndexes)\r\n    }\r\n\r\n    playSound = src => {\r\n        this.setState({ soundSrc: src })\r\n    }\r\n\r\n    onDiscard = (index, cardId) => {\r\n        let move = {\r\n            type: 'card',\r\n            card: cardId,\r\n            playerSocketId: this.props.player.socketId,\r\n            discarded: true\r\n        }\r\n        let newGame = this.state.game\r\n        let mySocketId = this.props.player.socketId\r\n        console.log(newGame.cards)\r\n        newGame.cards[mySocketId] = newGame.cards[mySocketId].filter(\r\n            (val, i) => {\r\n                return i !== index\r\n            }\r\n        )\r\n        console.log(newGame.cards)\r\n        let newDiscardMoves = this.state.discardMoves\r\n        newDiscardMoves.push(move)\r\n        this.setState({\r\n            discardMoves: newDiscardMoves,\r\n            game: newGame\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let cards = { my: null, enemy: null }\r\n        if (this.state.game !== null) {\r\n            let gameCards = this.state.game.cards\r\n            let mySocketId = this.props.player.socketId\r\n            cards.my = gameCards[mySocketId]\r\n            let enemySocketId = this.state.game.playerSockets.filter(x => {\r\n                return x.socketId !== this.props.player.socketId\r\n            })[0].socketId\r\n            cards.enemy = gameCards[enemySocketId]\r\n        }\r\n        return (\r\n            <div className='gameWrapper'>\r\n                <ReactAudioPlayer\r\n                    volume={this.props.soundVolume}\r\n                    src={this.state.soundSrc}\r\n                    autoPlay\r\n                    onEnded={() => {\r\n                        this.setState({ soundSrc: '' })\r\n                    }}\r\n                />\r\n                <Cards\r\n                    cards={cards.my}\r\n                    onUseAbort={this.onUseAbort}\r\n                    usedCardIndexes={this.state.usedCardIndexes}\r\n                    areMine={true}\r\n                    move={this.props.isMove}\r\n                    title='Your cards:'\r\n                    setCardTargetHighlight={this.setCardTargetHighlight}\r\n                    playSound={this.playSound}\r\n                    game={this.state.game}\r\n                    player={this.props.player}\r\n                    isDiscardEnabled={this.state.isDiscardEnabled}\r\n                    onDiscard={this.onDiscard}\r\n                />\r\n                <Content\r\n                    player={this.props.player}\r\n                    updateUsedCardIndexes={this.updateUsedCardIndexes}\r\n                    usedCardIndexes={this.state.usedCardIndexes}\r\n                    moveHandler={this.moveHandler}\r\n                    onMoveTimeout={this.onMoveTimeout}\r\n                    move={this.props.isMove}\r\n                    game={this.state.game}\r\n                    addPopup={this.props.addPopup}\r\n                    isCardTargetHighlight={this.state.cardTargetHighlight}\r\n                    playSound={this.playSound}\r\n                />\r\n                <Cards\r\n                    cards={cards.enemy}\r\n                    usedCardIndexes={{ 0: false, 1: false, 2: false }}\r\n                    areMine={false}\r\n                    move={!this.props.isMove}\r\n                    title='Enemy cards:'\r\n                    setCardTargetHighlight={this.setCardTargetHighlight}\r\n                    playSound={this.playSound}\r\n                    game={this.state.game}\r\n                    player={this.props.player}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nGame.propTypes = {\r\n    game: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    player: PropTypes.object,\r\n    history: PropTypes.object.isRequired,\r\n    isMove: PropTypes.bool.isRequired,\r\n    muteMusic: PropTypes.func.isRequired,\r\n    setMove: PropTypes.func.isRequired,\r\n    setTitle: PropTypes.func.isRequired,\r\n    soundVolume: PropTypes.number.isRequired\r\n}\r\n\r\nexport default withRouter(Game)\r\n","import React, { Component } from 'react'\r\nimport './PlayersBrowser.css'\r\nimport { POPUP_GENERIC } from '../../Components/Popup/Types'\r\n\r\nclass BrowserEntry extends Component {\r\n    state = {\r\n        isButtonDisabled: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true\r\n        this.setState({ isButtonDisabled: false })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.isButtonDisabled === true) {\r\n            setTimeout(() => {\r\n                if (this._isMounted === true) {\r\n                    this.setState({ isButtonDisabled: false })\r\n                }\r\n            }, 5000)\r\n        }\r\n    }\r\n\r\n    clickHandler = event => {\r\n        event.preventDefault()\r\n        if (this.state.isButtonDisabled === true) {\r\n            this.props.addPopup({\r\n                type: POPUP_GENERIC,\r\n                popupData: {\r\n                    title: 'Error!',\r\n                    content: '<p>You are inviting too fast. Wait 5 seconds</p>'\r\n                }\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isButtonDisabled: true\r\n            })\r\n\r\n            this.props.invitationHandler({\r\n                id: this.props.id,\r\n                socketId: this.props.socketId\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='browser-entry width-full'>\r\n                <span className='player-info'>\r\n                    <span className='nickname'>{this.props.nickname}</span>\r\n                </span>\r\n                <button\r\n                    onClick={e => {\r\n                        this.clickHandler(e)\r\n                    }}\r\n                    className='play border-neon border-neon-lime'\r\n                >\r\n                    Play\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BrowserEntry\r\n","import BrowserEntry from './BrowserEntry'\r\nimport React from 'react'\r\n\r\nexport const extractBrowserPlayers = ({\r\n    player,\r\n    connectedPlayers,\r\n    invitationHandler,\r\n    addPopup\r\n}) => {\r\n    connectedPlayers = Object.assign({}, connectedPlayers)\r\n\r\n    //* don't display the current player\r\n    if (player) {\r\n        delete connectedPlayers[player.nickname]\r\n    }\r\n\r\n    let result = []\r\n    Object.values(connectedPlayers).forEach(player => {\r\n        let { isInGame } = player\r\n        if (isInGame === false) {\r\n            result.push(\r\n                <BrowserEntry\r\n                    addPopup={addPopup}\r\n                    id={player.id}\r\n                    socketId={player.socketId}\r\n                    invitationHandler={invitationHandler}\r\n                    nickname={player.nickname}\r\n                    key={player.id}\r\n                    index={Object.values(connectedPlayers).indexOf(player)}\r\n                />\r\n            )\r\n        }\r\n    })\r\n    return result\r\n}\r\n","import React from 'react'\r\nimport './PlayersBrowser.css'\r\nimport Scrollbar from 'react-scrollbars-custom'\r\nimport { extractBrowserPlayers } from './Functions'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PlayersBrowser extends React.Component {\r\n    state = {\r\n        connectedPlayers: this.props.connectedPlayers,\r\n        playersInBrowser: extractBrowserPlayers({\r\n            player: this.props.player,\r\n            connectedPlayers: this.props.connectedPlayers,\r\n            invitationHandler: this.props.invitationHandler,\r\n            addPopup: this.props.addPopup\r\n        }),\r\n        searchedPlayer: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Players browser' })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.connectedPlayers !== props.connectedPlayers) {\r\n            return {\r\n                playersInBrowser: extractBrowserPlayers({\r\n                    player: props.player,\r\n                    connectedPlayers: props.connectedPlayers,\r\n                    invitationHandler: props.invitationHandler,\r\n                    addPopup: props.addPopup\r\n                }),\r\n                connectedPlayers: props.connectedPlayers\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    searchPlayer = e => {\r\n        let input = e.target.value\r\n        if (input === '') {\r\n            this.setState({ searchedPlayer: null })\r\n        } else {\r\n            let players = Object.keys(this.props.connectedPlayers)\r\n            players = players.filter(\r\n                item => item !== this.props.player.nickname\r\n            )\r\n            for (let i = 0; i < players.length; i++) {\r\n                if (players[i].toLowerCase().includes(input.toLowerCase())) {\r\n                    this.setState({\r\n                        searchedPlayer: this.props.connectedPlayers[players[i]]\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    SearchedPlayer = () => {\r\n        return extractBrowserPlayers({\r\n            player: this.props.player,\r\n            connectedPlayers: [this.state.searchedPlayer],\r\n            invitationHandler: this.props.invitationHandler,\r\n            addPopup: this.props.addPopup\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='players-browser container content-vcenter border-neon border-neon-orange'>\r\n                <div className='players-browser-title bg-lightgrey width-full text-xlg text-center'>\r\n                    <p>\r\n                        {this.props.player && (\r\n                            <span>\r\n                                You are logged in as{' '}\r\n                                <b>{this.props.player.nickname}</b>.\r\n                            </span>\r\n                        )}\r\n                    </p>\r\n                </div>\r\n                <div className='search-player'>\r\n                    <input\r\n                        placeholder='Search player'\r\n                        onChange={this.searchPlayer}\r\n                        className='border-neon border-neon-blue'\r\n                    />\r\n                </div>\r\n                <Scrollbar style={{ width: '100%', height: '100%' }}>\r\n                    {!this.state.searchedPlayer ? (\r\n                        this.state.playersInBrowser.map(entry => {\r\n                            return entry\r\n                        })\r\n                    ) : (\r\n                        <this.SearchedPlayer />\r\n                    )}\r\n                </Scrollbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPlayersBrowser.propTypes = {\r\n    addPopup: PropTypes.func.isRequired,\r\n    connectedPlayers: PropTypes.object.isRequired,\r\n    invitationHandler: PropTypes.func.isRequired,\r\n    player: PropTypes.object,\r\n    playersInBrowser: PropTypes.array,\r\n    setTitle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default PlayersBrowser\r\n","import React, { Component } from 'react'\r\nimport './LoginPage.css'\r\nimport { VERIFY_USERNAME } from '../../Shared/Events'\r\nimport { POPUP_GENERIC } from '../Popup/Types'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass LoginPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputRef = React.createRef()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Login page' })\r\n    }\r\n\r\n    loginHandler = () => {\r\n        let nickname = this.inputRef.current.value\r\n        const { socket } = this.props\r\n        if (nickname.length <= 1) {\r\n            this.props.addPopup({\r\n                type: POPUP_GENERIC,\r\n                popupData: {\r\n                    title: 'Error!',\r\n                    content: '<p>Your nickname has to be longer.</p>'\r\n                }\r\n            })\r\n            return\r\n        }\r\n        else if (nickname.includes(' ')) {\r\n            this.props.addPopup({\r\n                type: POPUP_GENERIC,\r\n                popupData: {\r\n                    title: 'Error!',\r\n                    content: '<p>Your nickname cannot have spaces.</p>'\r\n                }\r\n            })\r\n            return\r\n        }\r\n        socket.emit(VERIFY_USERNAME, nickname, ({ player, isTaken }) => {\r\n            if (isTaken) {\r\n                this.props.addPopup({\r\n                    type: POPUP_GENERIC,\r\n                    popupData: {\r\n                        title: 'Error!',\r\n                        content: '<p>This nickname is taken.</p>'\r\n                    }\r\n                })\r\n            } else {\r\n                this.props.loginPlayer(player)\r\n            }\r\n        })\r\n    }\r\n\r\n    submitOnEnter = key => {\r\n        if (key.which === 13) {\r\n            this.loginHandler()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className='login-page-content'>\r\n                    <div className='infoNickname border-neon border-neon-violet'>\r\n                        <p>Please enter your nickname</p>\r\n                    </div>\r\n                    <div className='nickname-input'>\r\n                        <input\r\n                            ref={this.inputRef}\r\n                            type='text'\r\n                            maxLength='15'\r\n                            className='inputNickname border-neon border-neon-red'\r\n                            onKeyDown={this.submitOnEnter}\r\n                        />\r\n                        <button\r\n                            className='button-pointer border-neon border-neon-orange'\r\n                            onClick={this.loginHandler}\r\n                        >\r\n                            SUBMIT\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(LoginPage)\r\n","import React, { Component } from 'react'\r\nimport { WALKTHROUGH_READY } from '../../Shared/Events'\r\nimport './Walkthrough.css'\r\n// import image from '../../../public/images/walkthrough/walkthrough.png'\r\n\r\nconst Description = () => {\r\n    return (\r\n        <div className='walkthrough-desc'>\r\n            <ol>\r\n                <li>\r\n                    <span>Your cards which you can use during a turn.</span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Keyboard where you can guess a letter by clicking it and\r\n                        end turn.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Place for a random word. Your guessed letters are\r\n                        colored by blue and opponent's are red.\r\n                    </span>\r\n                </li>\r\n            </ol>\r\n            <ul>\r\n                <li>\r\n                    <span>\r\n                        During a turn you can use cards and guess one letter.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        To use a card drag it on the random word (number 3) and\r\n                        drop.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Game ends after you or your opponent win two rounds.\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Walkthrough extends Component {\r\n    state = { buttonVisibility: true }\r\n\r\n    onReady = () => {\r\n        const { socket } = this.props\r\n        socket.emit(WALKTHROUGH_READY, { gameId: this.props.gameId })\r\n        this.setState({ buttonVisibility: false })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Walkthrough' })\r\n    }\r\n\r\n    render() {\r\n        let buttonClass = this.state.buttonVisibility\r\n            ? 'ok-btn border-neon border-neon-orange'\r\n            : 'ok-btn-pressed ok-btn border-neon border-neon-orange'\r\n        let content = this.state.buttonVisibility\r\n            ? 'READY'\r\n            : 'Waiting for opponent...'\r\n        return (\r\n            <div className='gameWrapper'>\r\n                <div className='walkthrough'>\r\n                    <div className='walkthrough-content'>\r\n                        <img\r\n                            className='walkthrough-image'\r\n                            src='images/walkthrough/walkthrough.png'\r\n                            alt='Walkthrough screenshot'\r\n                        />\r\n                        <Description />\r\n                    </div>\r\n\r\n                    <div className='ok-btn-wrapper'>\r\n                        <button className={buttonClass} onClick={this.onReady}>\r\n                            {content}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Walkthrough\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\nimport Header from './Components/Header/Header'\r\nimport Popups from './Components/Popup/Popups'\r\nimport Game from './Components/Game/Game'\r\nimport PlayersBrowser from './Components/PlayersBrowser/PlayersBrowser'\r\nimport LoginPage from './Components/LoginPage/LoginPage'\r\n\r\nimport { POPUP_GENERIC, POPUP_INVITATION } from './Components/Popup/Types'\r\n\r\nimport io from 'socket.io-client'\r\nimport {\r\n    PLAYER_CONNECTED,\r\n    LOGOUT,\r\n    PLAYER_DISCONNECTED,\r\n    INVITATION,\r\n    GAME_STARTED,\r\n    REFRESH_PLAYERS,\r\n    INVITATION_ACCEPTED,\r\n    GAME_CREATED\r\n} from './Shared/Events'\r\nimport { isMove } from './Shared/Functions'\r\n\r\nimport { Route, withRouter, Switch } from 'react-router-dom'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport bgMusic from './Resources/Sounds/bg-lower.mp3'\r\nimport Walkthrough from './Components/Game/Walkthrough'\r\n\r\n//todo remove posed\r\n\r\nconst uuidv4 = require('uuid/v4')\r\nlet developmentMode = false\r\nconst socketUrl = developmentMode\r\n    ? 'localhost:3231'\r\n    : 'ws://cardman-multiplayer.herokuapp.com:80'\r\nconst { setScore } = require('./Shared/Functions')\r\n\r\nclass Logo extends React.Component {\r\n    state = { display: true }\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({ display: false })\r\n        }, 2500)\r\n    }\r\n    render() {\r\n        if (this.state.display) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className='intro-logo'>\r\n                        <div className='text-nunito intro-1'>Cardman&nbsp;</div>\r\n                        <div className='text-nunito intro-2'>Multiplayer</div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return null\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.popupsRef = React.createRef()\r\n        this.state = {\r\n            isLogoVisible: false,\r\n            title: 'Cardman Multiplayer',\r\n            score: null,\r\n            player: null,\r\n            socket: null,\r\n            connectedPlayers: {},\r\n            game: null,\r\n            isMove: false,\r\n            volumeSettings: {\r\n                musicVol: 0.5,\r\n                soundVol: 0.5,\r\n                muted: false\r\n            },\r\n            isDisconnected: false,\r\n            gameId: null\r\n        }\r\n    }\r\n\r\n    config = {\r\n        disconnectedTimeoutMs: 5000,\r\n        defaultVolumeSettings: {\r\n            musicVol: 0.5,\r\n            soundVol: 0.5\r\n        }\r\n    }\r\n\r\n    isInCache = key => {\r\n        return (\r\n            localStorage.getItem(key) !== null &&\r\n            localStorage.getItem(key) !== undefined\r\n        )\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.location.pathname !== '/') {\r\n            if (this.state.player === null) {\r\n                this.props.history.push('/')\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.setState({ isLogoVisible: !this.state.isLogoVisible })\r\n        }, 1000)\r\n        if (this.isInCache('cachedVolumeSettings')) {\r\n            let cachedVolumeSettings = JSON.parse(\r\n                localStorage.getItem('cachedVolumeSettings')\r\n            )\r\n            this.setState({\r\n                volumeSettings: {\r\n                    musicVol: cachedVolumeSettings.musicVol,\r\n                    soundVol: cachedVolumeSettings.soundVol\r\n                }\r\n            })\r\n        } else {\r\n            let cachedVolumeSettings = {\r\n                musicVol: this.config.defaultVolumeSettings.musicVol,\r\n                soundVol: this.config.defaultVolumeSettings.soundVol\r\n            }\r\n            localStorage.setItem(\r\n                'cachedVolumeSettings',\r\n                JSON.stringify(cachedVolumeSettings)\r\n            )\r\n        }\r\n\r\n        this.initializeSocket()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.logoutPlayer()\r\n    }\r\n\r\n    invitationHandler = ({ id = null, socketId = null }) => {\r\n        //Prevent players from inviting themselves\r\n        if (id === this.state.player.id) {\r\n            this.addPopup({\r\n                title: 'Error!',\r\n                content: 'You cannot invite yourself.'\r\n            })\r\n        } else {\r\n            const { socket } = this.state\r\n            socket.emit(INVITATION, { id, socketId })\r\n        }\r\n    }\r\n\r\n    initializeSocket = () => {\r\n        const socket = io(socketUrl)\r\n        this.setState({ socket })\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected to server.')\r\n        })\r\n\r\n        socket.on('pong', ms => {\r\n            if (ms > this.config.disconnectedTimeoutMs) {\r\n                this.setState({ isDisconnected: true })\r\n            } else {\r\n                this.setState({ isDisconnected: false })\r\n            }\r\n        })\r\n\r\n        let refreshingPlayersSockets = [\r\n            PLAYER_CONNECTED,\r\n            PLAYER_DISCONNECTED,\r\n            REFRESH_PLAYERS\r\n        ]\r\n\r\n        refreshingPlayersSockets.forEach(s => {\r\n            socket.on(s, ({ connectedPlayers }) => {\r\n                console.log(s)\r\n                this.setState({ connectedPlayers })\r\n            })\r\n        })\r\n        socket.on(INVITATION, ({ nickname, socketId }) => {\r\n            const { socket } = this.state\r\n            this.addPopup({\r\n                type: POPUP_INVITATION,\r\n                popupData: {\r\n                    nickname,\r\n                    onAccept: () => {\r\n                        socket.emit(INVITATION_ACCEPTED, {\r\n                            fromSocketId: socketId,\r\n                            to: this.state.player\r\n                        })\r\n                    },\r\n                    onDecline: () => {}\r\n                }\r\n            })\r\n        })\r\n        socket.on(GAME_CREATED, ({ gameId }) => {\r\n            this.setState({ gameId }, () => {\r\n                this.props.history.push('/walkthrough')\r\n            })\r\n        })\r\n        socket.on(GAME_STARTED, ({ game }) => {\r\n            this.setGame({ game })\r\n            this.setMove(isMove({ game, player: this.state.player }))\r\n            setScore({\r\n                player: this.state.player,\r\n                game,\r\n                setTitle: this.setTitle\r\n            })\r\n        })\r\n    }\r\n\r\n    loginPlayer = player => {\r\n        const { socket } = this.state\r\n        //Sending login socket with freshly generated, previosly verified player\r\n        socket.emit(PLAYER_CONNECTED, player)\r\n        this.setState({ player })\r\n\r\n        //Wait for server response, then get the player list\r\n        socket.on(PLAYER_CONNECTED, ({ connectedPlayers }) => {\r\n            this.setState({ connectedPlayers })\r\n            this.props.history.push('/browser')\r\n        })\r\n    }\r\n\r\n    logoutPlayer = () => {\r\n        //Sending logout socket and setting user to player, thus hiding all the functionalities\r\n        const { socket } = this.state\r\n        socket.emit(LOGOUT)\r\n        this.setState({ player: null })\r\n    }\r\n\r\n    setTitle = ({ title = null, score = null }) => {\r\n        this.setState({ title: title })\r\n        this.setState({ score: score })\r\n    }\r\n\r\n    setGame = ({ game }) => {\r\n        this.setState({ game }, this.props.history.push('/game'))\r\n    }\r\n\r\n    setMove = isMove => {\r\n        this.setState({ isMove })\r\n    }\r\n\r\n    setSettings = ({ soundVol, musicVol }) => {\r\n        if (this.props.location.pathname === '/game') {\r\n            musicVol = 0\r\n        }\r\n        this.setState({\r\n            volumeSettings: { soundVol: soundVol, musicVol: musicVol }\r\n        })\r\n        let cachedVolumeSettings = { musicVol: musicVol, soundVol: soundVol }\r\n        localStorage.setItem(\r\n            'cachedVolumeSettings',\r\n            JSON.stringify(cachedVolumeSettings)\r\n        )\r\n    }\r\n\r\n    muteMusic = state => {\r\n        this.setState({\r\n            volumeSettings: { ...this.state.volumeSettings, muted: state }\r\n        })\r\n    }\r\n\r\n    addPopup = ({ type = POPUP_GENERIC, popupData }) => {\r\n        this.setState({\r\n            newPopup: { type, popupData: { ...popupData, id: uuidv4() } }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            socket,\r\n            player,\r\n            game,\r\n            gameId,\r\n            isMove,\r\n            connectedPlayers,\r\n            isDisconnected\r\n        } = this.state\r\n        const { volumeSettings } = this.state\r\n        return (\r\n            <div className='container of-rows width-full height-full text-nunito '>\r\n                <Logo />\r\n                <Header\r\n                    volumeSettings={volumeSettings}\r\n                    title={this.state.title}\r\n                    score={this.state.score}\r\n                    setSettings={this.setSettings}\r\n                />\r\n                <ReactAudioPlayer\r\n                    src={bgMusic}\r\n                    autoPlay\r\n                    volume={volumeSettings.musicVol}\r\n                    loop={true}\r\n                    muted={volumeSettings.muted}\r\n                />\r\n                <div className='row height-full width-full bg-lightgrey'>\r\n                    <Popups\r\n                        newPopup={this.state.newPopup}\r\n                        isDisconnected={isDisconnected}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                    <Switch>\r\n                        <Route exact path='/'>\r\n                            <LoginPage\r\n                                socket={socket}\r\n                                loginPlayer={this.loginPlayer}\r\n                                setTitle={this.setTitle}\r\n                                addPopup={this.addPopup}\r\n                            />\r\n                        </Route>\r\n                        <Route\r\n                            path='/browser'\r\n                            render={() => (\r\n                                <PlayersBrowser\r\n                                    player={player}\r\n                                    setTitle={this.setTitle}\r\n                                    addPopup={this.addPopup}\r\n                                    invitationHandler={this.invitationHandler}\r\n                                    connectedPlayers={connectedPlayers}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            path='/walkthrough'\r\n                            render={() => (\r\n                                <Walkthrough\r\n                                    player={player}\r\n                                    setTitle={this.setTitle}\r\n                                    gameId={gameId}\r\n                                    muteMusic={this.muteMusic}\r\n                                    socket={socket}\r\n                                    soundVolume={volumeSettings.soundVol}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            path='/game'\r\n                            render={() => (\r\n                                <Game\r\n                                    player={player}\r\n                                    game={game}\r\n                                    muteMusic={this.muteMusic}\r\n                                    socket={socket}\r\n                                    setTitle={this.setTitle}\r\n                                    addPopup={this.addPopup}\r\n                                    setMove={this.setMove}\r\n                                    isMove={isMove}\r\n                                    soundVolume={volumeSettings.soundVol}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(App)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n","const isMove = ({ game, player }) => {\r\n    let nextPlayerIndex = game.nextPlayerIndex\r\n    return game.playerSockets[nextPlayerIndex].id === player.id\r\n}\r\n\r\nconst setScore = ({ player, game = null, setTitle }) => {\r\n    let me = game.playerSockets.filter(p => {\r\n        return p.socketId === player.socketId\r\n    })[0]\r\n\r\n    let enemy = game.playerSockets.filter(p => {\r\n        return p.socketId !== player.socketId\r\n    })[0]\r\n\r\n    let score = game.score\r\n\r\n    setTitle({\r\n        score: {\r\n            me: me.nickname,\r\n            myScore: score[me.socketId],\r\n            enemy: enemy.nickname,\r\n            enemyScore: score[enemy.socketId]\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = { isMove, setScore }\r\n","const Cards = {\r\n    DEFINITION_CARD: {\r\n        id: 'DEFINITION_CARD',\r\n        title: 'Definition card',\r\n        description: 'Shows you a definition of the word.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            console.log('DEFINITION_CARD card used')\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    RANDOM_CORRECT_LETTER_CARD: {\r\n        id: 'RANDOM_CORRECT_LETTER_CARD',\r\n        title: 'Random correct letter',\r\n        description: 'Chooses a random correct letter.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let randomCorrectLetter = () => {\r\n                let { word } = currentGame.word\r\n                let { guessed } = currentGame\r\n                let guessedArr = guessed.map(g => g.key.toUpperCase())\r\n                word = word.toUpperCase()\r\n                let arr = Array.from(word).filter(char => {\r\n                    return !guessedArr.includes(char)\r\n                })\r\n                let randomIndex = Math.floor(Math.random() * arr.length)\r\n                return arr[randomIndex].toUpperCase()\r\n            }\r\n\r\n            let key = randomCorrectLetter()\r\n            currentGame.guessed.push({\r\n                key,\r\n                playerSocketId: move.playerSocketId\r\n            })\r\n            let playerSocket =\r\n                currentGame.playerSockets[currentGame.nextPlayerIndex].socketId\r\n            let enemySocket =\r\n                currentGame.playerSockets[1 - currentGame.nextPlayerIndex]\r\n                    .socketId\r\n            currentGame.keys.push({\r\n                key,\r\n                playerSocketId: playerSocket\r\n            })\r\n            currentGame.keys.push({\r\n                key,\r\n                playerSocketId: enemySocket\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    ADDITIONAL_TURN_CARD: {\r\n        id: 'ADDITIONAL_TURN_CARD',\r\n        title: 'Additional letter',\r\n        description: 'You can choose two letters in a turn.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            console.log('ADDITIONAL_TURN_CARD card used')\r\n            currentGame.nextPlayerIndex = 1 - currentGame.nextPlayerIndex\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    REMOVE_ONE_UNFITTING_CARD: {\r\n        id: 'REMOVE_ONE_UNFITTING_CARD',\r\n        title: 'Remove one unfitting letter.',\r\n        description: 'Removes one unfitting letter from the current word.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let { word } = currentGame.word\r\n            let wordKeys = Array.from(word.toUpperCase())\r\n            let myKeys = []\r\n            currentGame.keys.forEach(key => {\r\n                if (key.playerSocketId === socket.user.socketId) {\r\n                    myKeys.push(key.key)\r\n                }\r\n            })\r\n            let candidates = []\r\n            for (let i = 65; i <= 90; i++) {\r\n                let letter = String.fromCharCode(i).toUpperCase()\r\n                if (!wordKeys.includes(letter) && !myKeys.includes(letter)) {\r\n                    candidates.push(letter)\r\n                }\r\n            }\r\n            currentGame.keys.push({\r\n                key: candidates[Math.floor(Math.random() * candidates.length)],\r\n                playerSocketId: socket.user.socketId\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    REMOVE_TWO_UNFITTING_CARD: {\r\n        id: 'REMOVE_TWO_UNFITTING_CARD',\r\n        title: 'Remove two unfitting letters.',\r\n        description: 'Removes two unfitting letters from the current word.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            currentGame = Cards.REMOVE_ONE_UNFITTING_CARD.use({\r\n                currentGame,\r\n                socket,\r\n                move\r\n            })\r\n            currentGame = Cards.REMOVE_ONE_UNFITTING_CARD.use({\r\n                currentGame,\r\n                socket,\r\n                move\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    BLOCK_CARD: {\r\n        id: 'BLOCK_CARD',\r\n        title: 'Block enemy cards for 2 turns.',\r\n        description: `<span>\r\n                <b>Blocks enemy cards for 2 turns.</b>\r\n            </span>\r\n            <span>\r\n                You can't block an already blocked player.<u>don't</u> add up.<br>\r\n                These values <u>don't</u> add up.\r\n            </span>`,\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n            if (currentGame.blockCounters[enemySocket] === 0)\r\n                currentGame.blockCounters[enemySocket] = 2\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: (game, player) => {\r\n            let enemySocket = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            if (game.blockCounters[enemySocket] === 0) return true\r\n            return false\r\n        }\r\n    },\r\n    IMMUNE_TO_BLOCK_CARD: {\r\n        id: 'IMMUNE_TO_BLOCK_CARD',\r\n        title: 'Immune to block.',\r\n        description: `<span>\r\n                <b>Immune to blocking cards for 2 turns.</b>\r\n            </span>\r\n            <span>\r\n                These values <u>do</u> add up.\r\n            </span>`,\r\n        use: ({ currentGame, socket, move }) => {\r\n            let mySocket = move.playerSocketId\r\n            let blockCounters = currentGame.blockCounters[mySocket]\r\n            currentGame.blockCounters[mySocket] = blockCounters - 2\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    LOOK_UP_CARD: {\r\n        id: 'LOOK_UP_CARD',\r\n        title: 'Look up enemy card',\r\n        description:\r\n            'You can look up one of the enemies cards only if they have any.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            console.log('LOOK_UP_CARD card used')\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: (game, player) => {\r\n            let enemySocket = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            if (game.cards[enemySocket].length === 0) return false\r\n            return true\r\n        }\r\n    },\r\n    SWAP_RANDOM_CARDS: {\r\n        id: 'SWAP_RANDOM_CARDS',\r\n        title: 'Swap with opponent.',\r\n        description: `<span>\r\n                <b>Swap your card for a random opponents card.</b>\r\n            </span>\r\n            <span>\r\n                You must have a card besides this one in the deck. Your\r\n                opponent has to have at least 1 card.\r\n            </span>`,\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n            let enemyCards = currentGame.cards[enemySocket]\r\n            let myCards = currentGame.cards[move.playerSocketId]\r\n\r\n            let randomIndexOfMine = Math.floor(Math.random() * myCards.length)\r\n            let randomIndexOfOpponent = null\r\n            let isSwap = true\r\n            while (isSwap) {\r\n                randomIndexOfOpponent = Math.floor(\r\n                    Math.random() * enemyCards.length\r\n                )\r\n                if (\r\n                    enemyCards[randomIndexOfOpponent].id !==\r\n                    Cards.SWAP_RANDOM_CARDS.id\r\n                ) {\r\n                    isSwap = false\r\n                }\r\n            }\r\n\r\n            let doOtherCardsExist = false\r\n            for (let i = 0; i < myCards.length; i++) {\r\n                if (myCards[i].id !== Cards.SWAP_RANDOM_CARDS.id) {\r\n                    doOtherCardsExist = true\r\n                    break\r\n                }\r\n            }\r\n\r\n            if (enemyCards.length >= 1 && !doOtherCardsExist) {\r\n                let a = myCards[randomIndexOfMine]\r\n                enemyCards[randomIndexOfOpponent] = a\r\n                myCards[randomIndexOfMine] = enemyCards[randomIndexOfOpponent]\r\n                currentGame.cards[enemySocket] = enemyCards\r\n                currentGame.cards[move.playerSocketId] = myCards\r\n            }\r\n\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: (game, player) => {\r\n            let cards = game.cards\r\n            let mySocketId = player.socketId\r\n            let myCards = cards[mySocketId]\r\n            let enemySocketId = game.playerSockets.filter(x => {\r\n                return x.socketId !== player.socketId\r\n            })[0].socketId\r\n            let enemyCards = cards[enemySocketId]\r\n\r\n            let doOtherCardsExist = false\r\n            for (let i = 0; i < myCards.length; i++) {\r\n                if (myCards[i].id !== Cards.SWAP_RANDOM_CARDS.id) {\r\n                    doOtherCardsExist = true\r\n                    break\r\n                }\r\n            }\r\n\r\n            if (doOtherCardsExist === false) return false\r\n            if (enemyCards.length === 0) return false\r\n            return true\r\n        }\r\n    },\r\n    RANDOMIZE_YOURSELF_CARD: {\r\n        id: 'RANDOMIZE_YOURSELF_CARD',\r\n        title: 'Randomize a card',\r\n        description: 'A random card of yours gets changed.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let getRandomCard = (exception = null) => {\r\n                let excluded = ['RANDOMIZE_YOURSELF_CARD', exception]\r\n                let included = Object.values(Cards).filter(\r\n                    card => !excluded.includes(card.id)\r\n                )\r\n                let randomIndex = Math.floor(Math.random() * included.length)\r\n                return included[randomIndex]\r\n            }\r\n            currentGame.cards[move.playerSocketId].push(getRandomCard())\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    RANDOMIZE_ENEMY_CARD: {\r\n        id: 'RANDOMIZE_ENEMY_CARD',\r\n        title: 'Randomize an enemies card',\r\n        description: 'A random card of your opponent gets changed.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            console.log('RANDOMIZE_ENEMY_CARD card used')\r\n\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n\r\n            let getRandomCard = (exception = null) => {\r\n                let excluded = ['RANDOMIZE_YOURSELF_CARD', exception]\r\n                let included = Object.values(Cards).filter(\r\n                    card => !excluded.includes(card.id)\r\n                )\r\n                let randomIndex = Math.floor(Math.random() * included.length)\r\n                return included[randomIndex]\r\n            }\r\n            let enemyCardAmount = currentGame.cards[enemySocket].length\r\n            let randomIndex = Math.floor(Math.random() * enemyCardAmount)\r\n            if (enemyCardAmount > 0) {\r\n                currentGame.cards[enemySocket][randomIndex] = getRandomCard()\r\n            }\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    }\r\n}\r\n\r\nconst getCard = card => {\r\n    return Cards[card]\r\n}\r\n\r\nconst getRandomCard = () => {\r\n    let randomIndex = Math.floor(Math.random() * Object.keys(Cards).length)\r\n    let randomKey = Object.keys(Cards)[randomIndex]\r\n    return Cards[randomKey]\r\n}\r\n\r\nconst generateCards = amount => {\r\n    let result = []\r\n    for (let i = 0; i < amount; i++) {\r\n        result.push(getRandomCard())\r\n    }\r\n    return result\r\n}\r\n\r\nconst resupplyCards = game => {\r\n    let { cards } = game\r\n    for (let i = 0; i < Object.keys(cards).length; i++) {\r\n        let player = Object.keys(cards)[i]\r\n        let newCards = cards[player]\r\n        if (newCards.length < 3) {\r\n            newCards.push(getRandomCard())\r\n        }\r\n        cards[player] = newCards\r\n    }\r\n    return cards\r\n}\r\n\r\nmodule.exports = {\r\n    getRandomCard,\r\n    generateCards,\r\n    Cards,\r\n    getCard,\r\n    resupplyCards\r\n}\r\n","const Result = {\r\n    GAME_TIE: 'GAME_TIE',\r\n    TURN_WIN: 'TURN_WIN',\r\n    TURN_TIE: 'TURN_TIE',\r\n    GAME_WIN: 'GAME_WIN',\r\n    NOTHING: 'NOTHING'\r\n}\r\n\r\nmodule.exports = {\r\n    Result\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/popup.6f214bea.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip.63e37b8e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip2.e1b8fb14.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_drop.f8713f77.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip3.dff27e09.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button_click.923d6dfa.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bg-lower.b0652969.mp3\";","module.exports = {\r\n    PLAYER_CONNECTED: 'PLAYER_CONNECTED',\r\n    PLAYER_DISCONNECTED: 'PLAYER_DISCONNECTED',\r\n    VERIFY_USERNAME: 'VERIFY_USERNAME',\r\n    LOGOUT: 'LOGOUT',\r\n    INVITATION: 'INVITATION',\r\n    INVITATION_ACCEPTED: 'INVITATION_ACCEPTED',\r\n    GAME_STARTED: 'GAME_STARTED',\r\n    GAME_MOVE: 'GAME_MOVE',\r\n    WIN: 'WIN',\r\n    REFRESH_PLAYERS: 'REFRESH_PLAYERS',\r\n    GAME_CREATED: 'GAME_CREATED',\r\n    WALKTHROUGH_READY: 'WALKTHROUGH_READY'\r\n}\r\n","const roundAndConvertVolume = volume => {\r\n    return Math.round((10 * parseInt(volume)) / 100) / 10\r\n}\r\n\r\nmodule.exports = { roundAndConvertVolume }\r\n","const { isMove } = require('../../Shared/Functions')\r\nconst {\r\n    POPUP_CONFIRMATION,\r\n    POPUP_GENERIC\r\n} = require('../../Components/Popup/Types')\r\nconst { Result } = require('../../Shared/Enums')\r\n\r\nconst winHandler = ({\r\n    type,\r\n    props,\r\n    setScore = null,\r\n    score = null,\r\n    game = null,\r\n    winner = null,\r\n    returnToMenu = null\r\n}) => {\r\n    const { addPopup, setMove, setTitle, player, muteMusic } = props\r\n    let returnState = null\r\n    if (type === Result.TURN_WIN) {\r\n        returnState = { gameFromProps: false, game }\r\n        setMove(isMove({ game, player }))\r\n    } else if (type === Result.TURN_TIE) {\r\n        returnState = { gameFromProps: false, game }\r\n        setMove(isMove({ game, player }))\r\n        addPopup({\r\n            type: POPUP_GENERIC,\r\n            popupData: {\r\n                title: 'TIE',\r\n                content: `Turn is tied. None of the players won.`\r\n            }\r\n        })\r\n    } else if (type === Result.GAME_WIN) {\r\n        //* win\r\n        returnState = { allowMove: false }\r\n        addPopup({\r\n            type: POPUP_CONFIRMATION,\r\n            popupData: {\r\n                title: 'GAME ENDED',\r\n                content: `Player ${winner.nickname} has won the game.`,\r\n                onConfirm: () => {\r\n                    muteMusic(false)\r\n                    returnToMenu()\r\n                }\r\n            }\r\n        })\r\n    }\r\n    setScore({\r\n        player,\r\n        game,\r\n        setTitle,\r\n        score\r\n    })\r\n\r\n    return returnState\r\n}\r\n\r\nmodule.exports = { winHandler }\r\n"],"sourceRoot":""}