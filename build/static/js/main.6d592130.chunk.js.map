{"version":3,"sources":["Components/Header/HeaderBar.jsx","Components/Header/Settings.jsx","Components/Header/Header.jsx","Components/Popup/Popups/GenericPopup.jsx","Components/Popup/Popups/ConfirmationPopup.jsx","Components/Game/Timer.jsx","Components/Popup/Popups/InvitationPopup.jsx","Components/Popup/Popups/DisconnectedPopup.jsx","Components/Popup/Popups/CardPopup.jsx","Components/Popup/Popups.jsx","Components/Game/Card.jsx","Components/Game/Cards.jsx","Components/Game/Key.jsx","Components/Game/Keyboard.jsx","Components/Game/PlayerState.jsx","Components/Game/Content.jsx","Components/Game/Game.jsx","Components/PlayersBrowser/BrowserEntry.jsx","Components/PlayersBrowser/Functions.js","Components/PlayersBrowser/PlayersBrowser.jsx","Components/LoginPage/LoginPage.jsx","Components/Game/Walkthrough.jsx","App.jsx","index.js","Shared/Functions.js","Game/Cards/Cards.js","Shared/Enums.js","Resources/Sounds/popup.mp3","Resources/Sounds/card_flip.mp3","Resources/Sounds/card_flip2.mp3","Resources/Sounds/card_drop.mp3","Resources/Sounds/card_flip3.mp3","Resources/Sounds/button_click.mp3","Resources/Sounds/bg-lower.mp3","Shared/Events.js","Components/Header/Functions.js","Components/Popup/Types.js","Components/Game/Functions.js"],"names":["HeaderBar","_ref","_ref$title","title","_ref$score","score","react_default","a","createElement","className","me","concat","myScore","enemyScore","enemy","roundAndConvertVolume","require","Settings","onChange","e","target","id","_this","props","setSettings","soundVol","value","musicVol","volumeSettings","_this2","this","react_icons_kit_default","icon","cog","size","volume_2","type","min","max","note","Component","Header","Header_Settings","Header_HeaderBar","GenericPopup","console","log","popupData","content","onClick","onClose","react_icons_kit","cross","dangerouslySetInnerHTML","__html","ConfirmationPopup","onConfirm","Timer","timeInterval","state","time","wrapperStyle","circleStyle","animation","propsStyle","setInterval","setState","prevState","clearInterval","onEnd","style","Object","objectSpread","display","r","cx","cy","InvitationPopup","accepted","onAccept","onDecline","message","nickname","Game_Timer","DisconnectedPopup","CardPopup","src","cardId","alt","description","Popups","popups","newPopup","components","POPUP_GENERIC","POPUP_CONFIRMATION","POPUP_INVITATION","POPUP_DISCONNECTED","POPUP_CARD","newPopups","filter","popup","Popup","key","displayStyle","length","isDisconnected","Popups_DisconnectedPopup","map","i","Fragment","bundle_default","volume","soundVolume","popupSound","autoPlay","toConsumableArray","CardImage","isMine","isUsed","isDisabled","isBlocked","isDiscardEnabled","classes","draggable","onMouseDown","userDrag","CardDescription","_ref2","displayTooltip","CardOverlay","_ref3","onDiscard","Card","cardClasses","Card_CardImage","card","Card_CardOverlay","onUseAbort","index","Card_CardDescription","CardsData","Cards","areMine","getBg","move","animationName","animationDuration","animationIterationCount","animationTimingFunction","animationDirection","animationFillMode","GenerateCard","blockCounter","usedCardIndexes","data","JSON","stringify","lib","enabled","onDragStart","playSound","flipSound1","setCardTargetHighlight","onDragEnd","flipSound2","Game_Card","CardsSpawner","_this$props","cards","player","game","blockCounters","socketId","cardData","doesMeetConditions","Key","clickHandler","moveHandler","letter","playerSocketId","getStyle","backgroundColor","textDecoration","isClicked","borderWidth","borderStyle","borderColor","Keyboard","clickedIndex","generateKeys","result","_loop","String","fromCharCode","toUpperCase","myKeys","keys","includes","push","Game_Key","setSelectedKey","Chains","getSide","side","Shield","PlayerState","getIcon","PlayerState_Chains","PlayerState_Shield","getPlayerState","playerSockets","Content","keyMove","cardMoves","buttonClick","colorDisplayWord","word","guessed","Array","from","forEach","g","color","onDrop","parse","updateUsedCardIndexes","some","cardMove","setTimeout","cardDropSound","onMove","onEndTurn","moves","_this$state","0","1","2","flipSound3","DEFINITION_CARD","definitions","randomIndex","Math","floor","random","addPopup","LOOK_UP_CARD","enemySocket","x","enemyCards","randomEnemyCard","endTurnButton","text","disabled","displayWord","wordClass","isCardTargetHighlight","Game_PlayerState","onMoveTimeout","types","Game_Keyboard","newCardMoves","parseInt","isMove","winHandler","setScore","GAME_MOVE","WIN","Result","Game","gameFromProps","allowMove","myCards","cardTargetHighlight","soundSrc","discardMoves","initializeSocket","socket","on","setMove","winner","TURN_WIN","TURN_TIE","winObj","returnToMenu","history","_ref3$moves","allMoves","emit","bool","newIndexes","discarded","newGame","mySocketId","val","newDiscardMoves","event","isDown","keyCode","muteMusic","document","addEventListener","ctrlPressHandler","_this3","removeEventListener","_this4","my","gameCards","enemySocketId","onEnded","Components_Game_Cards","Components_Game_Content","setTitle","withRouter","BrowserEntry","isButtonDisabled","preventDefault","invitationHandler","_isMounted","extractBrowserPlayers","connectedPlayers","assign","values","isInGame","PlayersBrowser_BrowserEntry","indexOf","PlayersBrowser","playersInBrowser","searchedPlayer","searchPlayer","input","players","item","toLowerCase","SearchedPlayer","placeholder","dist_default","width","height","entry","React","LoginPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loginHandler","inputRef","current","VERIFY_USERNAME","isTaken","loginPlayer","submitOnEnter","which","createRef","ref","maxLength","onKeyDown","Description","Walkthrough","buttonVisibility","onReady","WALKTHROUGH_READY","gameId","buttonClass","Walkthrough_Description","uuidv4","socketUrl","Logo","App","config","disconnectedTimeoutMs","defaultVolumeSettings","isInCache","localStorage","getItem","undefined","_ref$id","_ref$socketId","INVITATION","io","ms","PLAYER_CONNECTED","PLAYER_DISCONNECTED","REFRESH_PLAYERS","s","INVITATION_ACCEPTED","fromSocketId","to","GAME_CREATED","_ref4","GAME_STARTED","_ref5","setGame","_ref6","logoutPlayer","LOGOUT","_ref7","_ref7$title","_ref7$score","_ref8","_ref9","cachedVolumeSettings","setItem","muted","_ref10","_ref10$type","popupsRef","isLogoVisible","location","pathname","_this5","App_Logo","Components_Header_Header","bgMusic","loop","Popup_Popups","Switch","Route","exact","path","Components_LoginPage_LoginPage","component","Credits","render","Components_PlayersBrowser_PlayersBrowser","Components_Game_Walkthrough","Components_Game_Game","ReactDOM","BrowserRouter","src_App_0","getElementById","module","exports","nextPlayerIndex","_ref2$game","p","use","currentGame","RANDOM_CORRECT_LETTER_CARD","guessedArr","arr","char","randomCorrectLetter","playerSocket","ADDITIONAL_TURN_CARD","REMOVE_ONE_UNFITTING_CARD","wordKeys","user","candidates","REMOVE_TWO_UNFITTING_CARD","BLOCK_CARD","IMMUNE_TO_BLOCK_CARD","mySocket","SWAP_RANDOM_CARDS","randomIndexOfMine","randomIndexOfOpponent","isSwap","doOtherCardsExist","RANDOMIZE_YOURSELF_CARD","excluded","arguments","included","getRandomCard","RANDOMIZE_ENEMY_CARD","_ref11","enemyCardAmount","randomKey","generateCards","amount","getCard","resupplyCards","newCards","GAME_TIE","GAME_WIN","NOTHING","__webpack_require__","round","_ref$setScore","_ref$game","_ref$winner","_ref$returnToMenu","returnState"],"mappings":"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","file":"static/js/main.6d592130.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst HeaderBar = ({ title = null, score = null }) => {\r\n    return (\r\n        <div className='column auto has-background-dark header'>\r\n            {score && (\r\n                <div className='title has-text-white-ter'>\r\n                    <div className='scoreHeader'>\r\n                        <div className='flex-item me'>\r\n                            <span>{score.me}</span>\r\n                        </div>\r\n                        <div className='flex-item score'>\r\n                            <span>{`${score.myScore}:${\r\n                                score.enemyScore\r\n                            }`}</span>\r\n                        </div>\r\n                        <div className='flex-item enemy'>\r\n                            <span>{score.enemy}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {title && <h1 className='title has-text-white-ter'>{title}</h1>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderBar\r\n","import React, { Component } from 'react'\r\nimport Icon from 'react-icons-kit'\r\nimport { volume_2 } from 'react-icons-kit/ikons/volume_2'\r\nimport { note } from 'react-icons-kit/entypo/note'\r\nimport { cog } from 'react-icons-kit/fa/cog'\r\n\r\nconst { roundAndConvertVolume } = require('./Functions')\r\n\r\nclass Settings extends Component {\r\n    onChange = e => {\r\n        if (e.target.id === 'sound-slider-thumb') {\r\n            this.props.setSettings({\r\n                soundVol: roundAndConvertVolume(e.target.value),\r\n                musicVol: this.props.volumeSettings.musicVol\r\n            })\r\n        } else if (e.target.id === 'music-slider-thumb') {\r\n            this.props.setSettings({\r\n                soundVol: this.props.volumeSettings.soundVol,\r\n                musicVol: roundAndConvertVolume(e.target.value)\r\n            })\r\n        }\r\n    }\r\n\r\n    //todo wobbles when gear rotates\r\n    //playersbrowser nth child even && odd\r\n\r\n    render() {\r\n        let soundVol = this.props.volumeSettings.soundVol * 100\r\n        let musicVol = this.props.volumeSettings.musicVol * 100\r\n        return (\r\n            <div className='options-btn'>\r\n                <div className='gear-icon-wrapper'>\r\n                    <Icon icon={cog} size={32} className='gear-icon' />\r\n                </div>\r\n                <div className='dropdown-options border-neon border-neon-translucent'>\r\n                    <div className='settings-wrapper'>\r\n                        <div className='options-items'>\r\n                            <div className='options-item'>\r\n                                <Icon\r\n                                    className='options-icon'\r\n                                    icon={volume_2}\r\n                                    size={32}\r\n                                />\r\n                                <span className='options-item-description'>{`Sound volume: ${soundVol}%`}</span>\r\n                                <div className='slider-wrapper input-neon border-neon border-neon-violet'>\r\n                                    <input\r\n                                        type='range'\r\n                                        min='0'\r\n                                        max='100'\r\n                                        id='sound-slider-thumb'\r\n                                        className='options-slider slider'\r\n                                        value={soundVol}\r\n                                        onChange={e => this.onChange(e)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className='options-item'>\r\n                                <Icon\r\n                                    className='options-icon'\r\n                                    icon={note}\r\n                                    size={32}\r\n                                />\r\n                                <span className='options-item-description'>{`Music volume: ${musicVol}%`}</span>\r\n                                <div className='slider-wrapper input-neon border-neon border-neon-violet'>\r\n                                    <input\r\n                                        type='range'\r\n                                        min='0'\r\n                                        max='100'\r\n                                        id='music-slider-thumb'\r\n                                        className='options-slider slider'\r\n                                        value={musicVol}\r\n                                        onChange={e => this.onChange(e)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Settings\r\n","import React, { Component } from 'react'\r\nimport HeaderBar from './HeaderBar'\r\nimport Settings from './Settings'\r\nimport './Header.css'\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className='row header width-full semi-bold bg-dark color-lightblue padding-sm height-sm text-lg content-hcenter content-vcenter'>\r\n                <Settings\r\n                    volumeSettings={this.props.volumeSettings}\r\n                    setSettings={this.props.setSettings}\r\n                />\r\n                <HeaderBar title={this.props.title} score={this.props.score} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nconst GenericPopup = props => {\r\n    const onClose = () => {\r\n        props.popupData.onClose(props.popupData.id)\r\n    }\r\n    console.log(props.popupData.content)\r\n\r\n    return (\r\n        <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n            <div className='generic-popup-title'>\r\n                <span>{props.popupData.title}</span>\r\n                <button onClick={onClose} className='btn-popup-close'>\r\n                    <Icon icon={cross} size='1.6vh' className='close-icon' />\r\n                </button>\r\n            </div>\r\n            <div\r\n                className='generic-popup-content'\r\n                dangerouslySetInnerHTML={{\r\n                    __html: props.popupData.content\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GenericPopup\r\n","import React from 'react'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nconst ConfirmationPopup = props => {\r\n    const onClose = () => {\r\n        props.popupData.onConfirm()\r\n        props.popupData.onClose(props.popupData.id)\r\n    }\r\n\r\n    return (\r\n        <div className='generic-popup border-neon border-neon-red text-nunito bg-khaki'>\r\n            <div className='generic-popup-title'>\r\n                <span>{props.popupData.title}</span>\r\n                <button onClick={onClose} className='btn-popup-close'>\r\n                    <Icon icon={cross} size='1.6vh' className='close-icon' />\r\n                </button>\r\n            </div>\r\n            <div className='generic-popup-content'>\r\n                <div>{props.popupData.content}</div>\r\n                <div className='popup-buttons'>\r\n                    <button\r\n                        className='border-neon border-neon-lime'\r\n                        onClick={() => {\r\n                            onClose()\r\n                        }}\r\n                    >\r\n                        <span>OK</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfirmationPopup\r\n","import React, { Component } from 'react'\r\n\r\nclass Timer extends Component {\r\n    timeInterval = null\r\n    state = {\r\n        time: this.props.time,\r\n        wrapperStyle: {},\r\n        circleStyle: {\r\n            animation: `countdown ${this.props.time}s linear 1 forwards`\r\n        },\r\n        propsStyle: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timeInterval = setInterval(() => {\r\n            this.setState(\r\n                prevState => ({ time: prevState.time - 1 }),\r\n                () => {\r\n                    if (this.state.time === 0) {\r\n                        clearInterval(this.timeInterval)\r\n                        this.props.onEnd && this.props.onEnd() //execute only if there is a callback provided\r\n                        this.setState({\r\n                            style: { display: 'none', ...this.state.style }\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timeInterval)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.state.wrapperStyle} className='timer'>\r\n                <div id='timer-number'>{this.state.time}</div>\r\n                <svg className='timer-svg'>\r\n                    <circle\r\n                        style={this.state.circleStyle}\r\n                        r='18'\r\n                        cx='20'\r\n                        cy='20'\r\n                    />\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer\r\n","import React from 'react'\r\nimport Timer from '../../Game/Timer'\r\nconst InvitationPopup = props => {\r\n    const onClose = accepted => {\r\n        if (accepted) {\r\n            props.popupData.onAccept()\r\n        } else {\r\n            props.popupData.onDecline()\r\n        }\r\n        props.popupData.onClose(props.popupData.id)\r\n    }\r\n\r\n    const message = `You have been invited by ${props.popupData.nickname}.`\r\n\r\n    const onTimeout = () => {\r\n        props.popupData.onDecline()\r\n        props.popupData.onClose(props.popupData.id)\r\n    }\r\n\r\n    return (\r\n        <div className='generic-popup border-neon border-neon-red text-nunito bg-khaki'>\r\n            <div className='generic-popup-title'>\r\n                <span>New game invitation!</span>\r\n            </div>\r\n            <div className='invitation-popup-content'>\r\n                <div className='msg'>{message}</div>\r\n                <Timer time={10} onEnd={onTimeout} />\r\n                <div className='popup-buttons'>\r\n                    <button\r\n                        className='border-neon border-neon-lime'\r\n                        onClick={() => {\r\n                            onClose(true)\r\n                        }}\r\n                    >\r\n                        <span>Accept</span>\r\n                    </button>\r\n                    <button\r\n                        className='border-neon border-neon-orange'\r\n                        onClick={() => {\r\n                            onClose(false)\r\n                        }}\r\n                    >\r\n                        <span>Decline</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InvitationPopup\r\n","import React from 'react'\r\n\r\nconst DisconnectedPopup = () => {\r\n    return (\r\n        <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n            <div className='disconnected-popup-content'>\r\n                <div className='msg'>\r\n                    You have been disconnected from the server.\r\n                </div>\r\n                <div className='spinner-wrapper'>\r\n                    <span className='fa fa-spinner fa-spin fa-3x' />\r\n                </div>\r\n                <div className='msg'>Trying to reconnect...</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisconnectedPopup\r\n","import React from 'react'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { cross } from 'react-icons-kit/icomoon/cross'\r\n\r\nconst CardPopup = props => {\r\n    const onClose = () => {\r\n        props.popupData.onClose(props.popupData.id)\r\n    }\r\n\r\n    return (\r\n        <div className='generic-popup border-neon border-neon-red text-nunito'>\r\n            <div className='generic-popup-title'>\r\n                <span />\r\n                <button onClick={onClose} className='btn-popup-close'>\r\n                    <Icon icon={cross} size='1.6vh' className='close-icon' />\r\n                </button>\r\n            </div>\r\n            <div className='lookup-card-wrapper'>\r\n                <img\r\n                    className='lookup-card-display'\r\n                    src={`images/cards/${props.popupData.cardId}.svg`}\r\n                    alt='Card'\r\n                />\r\n                <span\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: props.popupData.description\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardPopup\r\n","import React, { Component } from 'react'\r\nimport GenericPopup from './Popups/GenericPopup'\r\nimport ConfirmationPopup from './Popups/ConfirmationPopup'\r\nimport InvitationPopup from './Popups/InvitationPopup'\r\nimport DisconnectedPopup from './Popups/DisconnectedPopup'\r\nimport CardPopup from './Popups/CardPopup'\r\nimport {\r\n    // eslint-disable-next-line\r\n    POPUP_GENERIC,\r\n    // eslint-disable-next-line\r\n    POPUP_CONFIRMATION,\r\n    // eslint-disable-next-line\r\n    POPUP_INVITATION,\r\n    // eslint-disable-next-line\r\n    POPUP_DISCONNECTED,\r\n    // eslint-disable-next-line\r\n    POPUP_CARD\r\n} from './Types'\r\nimport './Popup.css'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport popupSound from '../../Resources/Sounds/popup.mp3'\r\n\r\nclass Popups extends Component {\r\n    state = { popups: [], newPopup: null }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.newPopup !== props.newPopup) {\r\n            if (props.newPopup)\r\n                return {\r\n                    newPopup: props.newPopup,\r\n                    popups: [...state.popups, props.newPopup]\r\n                }\r\n        }\r\n        return null\r\n    }\r\n\r\n    components = {\r\n        POPUP_GENERIC: GenericPopup,\r\n        POPUP_CONFIRMATION: ConfirmationPopup,\r\n        POPUP_INVITATION: InvitationPopup,\r\n        POPUP_DISCONNECTED: DisconnectedPopup,\r\n        POPUP_CARD: CardPopup\r\n    }\r\n\r\n    onClose = id => {\r\n        let newPopups = this.state.popups.filter(popup => {\r\n            return popup.popupData.id !== id\r\n        })\r\n        this.setState({ popups: newPopups })\r\n    }\r\n\r\n    Popup = ({ type, popupData }) => {\r\n        let Component = this.components[type]\r\n        return (\r\n            <Component\r\n                key={popupData.id}\r\n                popupData={{ ...popupData, onClose: this.onClose }}\r\n            />\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let displayStyle = this.state.popups.length === 0 ? 'none' : 'flex'\r\n        return (\r\n            <div style={{ display: displayStyle }} className='popups-wrapper'>\r\n                {this.props.isDisconnected === true ? (\r\n                    <DisconnectedPopup />\r\n                ) : null}\r\n                {this.state.popups &&\r\n                    this.state.popups.map((popup, i) => {\r\n                        return (\r\n                            <React.Fragment key={i}>\r\n                                <this.Popup\r\n                                    key={i}\r\n                                    type={popup.type}\r\n                                    popupData={popup.popupData}\r\n                                />\r\n                                <ReactAudioPlayer\r\n                                    volume={this.props.soundVolume}\r\n                                    src={popupSound}\r\n                                    autoPlay\r\n                                />\r\n                            </React.Fragment>\r\n                        )\r\n                    })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Popups\r\n","import React, { Component } from 'react'\r\nimport './Cards.css'\r\n\r\nconst CardImage = ({\r\n    id,\r\n    isMine,\r\n    isUsed,\r\n    isDisabled,\r\n    isBlocked,\r\n    isDiscardEnabled\r\n}) => {\r\n    let classes = 'card-image '\r\n    if (isUsed || isDisabled || isBlocked || isDiscardEnabled)\r\n        classes += 'card-image-used '\r\n\r\n    if (isMine) {\r\n        return (\r\n            <img\r\n                draggable={!isDisabled}\r\n                onMouseDown={() => {\r\n                    return isDisabled ? false : true\r\n                }}\r\n                className={classes}\r\n                src={`images/cards/${id}.svg`}\r\n                alt='Playing card.'\r\n            />\r\n        )\r\n    } else {\r\n        return (\r\n            <img\r\n                draggable='false'\r\n                onMouseDown={() => {\r\n                    return false\r\n                }}\r\n                style={{ userDrag: 'none' }}\r\n                className={`${classes} default-pointer`}\r\n                src={`images/cards/placeholder.svg`}\r\n                alt='Playing card.'\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst CardDescription = ({ description, displayTooltip }) => {\r\n    if (displayTooltip) {\r\n        return (\r\n            <div\r\n                className='card-info'\r\n                dangerouslySetInnerHTML={{ __html: description }}\r\n            />\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nconst CardOverlay = ({\r\n    isUsed,\r\n    isDisabled,\r\n    isBlocked,\r\n    onClick,\r\n    isDiscardEnabled,\r\n    onDiscard\r\n}) => {\r\n    if (isUsed) {\r\n        return (\r\n            <button className='card-use-abort-button' onClick={onClick}>\r\n                <div>\r\n                    <span>Click to abort</span>\r\n                </div>\r\n            </button>\r\n        )\r\n    } else if (isDisabled) {\r\n        return (\r\n            <div className='card-disabled'>\r\n                <span>\r\n                    This card doesn't meet the conditions. Check the\r\n                    description.\r\n                </span>\r\n            </div>\r\n        )\r\n    } else if (isBlocked) {\r\n        return (\r\n            <div className='card-disabled'>\r\n                <span>This card is disabled.</span>\r\n            </div>\r\n        )\r\n    } else if (isDiscardEnabled) {\r\n        return (\r\n            <button className='card-discard-button' onClick={onDiscard}>\r\n                <div>\r\n                    <span>Click to discard</span>\r\n                </div>\r\n            </button>\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nclass Card extends Component {\r\n    cardClasses = () => {\r\n        let classes = 'card '\r\n        if (this.props.isMine) classes += 'hover-pointer'\r\n        return classes\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.cardClasses()}>\r\n                <CardImage\r\n                    id={this.props.card.id}\r\n                    isDisabled={this.props.isDisabled}\r\n                    isMine={this.props.isMine}\r\n                    isUsed={this.props.isUsed}\r\n                    isBlocked={this.props.isBlocked}\r\n                    isDiscardEnabled={this.props.isDiscardEnabled}\r\n                />\r\n                <CardOverlay\r\n                    isDiscardEnabled={this.props.isDiscardEnabled}\r\n                    isDisabled={this.props.isDisabled}\r\n                    isUsed={this.props.isUsed}\r\n                    isBlocked={this.props.isBlocked}\r\n                    onClick={() => {\r\n                        this.props.onUseAbort()\r\n                    }}\r\n                    onDiscard={() => {\r\n                        this.props.onDiscard(this.props.index)\r\n                    }}\r\n                />\r\n                <CardDescription\r\n                    description={this.props.card.description}\r\n                    displayTooltip={this.props.displayTooltip}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\r\nimport Card from './Card'\r\nimport './Cards.css'\r\n\r\nimport { Draggable } from 'react-drag-and-drop'\r\n\r\nimport flipSound1 from '../../Resources/Sounds/card_flip.mp3'\r\nimport flipSound2 from '../../Resources/Sounds/card_flip2.mp3'\r\nconst { Cards: CardsData } = require('../../Game/Cards/Cards')\r\n\r\nclass Cards extends Component {\r\n    state = { displayTooltip: this.props.areMine }\r\n\r\n    getBg = () => {\r\n        if (this.props.move) {\r\n            return {\r\n                animationName: 'moveFlashing',\r\n                animationDuration: '400ms',\r\n                animationIterationCount: 'infinite',\r\n                animationTimingFunction: 'linear',\r\n                animationDirection: 'alternate-reverse',\r\n                animationFillMode: 'forwards'\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    GenerateCard = ({ card, isMine, index, isDisabled, blockCounter }) => {\r\n        if (isMine) {\r\n            let isUsed = this.props.usedCardIndexes[index]\r\n            let data = JSON.stringify({ cardId: card.id, index })\r\n            let isBlocked = false\r\n            if (blockCounter > 0 && blockCounter <= 2) {\r\n                isBlocked = true\r\n            }\r\n\r\n            return (\r\n                <Draggable\r\n                    enabled={isMine && !isUsed && !isDisabled && !isBlocked}\r\n                    onDragStart={() => {\r\n                        this.setState({ displayTooltip: false })\r\n                        this.props.playSound(flipSound1)\r\n                        this.props.setCardTargetHighlight(true)\r\n                    }}\r\n                    onDragEnd={() => {\r\n                        this.setState({ displayTooltip: true })\r\n                        this.props.playSound(flipSound2)\r\n                        this.props.setCardTargetHighlight(false)\r\n                    }}\r\n                    type='card'\r\n                    data={data}\r\n                >\r\n                    <li>\r\n                        <Card\r\n                            isDisabled={isDisabled}\r\n                            isBlocked={isBlocked}\r\n                            index={index}\r\n                            card={card}\r\n                            displayTooltip={this.state.displayTooltip}\r\n                            isDiscardEnabled={this.props.isDiscardEnabled}\r\n                            isMine={isMine}\r\n                            isUsed={isUsed}\r\n                            onUseAbort={() => {\r\n                                this.props.onUseAbort(index)\r\n                            }}\r\n                            onDiscard={index => {\r\n                                if (this.props.move) {\r\n                                    this.props.onDiscard(index, card.id)\r\n                                }\r\n                            }}\r\n                        />\r\n                    </li>\r\n                </Draggable>\r\n            )\r\n        } else {\r\n            return (\r\n                <li>\r\n                    <Card\r\n                        card={card}\r\n                        displayTooltip={this.state.displayTooltip}\r\n                        isMine={isMine}\r\n                    />\r\n                </li>\r\n            )\r\n        }\r\n    }\r\n\r\n    CardsSpawner = () => {\r\n        let { cards, areMine, player, game } = this.props\r\n        let blockCounter = 0\r\n        if (game !== null) blockCounter = game.blockCounters[player.socketId]\r\n        if (cards !== null) {\r\n            return cards.map((card, i) => {\r\n                let cardData = CardsData[card.id]\r\n                return (\r\n                    <this.GenerateCard\r\n                        card={card}\r\n                        index={i}\r\n                        key={i}\r\n                        isMine={areMine}\r\n                        isDisabled={!cardData.doesMeetConditions(game, player)}\r\n                        blockCounter={blockCounter}\r\n                    />\r\n                )\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='cards' style={this.getBg()}>\r\n                <span className='cards-title'>\r\n                    {this.props.title && this.props.title}\r\n                </span>\r\n                <div className='cards-wrapper'>\r\n                    <ul>\r\n                        <this.CardsSpawner />\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards\r\n","import React, { Component } from 'react'\r\n\r\nclass Key extends Component {\r\n    clickHandler = () => {\r\n        this.props.onClick()\r\n        this.props.moveHandler({\r\n            move: {\r\n                type: 'key',\r\n                key: this.props.letter,\r\n                playerSocketId: this.props.player.socketId\r\n            }\r\n        })\r\n    }\r\n\r\n    getStyle = () => {\r\n        let style = null\r\n        style = { backgroundColor: '#519C3F' }\r\n        if (this.props.isUsed) {\r\n            style = { backgroundColor: '#555', textDecoration: 'none' }\r\n        }\r\n        if (this.props.isClicked) {\r\n            style = {\r\n                ...style,\r\n                borderWidth: '0.3vh',\r\n                borderStyle: 'solid',\r\n                borderColor: 'orange'\r\n            }\r\n        }\r\n\r\n        return style\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                style={this.getStyle()}\r\n                onClick={this.clickHandler}\r\n                className='key'\r\n            >\r\n                {this.props.letter}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Key\r\n","import React, { Component } from 'react'\r\nimport Key from './Key'\r\n\r\nclass Keyboard extends Component {\r\n    state = { clickedIndex: null }\r\n\r\n    generateKeys = () => {\r\n        let result = []\r\n        for (let i = 65; i <= 90; i++) {\r\n            let letter = String.fromCharCode(i).toUpperCase()\r\n            let myKeys = this.props.keys.filter(\r\n                key => key.playerSocketId === this.props.player.socketId\r\n            )\r\n            myKeys = myKeys.map(key => {\r\n                return key.key\r\n            })\r\n            let isUsed = myKeys.includes(letter)\r\n\r\n            let isClicked = this.props.clickedIndex === i\r\n            let onClick = index => {\r\n                if (this.props.clickedIndex === index) {\r\n                    this.props.setSelectedKey(null)\r\n                } else {\r\n                    this.props.setSelectedKey(index)\r\n                }\r\n            }\r\n            result.push(\r\n                <Key\r\n                    moveHandler={this.props.moveHandler}\r\n                    onClick={() => onClick(i)}\r\n                    key={i}\r\n                    player={this.props.player}\r\n                    letter={letter}\r\n                    isUsed={isUsed}\r\n                    isClicked={isClicked}\r\n                />\r\n            )\r\n        }\r\n        return result\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='keyboard border-neon border-light-translucent'>\r\n                {this.generateKeys().map(key => {\r\n                    return key\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Keyboard\r\n","import React, { Component } from 'react'\r\n\r\nconst Chains = props => {\r\n    let getSide = props.side\r\n    return (\r\n        <div className={'state-chains ' + getSide}>\r\n            <span>{`Cards blocked for ${props.state} turns.`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Shield = props => {\r\n    let getSide = props.side\r\n    let state = props.state * -1\r\n    return (\r\n        <div className={'state-shield ' + getSide}>\r\n            <span>{`Immune to block cards for ${state} turns.`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass PlayerState extends Component {\r\n    getIcon = (state, side) => {\r\n        if (state > 0) return <Chains state={state} side={side} />\r\n        else if (state < 0) return <Shield state={state} side={side} />\r\n        else return null\r\n    }\r\n\r\n    getPlayerState = me => {\r\n        let { game, player } = this.props\r\n        if (player === null || game === null) return null\r\n        if (me) {\r\n            return this.getIcon(game.blockCounters[player.socketId], 'left-1vh')\r\n        } else {\r\n            let socketId = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            return this.getIcon(game.blockCounters[socketId], 'right-1vh')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='player-state'>\r\n                {this.getPlayerState(true)}\r\n                {this.getPlayerState(false)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayerState\r\n","import React, { Component } from 'react'\r\nimport { Droppable } from 'react-drag-and-drop'\r\nimport Keyboard from './Keyboard'\r\nimport Timer from './Timer'\r\nimport PlayerState from './PlayerState'\r\nimport { POPUP_CARD } from '../Popup/Types'\r\nimport './Content.css'\r\nimport cardDropSound from '../../Resources/Sounds/card_drop.mp3'\r\nimport flipSound3 from '../../Resources/Sounds/card_flip3.mp3'\r\nimport buttonClick from '../../Resources/Sounds/button_click.mp3'\r\nconst { Cards: CardsData } = require('../../Game/Cards/Cards')\r\n\r\nclass Content extends Component {\r\n    state = {\r\n        keyMove: null,\r\n        cardMoves: [],\r\n        clickedIndex: null,\r\n        isDiscardEnabled: false\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        let newCardMoves = state.cardMoves\r\n        Object.keys(props.usedCardIndexes).forEach(index => {\r\n            index = parseInt(index)\r\n            let val = props.usedCardIndexes[index]\r\n            if (val === false) {\r\n                newCardMoves = newCardMoves.filter(move => {\r\n                    return move.index !== index\r\n                })\r\n            }\r\n        })\r\n        return {\r\n            cardMoves: newCardMoves\r\n        }\r\n    }\r\n\r\n    setSelectedKey = state => {\r\n        this.props.playSound(buttonClick)\r\n        this.setState({ clickedIndex: state })\r\n    }\r\n\r\n    colorDisplayWord = word => {\r\n        word = word.toUpperCase()\r\n        let result = []\r\n        let { guessed } = this.props.game\r\n        let { socketId } = this.props.player\r\n        Array.from(word).forEach((letter, i) => {\r\n            let style = null\r\n            if (letter !== '_' && letter !== ' ') {\r\n                let key = guessed.filter(g => {\r\n                    return g.key === letter\r\n                })[0]\r\n                if (key.playerSocketId === socketId) {\r\n                    style = { color: '#0900ff' }\r\n                } else {\r\n                    style = { color: '#b92e34' }\r\n                }\r\n            }\r\n            result.push(\r\n                <span key={i} style={style}>\r\n                    {letter}\r\n                </span>\r\n            )\r\n        })\r\n        return result\r\n    }\r\n\r\n    onDrop = data => {\r\n        if (this.props.move) {\r\n            let card = JSON.parse(data.card)\r\n            let move = {\r\n                index: card.index,\r\n                type: 'card',\r\n                card: card.cardId,\r\n                playerSocketId: this.props.player.socketId\r\n            }\r\n\r\n            let { usedCardIndexes } = this.props\r\n            usedCardIndexes[card.index] = true\r\n            this.props.updateUsedCardIndexes(usedCardIndexes)\r\n\r\n            let isDuplicate = this.state.cardMoves.some(\r\n                cardMove => cardMove.index === card.index\r\n            )\r\n            if (isDuplicate === false) {\r\n                setTimeout(() => {\r\n                    this.props.playSound(cardDropSound)\r\n                }, 100)\r\n                this.setState({ cardMoves: [...this.state.cardMoves, move] })\r\n            }\r\n        }\r\n    }\r\n\r\n    onMove = ({ move }) => {\r\n        if (this.props.move) {\r\n            this.setState({ keyMove: move })\r\n        }\r\n    }\r\n\r\n    onEndTurn = () => {\r\n        if (this.state.keyMove !== null || this.state.cardMoves.length > 0) {\r\n            if (this.props.move) {\r\n                let moves = []\r\n                let { keyMove, cardMoves } = this.state\r\n                if (keyMove !== null) moves.push(keyMove)\r\n                if (cardMoves !== []) moves = [...moves, ...cardMoves]\r\n                this.props.moveHandler({ moves })\r\n                this.setSelectedKey(null)\r\n                this.props.updateUsedCardIndexes({\r\n                    0: false,\r\n                    1: false,\r\n                    2: false\r\n                })\r\n                this.setState({\r\n                    keyMove: null,\r\n                    cardMoves: []\r\n                })\r\n                this.props.playSound(flipSound3)\r\n                cardMoves.forEach(e => {\r\n                    if (e.card === CardsData.DEFINITION_CARD.id) {\r\n                        let definitions = this.props.game.word.definitions\r\n                        let randomIndex = Math.floor(\r\n                            Math.random() * definitions.length\r\n                        )\r\n                        this.props.addPopup({\r\n                            popupData: {\r\n                                title: 'Word definition',\r\n                                content: definitions[randomIndex]\r\n                            }\r\n                        })\r\n                    } else if (e.card === CardsData.LOOK_UP_CARD.id) {\r\n                        let enemySocket = this.props.game.playerSockets.filter(\r\n                            x => {\r\n                                return x.socketId !== this.props.player.socketId\r\n                            }\r\n                        )[0].socketId\r\n                        let enemyCards = this.props.game.cards[enemySocket]\r\n                        let randomIndexOfCard = Math.floor(\r\n                            Math.random() * enemyCards.length\r\n                        )\r\n                        let randomEnemyCard = enemyCards[randomIndexOfCard].id\r\n                        let { description } = CardsData[randomEnemyCard]\r\n                        this.props.addPopup({\r\n                            type: POPUP_CARD,\r\n                            popupData: {\r\n                                cardId: randomEnemyCard,\r\n                                description\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            this.props.addPopup({\r\n                popupData: {\r\n                    title: 'You need to move',\r\n                    content: \"You can't move without making any choice.\"\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    endTurnButton = () => {\r\n        let text = 'Waiting...'\r\n        if (this.props.move) text = 'End turn'\r\n        let classes =\r\n            'end-turn-btn button-pointer border-neon border-light-translucent '\r\n        if (this.props.move) classes += 'end-turn-btn-hover'\r\n\r\n        return (\r\n            <button\r\n                onClick={this.onEndTurn}\r\n                disabled={!this.props.move}\r\n                className={classes}\r\n            >\r\n                {text}\r\n            </button>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let displayWord = []\r\n        if (this.props.game !== null) {\r\n            displayWord = this.colorDisplayWord(this.props.game.displayWord)\r\n        }\r\n\r\n        let wordClass = 'word border-neon border-neon-violet '\r\n        if (this.props.isCardTargetHighlight && this.props.move)\r\n            wordClass += 'word-glow'\r\n\r\n        return (\r\n            <div className='content'>\r\n                <PlayerState\r\n                    player={this.props.player}\r\n                    game={this.props.game}\r\n                />\r\n                <div className='timer-wrapper'>\r\n                    {this.props.move && (\r\n                        <Timer time={30} onEnd={this.props.onMoveTimeout} />\r\n                    )}\r\n                </div>\r\n                <div className='game'>\r\n                    <Droppable types={['card']} onDrop={this.onDrop}>\r\n                        <div className={wordClass}>\r\n                            {displayWord.map(x => {\r\n                                return x\r\n                            })}\r\n                        </div>\r\n                    </Droppable>\r\n                    <div className='keyboard-wrapper'>\r\n                        <this.endTurnButton />\r\n                        {this.props.game && (\r\n                            <Keyboard\r\n                                player={this.props.player}\r\n                                moveHandler={this.onMove}\r\n                                keys={this.props.game.keys}\r\n                                setSelectedKey={this.setSelectedKey}\r\n                                clickedIndex={this.state.clickedIndex}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Content\r\n","import React, { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport ReactAudioPlayer from 'react-audio-player'\r\n\r\nimport './Game.css'\r\nimport Cards from './Cards'\r\nimport Content from './Content'\r\n\r\nconst { isMove } = require('../../Shared/Functions')\r\nconst { winHandler } = require('./Functions')\r\nconst { setScore } = require('../../Shared/Functions')\r\nconst { GAME_MOVE, WIN } = require('../../Shared/Events')\r\nconst { Result } = require('../../Shared/Enums')\r\nclass Game extends Component {\r\n    state = {\r\n        game: this.props.game,\r\n        gameFromProps: true,\r\n        allowMove: true,\r\n        myCards: null,\r\n        enemyCards: null,\r\n        cardTargetHighlight: false,\r\n        usedCardIndexes: { 0: false, 1: false, 2: false },\r\n        soundSrc: '',\r\n        isDiscardEnabled: false,\r\n        discardMoves: []\r\n    }\r\n\r\n    initializeSocket = () => {\r\n        const { socket } = this.props\r\n        socket.on(GAME_MOVE, ({ game }) => {\r\n            this.setState({ game: game }, () => {\r\n                this.props.setMove(\r\n                    isMove({ game: this.state.game, player: this.props.player })\r\n                )\r\n            })\r\n        })\r\n        socket.on(WIN, ({ winner, score, type, game }) => {\r\n            if (type === Result.TURN_WIN || type === Result.TURN_TIE) {\r\n                this.props.addPopup({\r\n                    popupData: {\r\n                        title: 'Guessed word',\r\n                        content: this.state.game.word.word\r\n                    }\r\n                })\r\n            }\r\n            let winObj = winHandler({\r\n                type,\r\n                setScore,\r\n                score,\r\n                game,\r\n                winner,\r\n                props: this.props,\r\n                returnToMenu: () => {\r\n                    this.props.history.push('/browser')\r\n                }\r\n            })\r\n\r\n            this.setState({ ...winObj })\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.gameFromProps) {\r\n            if (props.game !== state.game) {\r\n                setScore({\r\n                    player: props.player,\r\n                    game: props.game,\r\n                    setTitle: props.setTitle\r\n                })\r\n                return {\r\n                    gameFromProps: false,\r\n                    game: props.game\r\n                }\r\n            }\r\n            return null\r\n        }\r\n        return null\r\n    }\r\n\r\n    ctrlPressHandler(event, isDown) {\r\n        if (event.keyCode === 17) {\r\n            this.setState({ isDiscardEnabled: isDown })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.socket && this.initializeSocket()\r\n        this.props.muteMusic(true)\r\n        document.addEventListener(\r\n            'keydown',\r\n            e => {\r\n                this.ctrlPressHandler(e, true)\r\n            },\r\n            false\r\n        )\r\n        document.addEventListener(\r\n            'keyup',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\r\n            'keydown',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n        document.removeEventListener(\r\n            'keyup',\r\n            e => {\r\n                this.ctrlPressHandler(e, false)\r\n            },\r\n            false\r\n        )\r\n    }\r\n\r\n    moveHandler = ({ moves = null }) => {\r\n        if (this.state.allowMove === true) {\r\n            const { socket } = this.props\r\n            console.log(moves)\r\n            console.log(this.state.discardMoves)\r\n            let allMoves = [...moves, ...this.state.discardMoves]\r\n            console.log(allMoves)\r\n            socket.emit(GAME_MOVE, { game: this.state.game, moves: allMoves })\r\n        }\r\n    }\r\n\r\n    onMoveTimeout = () => {\r\n        this.moveHandler({\r\n            moves: [\r\n                {\r\n                    type: 'key',\r\n                    key: '',\r\n                    playerSocketId: this.props.player.socketId\r\n                }\r\n            ]\r\n        })\r\n    }\r\n\r\n    setCardTargetHighlight = bool => {\r\n        this.setState({ cardTargetHighlight: bool })\r\n    }\r\n\r\n    updateUsedCardIndexes = newIndexes => {\r\n        this.setState({ usedCardIndexes: newIndexes })\r\n    }\r\n\r\n    onUseAbort = index => {\r\n        let newIndexes = this.state.usedCardIndexes\r\n        newIndexes[index] = false\r\n        this.updateUsedCardIndexes(newIndexes)\r\n    }\r\n\r\n    playSound = src => {\r\n        this.setState({ soundSrc: src })\r\n    }\r\n\r\n    onDiscard = (index, cardId) => {\r\n        let move = {\r\n            type: 'card',\r\n            card: cardId,\r\n            playerSocketId: this.props.player.socketId,\r\n            discarded: true\r\n        }\r\n        let newGame = this.state.game\r\n        let mySocketId = this.props.player.socketId\r\n        console.log(newGame.cards)\r\n        newGame.cards[mySocketId] = newGame.cards[mySocketId].filter(\r\n            (val, i) => {\r\n                return i !== index\r\n            }\r\n        )\r\n        console.log(newGame.cards)\r\n        let newDiscardMoves = this.state.discardMoves\r\n        newDiscardMoves.push(move)\r\n        this.setState({\r\n            discardMoves: newDiscardMoves,\r\n            game: newGame\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let cards = { my: null, enemy: null }\r\n        if (this.state.game !== null) {\r\n            let gameCards = this.state.game.cards\r\n            let mySocketId = this.props.player.socketId\r\n            cards.my = gameCards[mySocketId]\r\n            let enemySocketId = this.state.game.playerSockets.filter(x => {\r\n                return x.socketId !== this.props.player.socketId\r\n            })[0].socketId\r\n            cards.enemy = gameCards[enemySocketId]\r\n        }\r\n        return (\r\n            <div className='gameWrapper'>\r\n                <ReactAudioPlayer\r\n                    volume={this.props.soundVolume}\r\n                    src={this.state.soundSrc}\r\n                    autoPlay\r\n                    onEnded={() => {\r\n                        this.setState({ soundSrc: '' })\r\n                    }}\r\n                />\r\n                <Cards\r\n                    cards={cards.my}\r\n                    onUseAbort={this.onUseAbort}\r\n                    usedCardIndexes={this.state.usedCardIndexes}\r\n                    areMine={true}\r\n                    move={this.props.isMove}\r\n                    title='Your cards:'\r\n                    setCardTargetHighlight={this.setCardTargetHighlight}\r\n                    playSound={this.playSound}\r\n                    game={this.state.game}\r\n                    player={this.props.player}\r\n                    isDiscardEnabled={this.state.isDiscardEnabled}\r\n                    onDiscard={this.onDiscard}\r\n                />\r\n                <Content\r\n                    player={this.props.player}\r\n                    updateUsedCardIndexes={this.updateUsedCardIndexes}\r\n                    usedCardIndexes={this.state.usedCardIndexes}\r\n                    moveHandler={this.moveHandler}\r\n                    onMoveTimeout={this.onMoveTimeout}\r\n                    move={this.props.isMove}\r\n                    game={this.state.game}\r\n                    addPopup={this.props.addPopup}\r\n                    isCardTargetHighlight={this.state.cardTargetHighlight}\r\n                    playSound={this.playSound}\r\n                />\r\n                <Cards\r\n                    cards={cards.enemy}\r\n                    usedCardIndexes={{ 0: false, 1: false, 2: false }}\r\n                    areMine={false}\r\n                    move={!this.props.isMove}\r\n                    title='Enemy cards:'\r\n                    setCardTargetHighlight={this.setCardTargetHighlight}\r\n                    playSound={this.playSound}\r\n                    game={this.state.game}\r\n                    player={this.props.player}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nGame.propTypes = {\r\n    game: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    player: PropTypes.object,\r\n    history: PropTypes.object.isRequired,\r\n    isMove: PropTypes.bool.isRequired,\r\n    muteMusic: PropTypes.func.isRequired,\r\n    setMove: PropTypes.func.isRequired,\r\n    setTitle: PropTypes.func.isRequired,\r\n    soundVolume: PropTypes.number.isRequired\r\n}\r\n\r\nexport default withRouter(Game)\r\n","import React, { Component } from 'react'\r\nimport './PlayersBrowser.css'\r\nimport { POPUP_GENERIC } from '../../Components/Popup/Types'\r\n\r\nclass BrowserEntry extends Component {\r\n    state = {\r\n        isButtonDisabled: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true\r\n        this.setState({ isButtonDisabled: false })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.isButtonDisabled === true) {\r\n            setTimeout(() => {\r\n                if (this._isMounted === true) {\r\n                    this.setState({ isButtonDisabled: false })\r\n                }\r\n            }, 5000)\r\n        }\r\n    }\r\n\r\n    clickHandler = event => {\r\n        event.preventDefault()\r\n        if (this.state.isButtonDisabled === true) {\r\n            console.log('pipup')\r\n            this.props.addPopup({\r\n                type: POPUP_GENERIC,\r\n                popupData: {\r\n                    title: 'Error!',\r\n                    content: '<p>You are inviting too fast. Wait 5 seconds</p>'\r\n                }\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isButtonDisabled: true\r\n            })\r\n\r\n            this.props.invitationHandler({\r\n                id: this.props.id,\r\n                socketId: this.props.socketId\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='browser-entry width-full'>\r\n                <span className='player-info'>\r\n                    <span className='nickname'>{this.props.nickname}</span>\r\n                </span>\r\n                <button\r\n                    id='inviteButton'\r\n                    onClick={e => {\r\n                        this.clickHandler(e)\r\n                    }}\r\n                    className='play border-neon border-neon-lime'\r\n                >\r\n                    Play\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BrowserEntry\r\n","import BrowserEntry from './BrowserEntry'\r\nimport React from 'react'\r\n\r\nexport const extractBrowserPlayers = ({\r\n    player,\r\n    connectedPlayers,\r\n    invitationHandler,\r\n    addPopup\r\n}) => {\r\n    connectedPlayers = Object.assign({}, connectedPlayers)\r\n\r\n    //* don't display the current player\r\n    if (player) {\r\n        delete connectedPlayers[player.nickname]\r\n    }\r\n\r\n    let result = []\r\n    Object.values(connectedPlayers).forEach(player => {\r\n        let { isInGame } = player\r\n        if (isInGame === false) {\r\n            result.push(\r\n                <BrowserEntry\r\n                    addPopup={addPopup}\r\n                    id={player.id}\r\n                    socketId={player.socketId}\r\n                    invitationHandler={invitationHandler}\r\n                    nickname={player.nickname}\r\n                    key={player.id}\r\n                    index={Object.values(connectedPlayers).indexOf(player)}\r\n                />\r\n            )\r\n        }\r\n    })\r\n    return result\r\n}\r\n","import React from 'react'\r\nimport './PlayersBrowser.css'\r\nimport Scrollbar from 'react-scrollbars-custom'\r\nimport { extractBrowserPlayers } from './Functions'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PlayersBrowser extends React.Component {\r\n    state = {\r\n        connectedPlayers: this.props.connectedPlayers,\r\n        playersInBrowser: extractBrowserPlayers({\r\n            player: this.props.player,\r\n            connectedPlayers: this.props.connectedPlayers,\r\n            invitationHandler: this.props.invitationHandler,\r\n            addPopup: this.props.addPopup\r\n        }),\r\n        searchedPlayer: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Players browser' })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (state.connectedPlayers !== props.connectedPlayers) {\r\n            return {\r\n                playersInBrowser: extractBrowserPlayers({\r\n                    player: props.player,\r\n                    connectedPlayers: props.connectedPlayers,\r\n                    invitationHandler: props.invitationHandler,\r\n                    addPopup: props.addPopup\r\n                }),\r\n                connectedPlayers: props.connectedPlayers\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    searchPlayer = e => {\r\n        let input = e.target.value\r\n        if (input === '') {\r\n            this.setState({ searchedPlayer: null })\r\n        } else {\r\n            let players = Object.keys(this.props.connectedPlayers)\r\n            players = players.filter(\r\n                item => item !== this.props.player.nickname\r\n            )\r\n            for (let i = 0; i < players.length; i++) {\r\n                if (players[i].toLowerCase().includes(input.toLowerCase())) {\r\n                    this.setState({\r\n                        searchedPlayer: this.props.connectedPlayers[players[i]]\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    SearchedPlayer = () => {\r\n        return extractBrowserPlayers({\r\n            player: this.props.player,\r\n            connectedPlayers: [this.state.searchedPlayer],\r\n            invitationHandler: this.props.invitationHandler,\r\n            addPopup: this.props.addPopup\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='players-browser container content-vcenter border-neon border-neon-orange'>\r\n                <div className='players-browser-title bg-lightgrey width-full text-xlg text-center'>\r\n                    <p>\r\n                        {this.props.player && (\r\n                            <span>\r\n                                You are logged in as{' '}\r\n                                <b>{this.props.player.nickname}</b>.\r\n                            </span>\r\n                        )}\r\n                    </p>\r\n                </div>\r\n                <div className='search-player'>\r\n                    <input\r\n                        placeholder='Search player'\r\n                        onChange={this.searchPlayer}\r\n                        className='border-neon border-neon-blue'\r\n                    />\r\n                </div>\r\n                <Scrollbar style={{ width: '100%', height: '100%' }}>\r\n                    {!this.state.searchedPlayer ? (\r\n                        this.state.playersInBrowser.map(entry => {\r\n                            return entry\r\n                        })\r\n                    ) : (\r\n                        <this.SearchedPlayer />\r\n                    )}\r\n                </Scrollbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPlayersBrowser.propTypes = {\r\n    addPopup: PropTypes.func.isRequired,\r\n    connectedPlayers: PropTypes.object.isRequired,\r\n    invitationHandler: PropTypes.func.isRequired,\r\n    player: PropTypes.object,\r\n    playersInBrowser: PropTypes.array,\r\n    setTitle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default PlayersBrowser\r\n","import React, { Component } from 'react'\r\nimport './LoginPage.css'\r\nimport { VERIFY_USERNAME } from '../../Shared/Events'\r\nimport { POPUP_GENERIC } from '../Popup/Types'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass LoginPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputRef = React.createRef()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Login page' })\r\n    }\r\n\r\n    loginHandler = () => {\r\n        let nickname = this.inputRef.current.value\r\n        const { socket } = this.props\r\n        if (nickname.length <= 1) {\r\n            this.props.addPopup({\r\n                type: POPUP_GENERIC,\r\n                popupData: {\r\n                    title: 'Error!',\r\n                    content: '<p>Your nickname has to be longer.</p>'\r\n                }\r\n            })\r\n            return\r\n        }\r\n        else if (nickname.includes(' ')) {\r\n            this.props.addPopup({\r\n                type: POPUP_GENERIC,\r\n                popupData: {\r\n                    title: 'Error!',\r\n                    content: '<p>Your nickname cannot have spaces.</p>'\r\n                }\r\n            })\r\n            return\r\n        }\r\n        socket.emit(VERIFY_USERNAME, nickname, ({ player, isTaken }) => {\r\n            if (isTaken) {\r\n                this.props.addPopup({\r\n                    type: POPUP_GENERIC,\r\n                    popupData: {\r\n                        title: 'Error!',\r\n                        content: '<p>This nickname is taken.</p>'\r\n                    }\r\n                })\r\n            } else {\r\n                this.props.loginPlayer(player)\r\n            }\r\n        })\r\n    }\r\n\r\n    submitOnEnter = key => {\r\n        if (key.which === 13) {\r\n            this.loginHandler()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className='login-page-content'>\r\n                    <div className='infoNickname border-neon border-neon-violet'>\r\n                        <p>Please enter your nickname</p>\r\n                    </div>\r\n                    <div className='nickname-input'>\r\n                        <input\r\n                            ref={this.inputRef}\r\n                            type='text'\r\n                            maxLength='15'\r\n                            className='inputNickname border-neon border-neon-red'\r\n                            onKeyDown={this.submitOnEnter}\r\n                        />\r\n                        <button\r\n                            className='button-pointer border-neon border-neon-orange'\r\n                            onClick={this.loginHandler}\r\n                        >\r\n                            SUBMIT\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(LoginPage)\r\n","import React, { Component } from 'react'\r\nimport { WALKTHROUGH_READY } from '../../Shared/Events'\r\nimport './Walkthrough.css'\r\n// import image from '../../../public/images/walkthrough/walkthrough.png'\r\n\r\nconst Description = () => {\r\n    return (\r\n        <div className='walkthrough-desc'>\r\n            <ol>\r\n                <li>\r\n                    <span>Your cards which you can use during a turn.</span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Keyboard where you can guess a letter by clicking it and\r\n                        end turn.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Place for a random word. Your guessed letters are\r\n                        colored by blue and opponent's are red.\r\n                    </span>\r\n                </li>\r\n            </ol>\r\n            <ul>\r\n                <li>\r\n                    <span>\r\n                        During a turn you can use cards and guess one letter.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        To use a card drag it on the random word (number 3) and\r\n                        drop.\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        Game ends after you or your opponent win two rounds.\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Walkthrough extends Component {\r\n    state = { buttonVisibility: true }\r\n\r\n    onReady = () => {\r\n        const { socket } = this.props\r\n        socket.emit(WALKTHROUGH_READY, { gameId: this.props.gameId })\r\n        this.setState({ buttonVisibility: false })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle({ title: 'Walkthrough' })\r\n    }\r\n\r\n    render() {\r\n        let buttonClass = this.state.buttonVisibility\r\n            ? 'ok-btn border-neon border-neon-orange'\r\n            : 'ok-btn-pressed ok-btn border-neon border-neon-orange'\r\n        let content = this.state.buttonVisibility\r\n            ? 'READY'\r\n            : 'Waiting for opponent...'\r\n        return (\r\n            <div className='gameWrapper'>\r\n                <div className='walkthrough'>\r\n                    <div className='walkthrough-content'>\r\n                        <img\r\n                            className='walkthrough-image'\r\n                            src='images/walkthrough/walkthrough.png'\r\n                            alt='Walkthrough screenshot'\r\n                        />\r\n                        <Description />\r\n                    </div>\r\n\r\n                    <div className='ok-btn-wrapper'>\r\n                        <button className={buttonClass} onClick={this.onReady}>\r\n                            {content}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Walkthrough\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\nimport Header from './Components/Header/Header'\r\nimport Popups from './Components/Popup/Popups'\r\nimport Game from './Components/Game/Game'\r\nimport Credits from './Components/Credits/Credits'\r\nimport PlayersBrowser from './Components/PlayersBrowser/PlayersBrowser'\r\nimport LoginPage from './Components/LoginPage/LoginPage'\r\n\r\nimport { POPUP_GENERIC, POPUP_INVITATION } from './Components/Popup/Types'\r\n\r\nimport io from 'socket.io-client'\r\nimport {\r\n    PLAYER_CONNECTED,\r\n    LOGOUT,\r\n    PLAYER_DISCONNECTED,\r\n    INVITATION,\r\n    GAME_STARTED,\r\n    REFRESH_PLAYERS,\r\n    INVITATION_ACCEPTED,\r\n    GAME_CREATED\r\n} from './Shared/Events'\r\nimport { isMove } from './Shared/Functions'\r\n\r\nimport { Route, withRouter, Switch } from 'react-router-dom'\r\n\r\nimport ReactAudioPlayer from 'react-audio-player'\r\nimport bgMusic from './Resources/Sounds/bg-lower.mp3'\r\nimport Walkthrough from './Components/Game/Walkthrough'\r\n\r\n//todo remove posed\r\n\r\nconst uuidv4 = require('uuid/v4')\r\nconst socketUrl = 'ws://cardman-multiplayer.herokuapp.com:80'\r\nconst { setScore } = require('./Shared/Functions')\r\n\r\nclass Logo extends React.Component {\r\n    state = { display: true }\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({ display: false })\r\n        }, 2500)\r\n    }\r\n    render() {\r\n        if (this.state.display) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className='intro-logo'>\r\n                        <div className='text-nunito intro-1'>Cardman&nbsp;</div>\r\n                        <div className='text-nunito intro-2'>Multiplayer</div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return null\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.popupsRef = React.createRef()\r\n        this.state = {\r\n            isLogoVisible: false,\r\n            title: 'Cardman Multiplayer',\r\n            score: null,\r\n            player: null,\r\n            socket: null,\r\n            connectedPlayers: {},\r\n            game: null,\r\n            isMove: false,\r\n            volumeSettings: {\r\n                musicVol: 0.5,\r\n                soundVol: 0.5,\r\n                muted: false\r\n            },\r\n            isDisconnected: false,\r\n            gameId: null\r\n        }\r\n    }\r\n\r\n    config = {\r\n        disconnectedTimeoutMs: 20,\r\n        defaultVolumeSettings: {\r\n            musicVol: 0.5,\r\n            soundVol: 0.5\r\n        }\r\n    }\r\n\r\n    isInCache = key => {\r\n        return (\r\n            localStorage.getItem(key) !== null &&\r\n            localStorage.getItem(key) !== undefined\r\n        )\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.location.pathname !== '/') {\r\n            if (this.state.player === null) {\r\n                this.props.history.push('/')\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.setState({ isLogoVisible: !this.state.isLogoVisible })\r\n        }, 1000)\r\n        if (this.isInCache('cachedVolumeSettings')) {\r\n            let cachedVolumeSettings = JSON.parse(\r\n                localStorage.getItem('cachedVolumeSettings')\r\n            )\r\n            this.setState({\r\n                volumeSettings: {\r\n                    musicVol: cachedVolumeSettings.musicVol,\r\n                    soundVol: cachedVolumeSettings.soundVol\r\n                }\r\n            })\r\n        } else {\r\n            let cachedVolumeSettings = {\r\n                musicVol: this.config.defaultVolumeSettings.musicVol,\r\n                soundVol: this.config.defaultVolumeSettings.soundVol\r\n            }\r\n            localStorage.setItem(\r\n                'cachedVolumeSettings',\r\n                JSON.stringify(cachedVolumeSettings)\r\n            )\r\n        }\r\n\r\n        this.initializeSocket()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.logoutPlayer()\r\n    }\r\n\r\n    invitationHandler = ({ id = null, socketId = null }) => {\r\n        //Prevent players from inviting themselves\r\n        if (id === this.state.player.id) {\r\n            this.addPopup({\r\n                title: 'Error!',\r\n                content: 'You cannot invite yourself.'\r\n            })\r\n        } else {\r\n            const { socket } = this.state\r\n            socket.emit(INVITATION, { id, socketId })\r\n        }\r\n    }\r\n\r\n    initializeSocket = () => {\r\n        const socket = io(socketUrl)\r\n        this.setState({ socket })\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected to server.')\r\n        })\r\n\r\n        socket.on('pong', ms => {\r\n            if (ms > this.config.disconnectedTimeoutMs) {\r\n                this.setState({ isDisconnected: true })\r\n            } else {\r\n                this.setState({ isDisconnected: false })\r\n            }\r\n        })\r\n\r\n        let refreshingPlayersSockets = [\r\n            PLAYER_CONNECTED,\r\n            PLAYER_DISCONNECTED,\r\n            REFRESH_PLAYERS\r\n        ]\r\n\r\n        refreshingPlayersSockets.forEach(s => {\r\n            socket.on(s, ({ connectedPlayers }) => {\r\n                console.log(s)\r\n                this.setState({ connectedPlayers })\r\n            })\r\n        })\r\n        socket.on(INVITATION, ({ nickname, socketId }) => {\r\n            const { socket } = this.state\r\n            this.addPopup({\r\n                type: POPUP_INVITATION,\r\n                popupData: {\r\n                    nickname,\r\n                    onAccept: () => {\r\n                        socket.emit(INVITATION_ACCEPTED, {\r\n                            fromSocketId: socketId,\r\n                            to: this.state.player\r\n                        })\r\n                    },\r\n                    onDecline: () => {}\r\n                }\r\n            })\r\n        })\r\n        socket.on(GAME_CREATED, ({ gameId }) => {\r\n            this.setState({ gameId }, () => {\r\n                this.props.history.push('/walkthrough')\r\n            })\r\n        })\r\n        socket.on(GAME_STARTED, ({ game }) => {\r\n            this.setGame({ game })\r\n            this.setMove(isMove({ game, player: this.state.player }))\r\n            setScore({\r\n                player: this.state.player,\r\n                game,\r\n                setTitle: this.setTitle\r\n            })\r\n        })\r\n    }\r\n\r\n    loginPlayer = player => {\r\n        const { socket } = this.state\r\n        //Sending login socket with freshly generated, previosly verified player\r\n        socket.emit(PLAYER_CONNECTED, player)\r\n        this.setState({ player })\r\n\r\n        //Wait for server response, then get the player list\r\n        socket.on(PLAYER_CONNECTED, ({ connectedPlayers }) => {\r\n            this.setState({ connectedPlayers })\r\n            this.props.history.push('/browser')\r\n        })\r\n    }\r\n\r\n    logoutPlayer = () => {\r\n        //Sending logout socket and setting user to player, thus hiding all the functionalities\r\n        const { socket } = this.state\r\n        socket.emit(LOGOUT)\r\n        this.setState({ player: null })\r\n    }\r\n\r\n    setTitle = ({ title = null, score = null }) => {\r\n        this.setState({ title: title })\r\n        this.setState({ score: score })\r\n    }\r\n\r\n    setGame = ({ game }) => {\r\n        this.setState({ game }, this.props.history.push('/game'))\r\n    }\r\n\r\n    setMove = isMove => {\r\n        this.setState({ isMove })\r\n    }\r\n\r\n    setSettings = ({ soundVol, musicVol }) => {\r\n        this.setState({\r\n            volumeSettings: { soundVol: soundVol, musicVol: musicVol }\r\n        })\r\n        let cachedVolumeSettings = { musicVol: musicVol, soundVol: soundVol }\r\n        localStorage.setItem(\r\n            'cachedVolumeSettings',\r\n            JSON.stringify(cachedVolumeSettings)\r\n        )\r\n    }\r\n\r\n    muteMusic = state => {\r\n        this.setState({\r\n            volumeSettings: { ...this.state.volumeSettings, muted: state }\r\n        })\r\n    }\r\n\r\n    addPopup = ({ type = POPUP_GENERIC, popupData }) => {\r\n        this.setState({\r\n            newPopup: { type, popupData: { ...popupData, id: uuidv4() } }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            socket,\r\n            player,\r\n            game,\r\n            gameId,\r\n            isMove,\r\n            connectedPlayers,\r\n            isDisconnected\r\n        } = this.state\r\n        const { volumeSettings } = this.state\r\n        return (\r\n            <div className='container of-rows width-full height-full text-nunito '>\r\n                <Logo />\r\n                <Header\r\n                    volumeSettings={volumeSettings}\r\n                    title={this.state.title}\r\n                    score={this.state.score}\r\n                    setSettings={this.setSettings}\r\n                />\r\n                <ReactAudioPlayer\r\n                    src={bgMusic}\r\n                    autoPlay\r\n                    volume={volumeSettings.musicVol}\r\n                    loop={true}\r\n                    muted={volumeSettings.muted}\r\n                />\r\n                <div className='row height-full width-full bg-lightgrey'>\r\n                    <Popups\r\n                        newPopup={this.state.newPopup}\r\n                        isDisconnected={isDisconnected}\r\n                        soundVolume={volumeSettings.soundVol}\r\n                    />\r\n                    <Switch>\r\n                        <Route exact path='/'>\r\n                            <LoginPage\r\n                                socket={socket}\r\n                                loginPlayer={this.loginPlayer}\r\n                                setTitle={this.setTitle}\r\n                                addPopup={this.addPopup}\r\n                            />\r\n                        </Route>\r\n                        <Route\r\n                            path='/credits'\r\n                            setTitle={this.setTitle}\r\n                            component={Credits}\r\n                        />\r\n                        <Route\r\n                            path='/browser'\r\n                            render={() => (\r\n                                <PlayersBrowser\r\n                                    player={player}\r\n                                    setTitle={this.setTitle}\r\n                                    addPopup={this.addPopup}\r\n                                    invitationHandler={this.invitationHandler}\r\n                                    connectedPlayers={connectedPlayers}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            path='/walkthrough'\r\n                            render={() => (\r\n                                <Walkthrough\r\n                                    player={player}\r\n                                    setTitle={this.setTitle}\r\n                                    gameId={gameId}\r\n                                    muteMusic={this.muteMusic}\r\n                                    socket={socket}\r\n                                    soundVolume={volumeSettings.soundVol}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            path='/game'\r\n                            render={() => (\r\n                                <Game\r\n                                    player={player}\r\n                                    game={game}\r\n                                    muteMusic={this.muteMusic}\r\n                                    socket={socket}\r\n                                    setTitle={this.setTitle}\r\n                                    addPopup={this.addPopup}\r\n                                    setMove={this.setMove}\r\n                                    isMove={isMove}\r\n                                    soundVolume={volumeSettings.soundVol}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(App)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n","const isMove = ({ game, player }) => {\r\n    let nextPlayerIndex = game.nextPlayerIndex\r\n    return game.playerSockets[nextPlayerIndex].id === player.id\r\n}\r\n\r\nconst setScore = ({ player, game = null, setTitle }) => {\r\n    let me = game.playerSockets.filter(p => {\r\n        return p.socketId === player.socketId\r\n    })[0]\r\n\r\n    let enemy = game.playerSockets.filter(p => {\r\n        return p.socketId !== player.socketId\r\n    })[0]\r\n\r\n    let score = game.score\r\n\r\n    setTitle({\r\n        score: {\r\n            me: me.nickname,\r\n            myScore: score[me.socketId],\r\n            enemy: enemy.nickname,\r\n            enemyScore: score[enemy.socketId]\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = { isMove, setScore }\r\n","const Cards = {\r\n    DEFINITION_CARD: {\r\n        id: 'DEFINITION_CARD',\r\n        title: 'Definition card',\r\n        description: 'Shows you a definition of the word.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            console.log('DEFINITION_CARD card used')\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    RANDOM_CORRECT_LETTER_CARD: {\r\n        id: 'RANDOM_CORRECT_LETTER_CARD',\r\n        title: 'Random correct letter',\r\n        description: 'Chooses a random correct letter.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let randomCorrectLetter = () => {\r\n                let { word } = currentGame.word\r\n                let { guessed } = currentGame\r\n                let guessedArr = guessed.map(g => g.key.toUpperCase())\r\n                word = word.toUpperCase()\r\n                let arr = Array.from(word).filter(char => {\r\n                    return !guessedArr.includes(char)\r\n                })\r\n                let randomIndex = Math.floor(Math.random() * arr.length)\r\n                return arr[randomIndex].toUpperCase()\r\n            }\r\n\r\n            let key = randomCorrectLetter()\r\n            currentGame.guessed.push({\r\n                key,\r\n                playerSocketId: move.playerSocketId\r\n            })\r\n            let playerSocket =\r\n                currentGame.playerSockets[currentGame.nextPlayerIndex].socketId\r\n            let enemySocket =\r\n                currentGame.playerSockets[1 - currentGame.nextPlayerIndex]\r\n                    .socketId\r\n            currentGame.keys.push({\r\n                key,\r\n                playerSocketId: playerSocket\r\n            })\r\n            currentGame.keys.push({\r\n                key,\r\n                playerSocketId: enemySocket\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    ADDITIONAL_TURN_CARD: {\r\n        id: 'ADDITIONAL_TURN_CARD',\r\n        title: 'Additional letter',\r\n        description: 'You can choose two letters in a turn.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            console.log('ADDITIONAL_TURN_CARD card used')\r\n            currentGame.nextPlayerIndex = 1 - currentGame.nextPlayerIndex\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    REMOVE_ONE_UNFITTING_CARD: {\r\n        id: 'REMOVE_ONE_UNFITTING_CARD',\r\n        title: 'Remove one unfitting letter.',\r\n        description: 'Removes one unfitting letter from the current word.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let { word } = currentGame.word\r\n            let wordKeys = Array.from(word.toUpperCase())\r\n            let myKeys = []\r\n            currentGame.keys.forEach(key => {\r\n                if (key.playerSocketId === socket.user.socketId) {\r\n                    myKeys.push(key.key)\r\n                }\r\n            })\r\n            let candidates = []\r\n            for (let i = 65; i <= 90; i++) {\r\n                let letter = String.fromCharCode(i).toUpperCase()\r\n                if (!wordKeys.includes(letter) && !myKeys.includes(letter)) {\r\n                    candidates.push(letter)\r\n                }\r\n            }\r\n            currentGame.keys.push({\r\n                key: candidates[Math.floor(Math.random() * candidates.length)],\r\n                playerSocketId: socket.user.socketId\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    REMOVE_TWO_UNFITTING_CARD: {\r\n        id: 'REMOVE_TWO_UNFITTING_CARD',\r\n        title: 'Remove two unfitting letters.',\r\n        description: 'Removes two unfitting letters from the current word.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            currentGame = Cards.REMOVE_ONE_UNFITTING_CARD.use({\r\n                currentGame,\r\n                socket,\r\n                move\r\n            })\r\n            currentGame = Cards.REMOVE_ONE_UNFITTING_CARD.use({\r\n                currentGame,\r\n                socket,\r\n                move\r\n            })\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    BLOCK_CARD: {\r\n        id: 'BLOCK_CARD',\r\n        title: 'Block enemy cards for 2 turns.',\r\n        description: `<span>\r\n                <b>Blocks enemy cards for 2 turns.</b>\r\n            </span>\r\n            <span>\r\n                You can't block an already blocked player.<u>don't</u> add up.<br>\r\n                These values <u>don't</u> add up.\r\n            </span>`,\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n            if (currentGame.blockCounters[enemySocket] === 0)\r\n                currentGame.blockCounters[enemySocket] = 2\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: (game, player) => {\r\n            let enemySocket = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            if (game.blockCounters[enemySocket] === 0) return true\r\n            return false\r\n        }\r\n    },\r\n    IMMUNE_TO_BLOCK_CARD: {\r\n        id: 'IMMUNE_TO_BLOCK_CARD',\r\n        title: 'Immune to block.',\r\n        description: `<span>\r\n                <b>Immune to blocking cards for 2 turns.</b>\r\n            </span>\r\n            <span>\r\n                These values <u>do</u> add up.\r\n            </span>`,\r\n        use: ({ currentGame, socket, move }) => {\r\n            let mySocket = move.playerSocketId\r\n            let blockCounters = currentGame.blockCounters[mySocket]\r\n            currentGame.blockCounters[mySocket] = blockCounters - 2\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    LOOK_UP_CARD: {\r\n        id: 'LOOK_UP_CARD',\r\n        title: 'Look up enemy card',\r\n        description:\r\n            'You can look up one of the enemies cards only if they have any.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            console.log('LOOK_UP_CARD card used')\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: (game, player) => {\r\n            let enemySocket = game.playerSockets.filter(e => {\r\n                return e.socketId !== player.socketId\r\n            })[0].socketId\r\n            if (game.cards[enemySocket].length === 0) return false\r\n            return true\r\n        }\r\n    },\r\n    SWAP_RANDOM_CARDS: {\r\n        id: 'SWAP_RANDOM_CARDS',\r\n        title: 'Swap with opponent.',\r\n        description: `<span>\r\n                <b>Swap your card for a random opponents card.</b>\r\n            </span>\r\n            <span>\r\n                You must have a card besides this one in the deck. Your\r\n                opponent has to have at least 1 card.\r\n            </span>`,\r\n        use: ({ currentGame, socket, move }) => {\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n            let enemyCards = currentGame.cards[enemySocket]\r\n            let myCards = currentGame.cards[move.playerSocketId]\r\n\r\n            let randomIndexOfMine = Math.floor(Math.random() * myCards.length)\r\n            let randomIndexOfOpponent = null\r\n            let isSwap = true\r\n            while (isSwap) {\r\n                randomIndexOfOpponent = Math.floor(\r\n                    Math.random() * enemyCards.length\r\n                )\r\n                if (\r\n                    enemyCards[randomIndexOfOpponent].id !==\r\n                    Cards.SWAP_RANDOM_CARDS.id\r\n                ) {\r\n                    isSwap = false\r\n                }\r\n            }\r\n\r\n            let doOtherCardsExist = false\r\n            for (let i = 0; i < myCards.length; i++) {\r\n                if (myCards[i].id !== Cards.SWAP_RANDOM_CARDS.id) {\r\n                    doOtherCardsExist = true\r\n                    break\r\n                }\r\n            }\r\n\r\n            if (enemyCards.length >= 1 && !doOtherCardsExist) {\r\n                let a = myCards[randomIndexOfMine]\r\n                enemyCards[randomIndexOfOpponent] = a\r\n                myCards[randomIndexOfMine] = enemyCards[randomIndexOfOpponent]\r\n                currentGame.cards[enemySocket] = enemyCards\r\n                currentGame.cards[move.playerSocketId] = myCards\r\n            }\r\n\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: (game, player) => {\r\n            let cards = game.cards\r\n            let mySocketId = player.socketId\r\n            let myCards = cards[mySocketId]\r\n            let enemySocketId = game.playerSockets.filter(x => {\r\n                return x.socketId !== player.socketId\r\n            })[0].socketId\r\n            let enemyCards = cards[enemySocketId]\r\n\r\n            let doOtherCardsExist = false\r\n            for (let i = 0; i < myCards.length; i++) {\r\n                if (myCards[i].id !== Cards.SWAP_RANDOM_CARDS.id) {\r\n                    doOtherCardsExist = true\r\n                    break\r\n                }\r\n            }\r\n\r\n            if (doOtherCardsExist === false) return false\r\n            if (enemyCards.length === 0) return false\r\n            return true\r\n        }\r\n    },\r\n    RANDOMIZE_YOURSELF_CARD: {\r\n        id: 'RANDOMIZE_YOURSELF_CARD',\r\n        title: 'Randomize a card',\r\n        description: 'A random card of yours gets changed.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            let getRandomCard = (exception = null) => {\r\n                let excluded = ['RANDOMIZE_YOURSELF_CARD', exception]\r\n                let included = Object.values(Cards).filter(\r\n                    card => !excluded.includes(card.id)\r\n                )\r\n                let randomIndex = Math.floor(Math.random() * included.length)\r\n                return included[randomIndex]\r\n            }\r\n            currentGame.cards[move.playerSocketId].push(getRandomCard())\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    },\r\n    RANDOMIZE_ENEMY_CARD: {\r\n        id: 'RANDOMIZE_ENEMY_CARD',\r\n        title: 'Randomize an enemies card',\r\n        description: 'A random card of your opponent gets changed.',\r\n        use: ({ currentGame, socket, move }) => {\r\n            console.log('RANDOMIZE_ENEMY_CARD card used')\r\n\r\n            let enemySocket = currentGame.playerSockets.filter(e => {\r\n                return e.socketId !== move.playerSocketId\r\n            })[0].socketId\r\n\r\n            let getRandomCard = (exception = null) => {\r\n                let excluded = ['RANDOMIZE_YOURSELF_CARD', exception]\r\n                let included = Object.values(Cards).filter(\r\n                    card => !excluded.includes(card.id)\r\n                )\r\n                let randomIndex = Math.floor(Math.random() * included.length)\r\n                return included[randomIndex]\r\n            }\r\n            let enemyCardAmount = currentGame.cards[enemySocket].length\r\n            let randomIndex = Math.floor(Math.random() * enemyCardAmount)\r\n            if (enemyCardAmount > 0) {\r\n                currentGame.cards[enemySocket][randomIndex] = getRandomCard()\r\n            }\r\n            return currentGame\r\n        },\r\n        doesMeetConditions: game => {\r\n            return true\r\n        }\r\n    }\r\n}\r\n\r\nconst getCard = card => {\r\n    return Cards[card]\r\n}\r\n\r\nconst getRandomCard = () => {\r\n    let randomIndex = Math.floor(Math.random() * Object.keys(Cards).length)\r\n    let randomKey = Object.keys(Cards)[randomIndex]\r\n    return Cards[randomKey]\r\n}\r\n\r\nconst generateCards = amount => {\r\n    let result = []\r\n    for (let i = 0; i < amount; i++) {\r\n        result.push(getRandomCard())\r\n    }\r\n    return result\r\n}\r\n\r\nconst resupplyCards = game => {\r\n    let { cards } = game\r\n    for (let i = 0; i < Object.keys(cards).length; i++) {\r\n        let player = Object.keys(cards)[i]\r\n        let newCards = cards[player]\r\n        if (newCards.length < 3) {\r\n            newCards.push(getRandomCard())\r\n        }\r\n        cards[player] = newCards\r\n    }\r\n    return cards\r\n}\r\n\r\nmodule.exports = {\r\n    getRandomCard,\r\n    generateCards,\r\n    Cards,\r\n    getCard,\r\n    resupplyCards\r\n}\r\n","const Result = {\r\n    GAME_TIE: 'GAME_TIE',\r\n    TURN_WIN: 'TURN_WIN',\r\n    TURN_TIE: 'TURN_TIE',\r\n    GAME_WIN: 'GAME_WIN',\r\n    NOTHING: 'NOTHING'\r\n}\r\n\r\nmodule.exports = {\r\n    Result\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/popup.6f214bea.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip.63e37b8e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip2.e1b8fb14.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_drop.f8713f77.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card_flip3.dff27e09.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button_click.923d6dfa.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bg-lower.b0652969.mp3\";","module.exports = {\r\n    PLAYER_CONNECTED: 'PLAYER_CONNECTED',\r\n    PLAYER_DISCONNECTED: 'PLAYER_DISCONNECTED',\r\n    VERIFY_USERNAME: 'VERIFY_USERNAME',\r\n    LOGOUT: 'LOGOUT',\r\n    INVITATION: 'INVITATION',\r\n    INVITATION_ACCEPTED: 'INVITATION_ACCEPTED',\r\n    GAME_STARTED: 'GAME_STARTED',\r\n    GAME_MOVE: 'GAME_MOVE',\r\n    WIN: 'WIN',\r\n    REFRESH_PLAYERS: 'REFRESH_PLAYERS',\r\n    GAME_CREATED: 'GAME_CREATED',\r\n    WALKTHROUGH_READY: 'WALKTHROUGH_READY'\r\n}\r\n","const roundAndConvertVolume = volume => {\r\n    return Math.round((10 * parseInt(volume)) / 100) / 10\r\n}\r\n\r\nmodule.exports = { roundAndConvertVolume }\r\n","module.exports = {\r\n    POPUP_GENERIC: 'POPUP_GENERIC',\r\n    POPUP_CONFIRMATION: 'POPUP_CONFIRMATION',\r\n    POPUP_INVITATION: 'POPUP_INVITATION',\r\n    POPUP_DISCONNECTED: 'POPUP_DISCONNECTED',\r\n    POPUP_CARD: 'POPUP_CARD'\r\n}\r\n","const { isMove } = require('../../Shared/Functions')\r\nconst {\r\n    POPUP_CONFIRMATION,\r\n    POPUP_GENERIC\r\n} = require('../../Components/Popup/Types')\r\nconst { Result } = require('../../Shared/Enums')\r\n\r\nconst winHandler = ({\r\n    type,\r\n    props,\r\n    setScore = null,\r\n    score = null,\r\n    game = null,\r\n    winner = null,\r\n    returnToMenu = null\r\n}) => {\r\n    const { addPopup, setMove, setTitle, player, muteMusic } = props\r\n    let returnState = null\r\n    if (type === Result.TURN_WIN) {\r\n        returnState = { gameFromProps: false, game }\r\n        setMove(isMove({ game, player }))\r\n    } else if (type === Result.TURN_TIE) {\r\n        returnState = { gameFromProps: false, game }\r\n        setMove(isMove({ game, player }))\r\n        addPopup({\r\n            type: POPUP_GENERIC,\r\n            popupData: {\r\n                title: 'TIE',\r\n                content: `Turn is tied. None of the players won.`\r\n            }\r\n        })\r\n    } else if (type === Result.GAME_WIN) {\r\n        //* win\r\n        returnState = { allowMove: false }\r\n        addPopup({\r\n            type: POPUP_CONFIRMATION,\r\n            popupData: {\r\n                title: 'GAME ENDED',\r\n                content: `Player ${winner.nickname} has won the game.`,\r\n                onConfirm: () => {\r\n                    muteMusic(false)\r\n                    returnToMenu()\r\n                }\r\n            }\r\n        })\r\n    }\r\n    setScore({\r\n        player,\r\n        game,\r\n        setTitle,\r\n        score\r\n    })\r\n\r\n    return returnState\r\n}\r\n\r\nmodule.exports = { winHandler }\r\n"],"sourceRoot":""}